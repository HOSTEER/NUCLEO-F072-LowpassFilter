
RIF_F072RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007608  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  080076c8  080076c8  000176c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007998  08007998  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007998  08007998  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007998  08007998  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800799c  0800799c  0001799c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080079a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000070  08007a10  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08007a10  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e843  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eda  00000000  00000000  0002e8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  000307b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  000314f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8d9  00000000  00000000  00032160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb5c  00000000  00000000  0004ca39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c388  00000000  00000000  0005c595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f891d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d4  00000000  00000000  000f8970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080076b0 	.word	0x080076b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080076b0 	.word	0x080076b0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f000 ff0d 	bl	8001238 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fe5d 	bl	80010e8 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 feff 	bl	8001238 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fef5 	bl	8001238 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fe85 	bl	800116c <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 fe7b 	bl	800116c <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dadd>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464f      	mov	r7, r9
 8000488:	4646      	mov	r6, r8
 800048a:	46d6      	mov	lr, sl
 800048c:	000d      	movs	r5, r1
 800048e:	0004      	movs	r4, r0
 8000490:	b5c0      	push	{r6, r7, lr}
 8000492:	001f      	movs	r7, r3
 8000494:	0011      	movs	r1, r2
 8000496:	0328      	lsls	r0, r5, #12
 8000498:	0f62      	lsrs	r2, r4, #29
 800049a:	0a40      	lsrs	r0, r0, #9
 800049c:	4310      	orrs	r0, r2
 800049e:	007a      	lsls	r2, r7, #1
 80004a0:	0d52      	lsrs	r2, r2, #21
 80004a2:	00e3      	lsls	r3, r4, #3
 80004a4:	033c      	lsls	r4, r7, #12
 80004a6:	4691      	mov	r9, r2
 80004a8:	0a64      	lsrs	r4, r4, #9
 80004aa:	0ffa      	lsrs	r2, r7, #31
 80004ac:	0f4f      	lsrs	r7, r1, #29
 80004ae:	006e      	lsls	r6, r5, #1
 80004b0:	4327      	orrs	r7, r4
 80004b2:	4692      	mov	sl, r2
 80004b4:	46b8      	mov	r8, r7
 80004b6:	0d76      	lsrs	r6, r6, #21
 80004b8:	0fed      	lsrs	r5, r5, #31
 80004ba:	00c9      	lsls	r1, r1, #3
 80004bc:	4295      	cmp	r5, r2
 80004be:	d100      	bne.n	80004c2 <__aeabi_dadd+0x3e>
 80004c0:	e099      	b.n	80005f6 <__aeabi_dadd+0x172>
 80004c2:	464c      	mov	r4, r9
 80004c4:	1b34      	subs	r4, r6, r4
 80004c6:	46a4      	mov	ip, r4
 80004c8:	2c00      	cmp	r4, #0
 80004ca:	dc00      	bgt.n	80004ce <__aeabi_dadd+0x4a>
 80004cc:	e07c      	b.n	80005c8 <__aeabi_dadd+0x144>
 80004ce:	464a      	mov	r2, r9
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_dadd+0x52>
 80004d4:	e0b8      	b.n	8000648 <__aeabi_dadd+0x1c4>
 80004d6:	4ac5      	ldr	r2, [pc, #788]	; (80007ec <__aeabi_dadd+0x368>)
 80004d8:	4296      	cmp	r6, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x5a>
 80004dc:	e11c      	b.n	8000718 <__aeabi_dadd+0x294>
 80004de:	2280      	movs	r2, #128	; 0x80
 80004e0:	003c      	movs	r4, r7
 80004e2:	0412      	lsls	r2, r2, #16
 80004e4:	4314      	orrs	r4, r2
 80004e6:	46a0      	mov	r8, r4
 80004e8:	4662      	mov	r2, ip
 80004ea:	2a38      	cmp	r2, #56	; 0x38
 80004ec:	dd00      	ble.n	80004f0 <__aeabi_dadd+0x6c>
 80004ee:	e161      	b.n	80007b4 <__aeabi_dadd+0x330>
 80004f0:	2a1f      	cmp	r2, #31
 80004f2:	dd00      	ble.n	80004f6 <__aeabi_dadd+0x72>
 80004f4:	e1cc      	b.n	8000890 <__aeabi_dadd+0x40c>
 80004f6:	4664      	mov	r4, ip
 80004f8:	2220      	movs	r2, #32
 80004fa:	1b12      	subs	r2, r2, r4
 80004fc:	4644      	mov	r4, r8
 80004fe:	4094      	lsls	r4, r2
 8000500:	000f      	movs	r7, r1
 8000502:	46a1      	mov	r9, r4
 8000504:	4664      	mov	r4, ip
 8000506:	4091      	lsls	r1, r2
 8000508:	40e7      	lsrs	r7, r4
 800050a:	464c      	mov	r4, r9
 800050c:	1e4a      	subs	r2, r1, #1
 800050e:	4191      	sbcs	r1, r2
 8000510:	433c      	orrs	r4, r7
 8000512:	4642      	mov	r2, r8
 8000514:	4321      	orrs	r1, r4
 8000516:	4664      	mov	r4, ip
 8000518:	40e2      	lsrs	r2, r4
 800051a:	1a80      	subs	r0, r0, r2
 800051c:	1a5c      	subs	r4, r3, r1
 800051e:	42a3      	cmp	r3, r4
 8000520:	419b      	sbcs	r3, r3
 8000522:	425f      	negs	r7, r3
 8000524:	1bc7      	subs	r7, r0, r7
 8000526:	023b      	lsls	r3, r7, #8
 8000528:	d400      	bmi.n	800052c <__aeabi_dadd+0xa8>
 800052a:	e0d0      	b.n	80006ce <__aeabi_dadd+0x24a>
 800052c:	027f      	lsls	r7, r7, #9
 800052e:	0a7f      	lsrs	r7, r7, #9
 8000530:	2f00      	cmp	r7, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_dadd+0xb2>
 8000534:	e0ff      	b.n	8000736 <__aeabi_dadd+0x2b2>
 8000536:	0038      	movs	r0, r7
 8000538:	f001 fd8a 	bl	8002050 <__clzsi2>
 800053c:	0001      	movs	r1, r0
 800053e:	3908      	subs	r1, #8
 8000540:	2320      	movs	r3, #32
 8000542:	0022      	movs	r2, r4
 8000544:	1a5b      	subs	r3, r3, r1
 8000546:	408f      	lsls	r7, r1
 8000548:	40da      	lsrs	r2, r3
 800054a:	408c      	lsls	r4, r1
 800054c:	4317      	orrs	r7, r2
 800054e:	42b1      	cmp	r1, r6
 8000550:	da00      	bge.n	8000554 <__aeabi_dadd+0xd0>
 8000552:	e0ff      	b.n	8000754 <__aeabi_dadd+0x2d0>
 8000554:	1b89      	subs	r1, r1, r6
 8000556:	1c4b      	adds	r3, r1, #1
 8000558:	2b1f      	cmp	r3, #31
 800055a:	dd00      	ble.n	800055e <__aeabi_dadd+0xda>
 800055c:	e0a8      	b.n	80006b0 <__aeabi_dadd+0x22c>
 800055e:	2220      	movs	r2, #32
 8000560:	0039      	movs	r1, r7
 8000562:	1ad2      	subs	r2, r2, r3
 8000564:	0020      	movs	r0, r4
 8000566:	4094      	lsls	r4, r2
 8000568:	4091      	lsls	r1, r2
 800056a:	40d8      	lsrs	r0, r3
 800056c:	1e62      	subs	r2, r4, #1
 800056e:	4194      	sbcs	r4, r2
 8000570:	40df      	lsrs	r7, r3
 8000572:	2600      	movs	r6, #0
 8000574:	4301      	orrs	r1, r0
 8000576:	430c      	orrs	r4, r1
 8000578:	0763      	lsls	r3, r4, #29
 800057a:	d009      	beq.n	8000590 <__aeabi_dadd+0x10c>
 800057c:	230f      	movs	r3, #15
 800057e:	4023      	ands	r3, r4
 8000580:	2b04      	cmp	r3, #4
 8000582:	d005      	beq.n	8000590 <__aeabi_dadd+0x10c>
 8000584:	1d23      	adds	r3, r4, #4
 8000586:	42a3      	cmp	r3, r4
 8000588:	41a4      	sbcs	r4, r4
 800058a:	4264      	negs	r4, r4
 800058c:	193f      	adds	r7, r7, r4
 800058e:	001c      	movs	r4, r3
 8000590:	023b      	lsls	r3, r7, #8
 8000592:	d400      	bmi.n	8000596 <__aeabi_dadd+0x112>
 8000594:	e09e      	b.n	80006d4 <__aeabi_dadd+0x250>
 8000596:	4b95      	ldr	r3, [pc, #596]	; (80007ec <__aeabi_dadd+0x368>)
 8000598:	3601      	adds	r6, #1
 800059a:	429e      	cmp	r6, r3
 800059c:	d100      	bne.n	80005a0 <__aeabi_dadd+0x11c>
 800059e:	e0b7      	b.n	8000710 <__aeabi_dadd+0x28c>
 80005a0:	4a93      	ldr	r2, [pc, #588]	; (80007f0 <__aeabi_dadd+0x36c>)
 80005a2:	08e4      	lsrs	r4, r4, #3
 80005a4:	4017      	ands	r7, r2
 80005a6:	077b      	lsls	r3, r7, #29
 80005a8:	0571      	lsls	r1, r6, #21
 80005aa:	027f      	lsls	r7, r7, #9
 80005ac:	4323      	orrs	r3, r4
 80005ae:	0b3f      	lsrs	r7, r7, #12
 80005b0:	0d4a      	lsrs	r2, r1, #21
 80005b2:	0512      	lsls	r2, r2, #20
 80005b4:	433a      	orrs	r2, r7
 80005b6:	07ed      	lsls	r5, r5, #31
 80005b8:	432a      	orrs	r2, r5
 80005ba:	0018      	movs	r0, r3
 80005bc:	0011      	movs	r1, r2
 80005be:	bce0      	pop	{r5, r6, r7}
 80005c0:	46ba      	mov	sl, r7
 80005c2:	46b1      	mov	r9, r6
 80005c4:	46a8      	mov	r8, r5
 80005c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c8:	2c00      	cmp	r4, #0
 80005ca:	d04b      	beq.n	8000664 <__aeabi_dadd+0x1e0>
 80005cc:	464c      	mov	r4, r9
 80005ce:	1ba4      	subs	r4, r4, r6
 80005d0:	46a4      	mov	ip, r4
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d000      	beq.n	80005d8 <__aeabi_dadd+0x154>
 80005d6:	e123      	b.n	8000820 <__aeabi_dadd+0x39c>
 80005d8:	0004      	movs	r4, r0
 80005da:	431c      	orrs	r4, r3
 80005dc:	d100      	bne.n	80005e0 <__aeabi_dadd+0x15c>
 80005de:	e1af      	b.n	8000940 <__aeabi_dadd+0x4bc>
 80005e0:	4662      	mov	r2, ip
 80005e2:	1e54      	subs	r4, r2, #1
 80005e4:	2a01      	cmp	r2, #1
 80005e6:	d100      	bne.n	80005ea <__aeabi_dadd+0x166>
 80005e8:	e215      	b.n	8000a16 <__aeabi_dadd+0x592>
 80005ea:	4d80      	ldr	r5, [pc, #512]	; (80007ec <__aeabi_dadd+0x368>)
 80005ec:	45ac      	cmp	ip, r5
 80005ee:	d100      	bne.n	80005f2 <__aeabi_dadd+0x16e>
 80005f0:	e1c8      	b.n	8000984 <__aeabi_dadd+0x500>
 80005f2:	46a4      	mov	ip, r4
 80005f4:	e11b      	b.n	800082e <__aeabi_dadd+0x3aa>
 80005f6:	464a      	mov	r2, r9
 80005f8:	1ab2      	subs	r2, r6, r2
 80005fa:	4694      	mov	ip, r2
 80005fc:	2a00      	cmp	r2, #0
 80005fe:	dc00      	bgt.n	8000602 <__aeabi_dadd+0x17e>
 8000600:	e0ac      	b.n	800075c <__aeabi_dadd+0x2d8>
 8000602:	464a      	mov	r2, r9
 8000604:	2a00      	cmp	r2, #0
 8000606:	d043      	beq.n	8000690 <__aeabi_dadd+0x20c>
 8000608:	4a78      	ldr	r2, [pc, #480]	; (80007ec <__aeabi_dadd+0x368>)
 800060a:	4296      	cmp	r6, r2
 800060c:	d100      	bne.n	8000610 <__aeabi_dadd+0x18c>
 800060e:	e1af      	b.n	8000970 <__aeabi_dadd+0x4ec>
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	003c      	movs	r4, r7
 8000614:	0412      	lsls	r2, r2, #16
 8000616:	4314      	orrs	r4, r2
 8000618:	46a0      	mov	r8, r4
 800061a:	4662      	mov	r2, ip
 800061c:	2a38      	cmp	r2, #56	; 0x38
 800061e:	dc67      	bgt.n	80006f0 <__aeabi_dadd+0x26c>
 8000620:	2a1f      	cmp	r2, #31
 8000622:	dc00      	bgt.n	8000626 <__aeabi_dadd+0x1a2>
 8000624:	e15f      	b.n	80008e6 <__aeabi_dadd+0x462>
 8000626:	4647      	mov	r7, r8
 8000628:	3a20      	subs	r2, #32
 800062a:	40d7      	lsrs	r7, r2
 800062c:	4662      	mov	r2, ip
 800062e:	2a20      	cmp	r2, #32
 8000630:	d005      	beq.n	800063e <__aeabi_dadd+0x1ba>
 8000632:	4664      	mov	r4, ip
 8000634:	2240      	movs	r2, #64	; 0x40
 8000636:	1b12      	subs	r2, r2, r4
 8000638:	4644      	mov	r4, r8
 800063a:	4094      	lsls	r4, r2
 800063c:	4321      	orrs	r1, r4
 800063e:	1e4a      	subs	r2, r1, #1
 8000640:	4191      	sbcs	r1, r2
 8000642:	000c      	movs	r4, r1
 8000644:	433c      	orrs	r4, r7
 8000646:	e057      	b.n	80006f8 <__aeabi_dadd+0x274>
 8000648:	003a      	movs	r2, r7
 800064a:	430a      	orrs	r2, r1
 800064c:	d100      	bne.n	8000650 <__aeabi_dadd+0x1cc>
 800064e:	e105      	b.n	800085c <__aeabi_dadd+0x3d8>
 8000650:	0022      	movs	r2, r4
 8000652:	3a01      	subs	r2, #1
 8000654:	2c01      	cmp	r4, #1
 8000656:	d100      	bne.n	800065a <__aeabi_dadd+0x1d6>
 8000658:	e182      	b.n	8000960 <__aeabi_dadd+0x4dc>
 800065a:	4c64      	ldr	r4, [pc, #400]	; (80007ec <__aeabi_dadd+0x368>)
 800065c:	45a4      	cmp	ip, r4
 800065e:	d05b      	beq.n	8000718 <__aeabi_dadd+0x294>
 8000660:	4694      	mov	ip, r2
 8000662:	e741      	b.n	80004e8 <__aeabi_dadd+0x64>
 8000664:	4c63      	ldr	r4, [pc, #396]	; (80007f4 <__aeabi_dadd+0x370>)
 8000666:	1c77      	adds	r7, r6, #1
 8000668:	4227      	tst	r7, r4
 800066a:	d000      	beq.n	800066e <__aeabi_dadd+0x1ea>
 800066c:	e0c4      	b.n	80007f8 <__aeabi_dadd+0x374>
 800066e:	0004      	movs	r4, r0
 8000670:	431c      	orrs	r4, r3
 8000672:	2e00      	cmp	r6, #0
 8000674:	d000      	beq.n	8000678 <__aeabi_dadd+0x1f4>
 8000676:	e169      	b.n	800094c <__aeabi_dadd+0x4c8>
 8000678:	2c00      	cmp	r4, #0
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x1fa>
 800067c:	e1bf      	b.n	80009fe <__aeabi_dadd+0x57a>
 800067e:	4644      	mov	r4, r8
 8000680:	430c      	orrs	r4, r1
 8000682:	d000      	beq.n	8000686 <__aeabi_dadd+0x202>
 8000684:	e1d0      	b.n	8000a28 <__aeabi_dadd+0x5a4>
 8000686:	0742      	lsls	r2, r0, #29
 8000688:	08db      	lsrs	r3, r3, #3
 800068a:	4313      	orrs	r3, r2
 800068c:	08c0      	lsrs	r0, r0, #3
 800068e:	e029      	b.n	80006e4 <__aeabi_dadd+0x260>
 8000690:	003a      	movs	r2, r7
 8000692:	430a      	orrs	r2, r1
 8000694:	d100      	bne.n	8000698 <__aeabi_dadd+0x214>
 8000696:	e170      	b.n	800097a <__aeabi_dadd+0x4f6>
 8000698:	4662      	mov	r2, ip
 800069a:	4664      	mov	r4, ip
 800069c:	3a01      	subs	r2, #1
 800069e:	2c01      	cmp	r4, #1
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x220>
 80006a2:	e0e0      	b.n	8000866 <__aeabi_dadd+0x3e2>
 80006a4:	4c51      	ldr	r4, [pc, #324]	; (80007ec <__aeabi_dadd+0x368>)
 80006a6:	45a4      	cmp	ip, r4
 80006a8:	d100      	bne.n	80006ac <__aeabi_dadd+0x228>
 80006aa:	e161      	b.n	8000970 <__aeabi_dadd+0x4ec>
 80006ac:	4694      	mov	ip, r2
 80006ae:	e7b4      	b.n	800061a <__aeabi_dadd+0x196>
 80006b0:	003a      	movs	r2, r7
 80006b2:	391f      	subs	r1, #31
 80006b4:	40ca      	lsrs	r2, r1
 80006b6:	0011      	movs	r1, r2
 80006b8:	2b20      	cmp	r3, #32
 80006ba:	d003      	beq.n	80006c4 <__aeabi_dadd+0x240>
 80006bc:	2240      	movs	r2, #64	; 0x40
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	409f      	lsls	r7, r3
 80006c2:	433c      	orrs	r4, r7
 80006c4:	1e63      	subs	r3, r4, #1
 80006c6:	419c      	sbcs	r4, r3
 80006c8:	2700      	movs	r7, #0
 80006ca:	2600      	movs	r6, #0
 80006cc:	430c      	orrs	r4, r1
 80006ce:	0763      	lsls	r3, r4, #29
 80006d0:	d000      	beq.n	80006d4 <__aeabi_dadd+0x250>
 80006d2:	e753      	b.n	800057c <__aeabi_dadd+0xf8>
 80006d4:	46b4      	mov	ip, r6
 80006d6:	08e4      	lsrs	r4, r4, #3
 80006d8:	077b      	lsls	r3, r7, #29
 80006da:	4323      	orrs	r3, r4
 80006dc:	08f8      	lsrs	r0, r7, #3
 80006de:	4a43      	ldr	r2, [pc, #268]	; (80007ec <__aeabi_dadd+0x368>)
 80006e0:	4594      	cmp	ip, r2
 80006e2:	d01d      	beq.n	8000720 <__aeabi_dadd+0x29c>
 80006e4:	4662      	mov	r2, ip
 80006e6:	0307      	lsls	r7, r0, #12
 80006e8:	0552      	lsls	r2, r2, #21
 80006ea:	0b3f      	lsrs	r7, r7, #12
 80006ec:	0d52      	lsrs	r2, r2, #21
 80006ee:	e760      	b.n	80005b2 <__aeabi_dadd+0x12e>
 80006f0:	4644      	mov	r4, r8
 80006f2:	430c      	orrs	r4, r1
 80006f4:	1e62      	subs	r2, r4, #1
 80006f6:	4194      	sbcs	r4, r2
 80006f8:	18e4      	adds	r4, r4, r3
 80006fa:	429c      	cmp	r4, r3
 80006fc:	419b      	sbcs	r3, r3
 80006fe:	425f      	negs	r7, r3
 8000700:	183f      	adds	r7, r7, r0
 8000702:	023b      	lsls	r3, r7, #8
 8000704:	d5e3      	bpl.n	80006ce <__aeabi_dadd+0x24a>
 8000706:	4b39      	ldr	r3, [pc, #228]	; (80007ec <__aeabi_dadd+0x368>)
 8000708:	3601      	adds	r6, #1
 800070a:	429e      	cmp	r6, r3
 800070c:	d000      	beq.n	8000710 <__aeabi_dadd+0x28c>
 800070e:	e0b5      	b.n	800087c <__aeabi_dadd+0x3f8>
 8000710:	0032      	movs	r2, r6
 8000712:	2700      	movs	r7, #0
 8000714:	2300      	movs	r3, #0
 8000716:	e74c      	b.n	80005b2 <__aeabi_dadd+0x12e>
 8000718:	0742      	lsls	r2, r0, #29
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	4313      	orrs	r3, r2
 800071e:	08c0      	lsrs	r0, r0, #3
 8000720:	001a      	movs	r2, r3
 8000722:	4302      	orrs	r2, r0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x2a4>
 8000726:	e1e1      	b.n	8000aec <__aeabi_dadd+0x668>
 8000728:	2780      	movs	r7, #128	; 0x80
 800072a:	033f      	lsls	r7, r7, #12
 800072c:	4307      	orrs	r7, r0
 800072e:	033f      	lsls	r7, r7, #12
 8000730:	4a2e      	ldr	r2, [pc, #184]	; (80007ec <__aeabi_dadd+0x368>)
 8000732:	0b3f      	lsrs	r7, r7, #12
 8000734:	e73d      	b.n	80005b2 <__aeabi_dadd+0x12e>
 8000736:	0020      	movs	r0, r4
 8000738:	f001 fc8a 	bl	8002050 <__clzsi2>
 800073c:	0001      	movs	r1, r0
 800073e:	3118      	adds	r1, #24
 8000740:	291f      	cmp	r1, #31
 8000742:	dc00      	bgt.n	8000746 <__aeabi_dadd+0x2c2>
 8000744:	e6fc      	b.n	8000540 <__aeabi_dadd+0xbc>
 8000746:	3808      	subs	r0, #8
 8000748:	4084      	lsls	r4, r0
 800074a:	0027      	movs	r7, r4
 800074c:	2400      	movs	r4, #0
 800074e:	42b1      	cmp	r1, r6
 8000750:	db00      	blt.n	8000754 <__aeabi_dadd+0x2d0>
 8000752:	e6ff      	b.n	8000554 <__aeabi_dadd+0xd0>
 8000754:	4a26      	ldr	r2, [pc, #152]	; (80007f0 <__aeabi_dadd+0x36c>)
 8000756:	1a76      	subs	r6, r6, r1
 8000758:	4017      	ands	r7, r2
 800075a:	e70d      	b.n	8000578 <__aeabi_dadd+0xf4>
 800075c:	2a00      	cmp	r2, #0
 800075e:	d02f      	beq.n	80007c0 <__aeabi_dadd+0x33c>
 8000760:	464a      	mov	r2, r9
 8000762:	1b92      	subs	r2, r2, r6
 8000764:	4694      	mov	ip, r2
 8000766:	2e00      	cmp	r6, #0
 8000768:	d100      	bne.n	800076c <__aeabi_dadd+0x2e8>
 800076a:	e0ad      	b.n	80008c8 <__aeabi_dadd+0x444>
 800076c:	4a1f      	ldr	r2, [pc, #124]	; (80007ec <__aeabi_dadd+0x368>)
 800076e:	4591      	cmp	r9, r2
 8000770:	d100      	bne.n	8000774 <__aeabi_dadd+0x2f0>
 8000772:	e10f      	b.n	8000994 <__aeabi_dadd+0x510>
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	0412      	lsls	r2, r2, #16
 8000778:	4310      	orrs	r0, r2
 800077a:	4662      	mov	r2, ip
 800077c:	2a38      	cmp	r2, #56	; 0x38
 800077e:	dd00      	ble.n	8000782 <__aeabi_dadd+0x2fe>
 8000780:	e10f      	b.n	80009a2 <__aeabi_dadd+0x51e>
 8000782:	2a1f      	cmp	r2, #31
 8000784:	dd00      	ble.n	8000788 <__aeabi_dadd+0x304>
 8000786:	e180      	b.n	8000a8a <__aeabi_dadd+0x606>
 8000788:	4664      	mov	r4, ip
 800078a:	2220      	movs	r2, #32
 800078c:	001e      	movs	r6, r3
 800078e:	1b12      	subs	r2, r2, r4
 8000790:	4667      	mov	r7, ip
 8000792:	0004      	movs	r4, r0
 8000794:	4093      	lsls	r3, r2
 8000796:	4094      	lsls	r4, r2
 8000798:	40fe      	lsrs	r6, r7
 800079a:	1e5a      	subs	r2, r3, #1
 800079c:	4193      	sbcs	r3, r2
 800079e:	40f8      	lsrs	r0, r7
 80007a0:	4334      	orrs	r4, r6
 80007a2:	431c      	orrs	r4, r3
 80007a4:	4480      	add	r8, r0
 80007a6:	1864      	adds	r4, r4, r1
 80007a8:	428c      	cmp	r4, r1
 80007aa:	41bf      	sbcs	r7, r7
 80007ac:	427f      	negs	r7, r7
 80007ae:	464e      	mov	r6, r9
 80007b0:	4447      	add	r7, r8
 80007b2:	e7a6      	b.n	8000702 <__aeabi_dadd+0x27e>
 80007b4:	4642      	mov	r2, r8
 80007b6:	430a      	orrs	r2, r1
 80007b8:	0011      	movs	r1, r2
 80007ba:	1e4a      	subs	r2, r1, #1
 80007bc:	4191      	sbcs	r1, r2
 80007be:	e6ad      	b.n	800051c <__aeabi_dadd+0x98>
 80007c0:	4c0c      	ldr	r4, [pc, #48]	; (80007f4 <__aeabi_dadd+0x370>)
 80007c2:	1c72      	adds	r2, r6, #1
 80007c4:	4222      	tst	r2, r4
 80007c6:	d000      	beq.n	80007ca <__aeabi_dadd+0x346>
 80007c8:	e0a1      	b.n	800090e <__aeabi_dadd+0x48a>
 80007ca:	0002      	movs	r2, r0
 80007cc:	431a      	orrs	r2, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_dadd+0x350>
 80007d2:	e0fa      	b.n	80009ca <__aeabi_dadd+0x546>
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x356>
 80007d8:	e145      	b.n	8000a66 <__aeabi_dadd+0x5e2>
 80007da:	003a      	movs	r2, r7
 80007dc:	430a      	orrs	r2, r1
 80007de:	d000      	beq.n	80007e2 <__aeabi_dadd+0x35e>
 80007e0:	e146      	b.n	8000a70 <__aeabi_dadd+0x5ec>
 80007e2:	0742      	lsls	r2, r0, #29
 80007e4:	08db      	lsrs	r3, r3, #3
 80007e6:	4313      	orrs	r3, r2
 80007e8:	08c0      	lsrs	r0, r0, #3
 80007ea:	e77b      	b.n	80006e4 <__aeabi_dadd+0x260>
 80007ec:	000007ff 	.word	0x000007ff
 80007f0:	ff7fffff 	.word	0xff7fffff
 80007f4:	000007fe 	.word	0x000007fe
 80007f8:	4647      	mov	r7, r8
 80007fa:	1a5c      	subs	r4, r3, r1
 80007fc:	1bc2      	subs	r2, r0, r7
 80007fe:	42a3      	cmp	r3, r4
 8000800:	41bf      	sbcs	r7, r7
 8000802:	427f      	negs	r7, r7
 8000804:	46b9      	mov	r9, r7
 8000806:	0017      	movs	r7, r2
 8000808:	464a      	mov	r2, r9
 800080a:	1abf      	subs	r7, r7, r2
 800080c:	023a      	lsls	r2, r7, #8
 800080e:	d500      	bpl.n	8000812 <__aeabi_dadd+0x38e>
 8000810:	e08d      	b.n	800092e <__aeabi_dadd+0x4aa>
 8000812:	0023      	movs	r3, r4
 8000814:	433b      	orrs	r3, r7
 8000816:	d000      	beq.n	800081a <__aeabi_dadd+0x396>
 8000818:	e68a      	b.n	8000530 <__aeabi_dadd+0xac>
 800081a:	2000      	movs	r0, #0
 800081c:	2500      	movs	r5, #0
 800081e:	e761      	b.n	80006e4 <__aeabi_dadd+0x260>
 8000820:	4cb4      	ldr	r4, [pc, #720]	; (8000af4 <__aeabi_dadd+0x670>)
 8000822:	45a1      	cmp	r9, r4
 8000824:	d100      	bne.n	8000828 <__aeabi_dadd+0x3a4>
 8000826:	e0ad      	b.n	8000984 <__aeabi_dadd+0x500>
 8000828:	2480      	movs	r4, #128	; 0x80
 800082a:	0424      	lsls	r4, r4, #16
 800082c:	4320      	orrs	r0, r4
 800082e:	4664      	mov	r4, ip
 8000830:	2c38      	cmp	r4, #56	; 0x38
 8000832:	dc3d      	bgt.n	80008b0 <__aeabi_dadd+0x42c>
 8000834:	4662      	mov	r2, ip
 8000836:	2c1f      	cmp	r4, #31
 8000838:	dd00      	ble.n	800083c <__aeabi_dadd+0x3b8>
 800083a:	e0b7      	b.n	80009ac <__aeabi_dadd+0x528>
 800083c:	2520      	movs	r5, #32
 800083e:	001e      	movs	r6, r3
 8000840:	1b2d      	subs	r5, r5, r4
 8000842:	0004      	movs	r4, r0
 8000844:	40ab      	lsls	r3, r5
 8000846:	40ac      	lsls	r4, r5
 8000848:	40d6      	lsrs	r6, r2
 800084a:	40d0      	lsrs	r0, r2
 800084c:	4642      	mov	r2, r8
 800084e:	1e5d      	subs	r5, r3, #1
 8000850:	41ab      	sbcs	r3, r5
 8000852:	4334      	orrs	r4, r6
 8000854:	1a12      	subs	r2, r2, r0
 8000856:	4690      	mov	r8, r2
 8000858:	4323      	orrs	r3, r4
 800085a:	e02c      	b.n	80008b6 <__aeabi_dadd+0x432>
 800085c:	0742      	lsls	r2, r0, #29
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	4313      	orrs	r3, r2
 8000862:	08c0      	lsrs	r0, r0, #3
 8000864:	e73b      	b.n	80006de <__aeabi_dadd+0x25a>
 8000866:	185c      	adds	r4, r3, r1
 8000868:	429c      	cmp	r4, r3
 800086a:	419b      	sbcs	r3, r3
 800086c:	4440      	add	r0, r8
 800086e:	425b      	negs	r3, r3
 8000870:	18c7      	adds	r7, r0, r3
 8000872:	2601      	movs	r6, #1
 8000874:	023b      	lsls	r3, r7, #8
 8000876:	d400      	bmi.n	800087a <__aeabi_dadd+0x3f6>
 8000878:	e729      	b.n	80006ce <__aeabi_dadd+0x24a>
 800087a:	2602      	movs	r6, #2
 800087c:	4a9e      	ldr	r2, [pc, #632]	; (8000af8 <__aeabi_dadd+0x674>)
 800087e:	0863      	lsrs	r3, r4, #1
 8000880:	4017      	ands	r7, r2
 8000882:	2201      	movs	r2, #1
 8000884:	4014      	ands	r4, r2
 8000886:	431c      	orrs	r4, r3
 8000888:	07fb      	lsls	r3, r7, #31
 800088a:	431c      	orrs	r4, r3
 800088c:	087f      	lsrs	r7, r7, #1
 800088e:	e673      	b.n	8000578 <__aeabi_dadd+0xf4>
 8000890:	4644      	mov	r4, r8
 8000892:	3a20      	subs	r2, #32
 8000894:	40d4      	lsrs	r4, r2
 8000896:	4662      	mov	r2, ip
 8000898:	2a20      	cmp	r2, #32
 800089a:	d005      	beq.n	80008a8 <__aeabi_dadd+0x424>
 800089c:	4667      	mov	r7, ip
 800089e:	2240      	movs	r2, #64	; 0x40
 80008a0:	1bd2      	subs	r2, r2, r7
 80008a2:	4647      	mov	r7, r8
 80008a4:	4097      	lsls	r7, r2
 80008a6:	4339      	orrs	r1, r7
 80008a8:	1e4a      	subs	r2, r1, #1
 80008aa:	4191      	sbcs	r1, r2
 80008ac:	4321      	orrs	r1, r4
 80008ae:	e635      	b.n	800051c <__aeabi_dadd+0x98>
 80008b0:	4303      	orrs	r3, r0
 80008b2:	1e58      	subs	r0, r3, #1
 80008b4:	4183      	sbcs	r3, r0
 80008b6:	1acc      	subs	r4, r1, r3
 80008b8:	42a1      	cmp	r1, r4
 80008ba:	41bf      	sbcs	r7, r7
 80008bc:	4643      	mov	r3, r8
 80008be:	427f      	negs	r7, r7
 80008c0:	4655      	mov	r5, sl
 80008c2:	464e      	mov	r6, r9
 80008c4:	1bdf      	subs	r7, r3, r7
 80008c6:	e62e      	b.n	8000526 <__aeabi_dadd+0xa2>
 80008c8:	0002      	movs	r2, r0
 80008ca:	431a      	orrs	r2, r3
 80008cc:	d100      	bne.n	80008d0 <__aeabi_dadd+0x44c>
 80008ce:	e0bd      	b.n	8000a4c <__aeabi_dadd+0x5c8>
 80008d0:	4662      	mov	r2, ip
 80008d2:	4664      	mov	r4, ip
 80008d4:	3a01      	subs	r2, #1
 80008d6:	2c01      	cmp	r4, #1
 80008d8:	d100      	bne.n	80008dc <__aeabi_dadd+0x458>
 80008da:	e0e5      	b.n	8000aa8 <__aeabi_dadd+0x624>
 80008dc:	4c85      	ldr	r4, [pc, #532]	; (8000af4 <__aeabi_dadd+0x670>)
 80008de:	45a4      	cmp	ip, r4
 80008e0:	d058      	beq.n	8000994 <__aeabi_dadd+0x510>
 80008e2:	4694      	mov	ip, r2
 80008e4:	e749      	b.n	800077a <__aeabi_dadd+0x2f6>
 80008e6:	4664      	mov	r4, ip
 80008e8:	2220      	movs	r2, #32
 80008ea:	1b12      	subs	r2, r2, r4
 80008ec:	4644      	mov	r4, r8
 80008ee:	4094      	lsls	r4, r2
 80008f0:	000f      	movs	r7, r1
 80008f2:	46a1      	mov	r9, r4
 80008f4:	4664      	mov	r4, ip
 80008f6:	4091      	lsls	r1, r2
 80008f8:	40e7      	lsrs	r7, r4
 80008fa:	464c      	mov	r4, r9
 80008fc:	1e4a      	subs	r2, r1, #1
 80008fe:	4191      	sbcs	r1, r2
 8000900:	433c      	orrs	r4, r7
 8000902:	4642      	mov	r2, r8
 8000904:	430c      	orrs	r4, r1
 8000906:	4661      	mov	r1, ip
 8000908:	40ca      	lsrs	r2, r1
 800090a:	1880      	adds	r0, r0, r2
 800090c:	e6f4      	b.n	80006f8 <__aeabi_dadd+0x274>
 800090e:	4c79      	ldr	r4, [pc, #484]	; (8000af4 <__aeabi_dadd+0x670>)
 8000910:	42a2      	cmp	r2, r4
 8000912:	d100      	bne.n	8000916 <__aeabi_dadd+0x492>
 8000914:	e6fd      	b.n	8000712 <__aeabi_dadd+0x28e>
 8000916:	1859      	adds	r1, r3, r1
 8000918:	4299      	cmp	r1, r3
 800091a:	419b      	sbcs	r3, r3
 800091c:	4440      	add	r0, r8
 800091e:	425f      	negs	r7, r3
 8000920:	19c7      	adds	r7, r0, r7
 8000922:	07fc      	lsls	r4, r7, #31
 8000924:	0849      	lsrs	r1, r1, #1
 8000926:	0016      	movs	r6, r2
 8000928:	430c      	orrs	r4, r1
 800092a:	087f      	lsrs	r7, r7, #1
 800092c:	e6cf      	b.n	80006ce <__aeabi_dadd+0x24a>
 800092e:	1acc      	subs	r4, r1, r3
 8000930:	42a1      	cmp	r1, r4
 8000932:	41bf      	sbcs	r7, r7
 8000934:	4643      	mov	r3, r8
 8000936:	427f      	negs	r7, r7
 8000938:	1a18      	subs	r0, r3, r0
 800093a:	4655      	mov	r5, sl
 800093c:	1bc7      	subs	r7, r0, r7
 800093e:	e5f7      	b.n	8000530 <__aeabi_dadd+0xac>
 8000940:	08c9      	lsrs	r1, r1, #3
 8000942:	077b      	lsls	r3, r7, #29
 8000944:	4655      	mov	r5, sl
 8000946:	430b      	orrs	r3, r1
 8000948:	08f8      	lsrs	r0, r7, #3
 800094a:	e6c8      	b.n	80006de <__aeabi_dadd+0x25a>
 800094c:	2c00      	cmp	r4, #0
 800094e:	d000      	beq.n	8000952 <__aeabi_dadd+0x4ce>
 8000950:	e081      	b.n	8000a56 <__aeabi_dadd+0x5d2>
 8000952:	4643      	mov	r3, r8
 8000954:	430b      	orrs	r3, r1
 8000956:	d115      	bne.n	8000984 <__aeabi_dadd+0x500>
 8000958:	2080      	movs	r0, #128	; 0x80
 800095a:	2500      	movs	r5, #0
 800095c:	0300      	lsls	r0, r0, #12
 800095e:	e6e3      	b.n	8000728 <__aeabi_dadd+0x2a4>
 8000960:	1a5c      	subs	r4, r3, r1
 8000962:	42a3      	cmp	r3, r4
 8000964:	419b      	sbcs	r3, r3
 8000966:	1bc7      	subs	r7, r0, r7
 8000968:	425b      	negs	r3, r3
 800096a:	2601      	movs	r6, #1
 800096c:	1aff      	subs	r7, r7, r3
 800096e:	e5da      	b.n	8000526 <__aeabi_dadd+0xa2>
 8000970:	0742      	lsls	r2, r0, #29
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	4313      	orrs	r3, r2
 8000976:	08c0      	lsrs	r0, r0, #3
 8000978:	e6d2      	b.n	8000720 <__aeabi_dadd+0x29c>
 800097a:	0742      	lsls	r2, r0, #29
 800097c:	08db      	lsrs	r3, r3, #3
 800097e:	4313      	orrs	r3, r2
 8000980:	08c0      	lsrs	r0, r0, #3
 8000982:	e6ac      	b.n	80006de <__aeabi_dadd+0x25a>
 8000984:	4643      	mov	r3, r8
 8000986:	4642      	mov	r2, r8
 8000988:	08c9      	lsrs	r1, r1, #3
 800098a:	075b      	lsls	r3, r3, #29
 800098c:	4655      	mov	r5, sl
 800098e:	430b      	orrs	r3, r1
 8000990:	08d0      	lsrs	r0, r2, #3
 8000992:	e6c5      	b.n	8000720 <__aeabi_dadd+0x29c>
 8000994:	4643      	mov	r3, r8
 8000996:	4642      	mov	r2, r8
 8000998:	075b      	lsls	r3, r3, #29
 800099a:	08c9      	lsrs	r1, r1, #3
 800099c:	430b      	orrs	r3, r1
 800099e:	08d0      	lsrs	r0, r2, #3
 80009a0:	e6be      	b.n	8000720 <__aeabi_dadd+0x29c>
 80009a2:	4303      	orrs	r3, r0
 80009a4:	001c      	movs	r4, r3
 80009a6:	1e63      	subs	r3, r4, #1
 80009a8:	419c      	sbcs	r4, r3
 80009aa:	e6fc      	b.n	80007a6 <__aeabi_dadd+0x322>
 80009ac:	0002      	movs	r2, r0
 80009ae:	3c20      	subs	r4, #32
 80009b0:	40e2      	lsrs	r2, r4
 80009b2:	0014      	movs	r4, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	2a20      	cmp	r2, #32
 80009b8:	d003      	beq.n	80009c2 <__aeabi_dadd+0x53e>
 80009ba:	2540      	movs	r5, #64	; 0x40
 80009bc:	1aad      	subs	r5, r5, r2
 80009be:	40a8      	lsls	r0, r5
 80009c0:	4303      	orrs	r3, r0
 80009c2:	1e58      	subs	r0, r3, #1
 80009c4:	4183      	sbcs	r3, r0
 80009c6:	4323      	orrs	r3, r4
 80009c8:	e775      	b.n	80008b6 <__aeabi_dadd+0x432>
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d0e2      	beq.n	8000994 <__aeabi_dadd+0x510>
 80009ce:	003a      	movs	r2, r7
 80009d0:	430a      	orrs	r2, r1
 80009d2:	d0cd      	beq.n	8000970 <__aeabi_dadd+0x4ec>
 80009d4:	0742      	lsls	r2, r0, #29
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	4313      	orrs	r3, r2
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	08c0      	lsrs	r0, r0, #3
 80009de:	0312      	lsls	r2, r2, #12
 80009e0:	4210      	tst	r0, r2
 80009e2:	d006      	beq.n	80009f2 <__aeabi_dadd+0x56e>
 80009e4:	08fc      	lsrs	r4, r7, #3
 80009e6:	4214      	tst	r4, r2
 80009e8:	d103      	bne.n	80009f2 <__aeabi_dadd+0x56e>
 80009ea:	0020      	movs	r0, r4
 80009ec:	08cb      	lsrs	r3, r1, #3
 80009ee:	077a      	lsls	r2, r7, #29
 80009f0:	4313      	orrs	r3, r2
 80009f2:	0f5a      	lsrs	r2, r3, #29
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	0752      	lsls	r2, r2, #29
 80009f8:	08db      	lsrs	r3, r3, #3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	e690      	b.n	8000720 <__aeabi_dadd+0x29c>
 80009fe:	4643      	mov	r3, r8
 8000a00:	430b      	orrs	r3, r1
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x582>
 8000a04:	e709      	b.n	800081a <__aeabi_dadd+0x396>
 8000a06:	4643      	mov	r3, r8
 8000a08:	4642      	mov	r2, r8
 8000a0a:	08c9      	lsrs	r1, r1, #3
 8000a0c:	075b      	lsls	r3, r3, #29
 8000a0e:	4655      	mov	r5, sl
 8000a10:	430b      	orrs	r3, r1
 8000a12:	08d0      	lsrs	r0, r2, #3
 8000a14:	e666      	b.n	80006e4 <__aeabi_dadd+0x260>
 8000a16:	1acc      	subs	r4, r1, r3
 8000a18:	42a1      	cmp	r1, r4
 8000a1a:	4189      	sbcs	r1, r1
 8000a1c:	1a3f      	subs	r7, r7, r0
 8000a1e:	4249      	negs	r1, r1
 8000a20:	4655      	mov	r5, sl
 8000a22:	2601      	movs	r6, #1
 8000a24:	1a7f      	subs	r7, r7, r1
 8000a26:	e57e      	b.n	8000526 <__aeabi_dadd+0xa2>
 8000a28:	4642      	mov	r2, r8
 8000a2a:	1a5c      	subs	r4, r3, r1
 8000a2c:	1a87      	subs	r7, r0, r2
 8000a2e:	42a3      	cmp	r3, r4
 8000a30:	4192      	sbcs	r2, r2
 8000a32:	4252      	negs	r2, r2
 8000a34:	1abf      	subs	r7, r7, r2
 8000a36:	023a      	lsls	r2, r7, #8
 8000a38:	d53d      	bpl.n	8000ab6 <__aeabi_dadd+0x632>
 8000a3a:	1acc      	subs	r4, r1, r3
 8000a3c:	42a1      	cmp	r1, r4
 8000a3e:	4189      	sbcs	r1, r1
 8000a40:	4643      	mov	r3, r8
 8000a42:	4249      	negs	r1, r1
 8000a44:	1a1f      	subs	r7, r3, r0
 8000a46:	4655      	mov	r5, sl
 8000a48:	1a7f      	subs	r7, r7, r1
 8000a4a:	e595      	b.n	8000578 <__aeabi_dadd+0xf4>
 8000a4c:	077b      	lsls	r3, r7, #29
 8000a4e:	08c9      	lsrs	r1, r1, #3
 8000a50:	430b      	orrs	r3, r1
 8000a52:	08f8      	lsrs	r0, r7, #3
 8000a54:	e643      	b.n	80006de <__aeabi_dadd+0x25a>
 8000a56:	4644      	mov	r4, r8
 8000a58:	08db      	lsrs	r3, r3, #3
 8000a5a:	430c      	orrs	r4, r1
 8000a5c:	d130      	bne.n	8000ac0 <__aeabi_dadd+0x63c>
 8000a5e:	0742      	lsls	r2, r0, #29
 8000a60:	4313      	orrs	r3, r2
 8000a62:	08c0      	lsrs	r0, r0, #3
 8000a64:	e65c      	b.n	8000720 <__aeabi_dadd+0x29c>
 8000a66:	077b      	lsls	r3, r7, #29
 8000a68:	08c9      	lsrs	r1, r1, #3
 8000a6a:	430b      	orrs	r3, r1
 8000a6c:	08f8      	lsrs	r0, r7, #3
 8000a6e:	e639      	b.n	80006e4 <__aeabi_dadd+0x260>
 8000a70:	185c      	adds	r4, r3, r1
 8000a72:	429c      	cmp	r4, r3
 8000a74:	419b      	sbcs	r3, r3
 8000a76:	4440      	add	r0, r8
 8000a78:	425b      	negs	r3, r3
 8000a7a:	18c7      	adds	r7, r0, r3
 8000a7c:	023b      	lsls	r3, r7, #8
 8000a7e:	d400      	bmi.n	8000a82 <__aeabi_dadd+0x5fe>
 8000a80:	e625      	b.n	80006ce <__aeabi_dadd+0x24a>
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <__aeabi_dadd+0x674>)
 8000a84:	2601      	movs	r6, #1
 8000a86:	401f      	ands	r7, r3
 8000a88:	e621      	b.n	80006ce <__aeabi_dadd+0x24a>
 8000a8a:	0004      	movs	r4, r0
 8000a8c:	3a20      	subs	r2, #32
 8000a8e:	40d4      	lsrs	r4, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	2a20      	cmp	r2, #32
 8000a94:	d004      	beq.n	8000aa0 <__aeabi_dadd+0x61c>
 8000a96:	2240      	movs	r2, #64	; 0x40
 8000a98:	4666      	mov	r6, ip
 8000a9a:	1b92      	subs	r2, r2, r6
 8000a9c:	4090      	lsls	r0, r2
 8000a9e:	4303      	orrs	r3, r0
 8000aa0:	1e5a      	subs	r2, r3, #1
 8000aa2:	4193      	sbcs	r3, r2
 8000aa4:	431c      	orrs	r4, r3
 8000aa6:	e67e      	b.n	80007a6 <__aeabi_dadd+0x322>
 8000aa8:	185c      	adds	r4, r3, r1
 8000aaa:	428c      	cmp	r4, r1
 8000aac:	4189      	sbcs	r1, r1
 8000aae:	4440      	add	r0, r8
 8000ab0:	4249      	negs	r1, r1
 8000ab2:	1847      	adds	r7, r0, r1
 8000ab4:	e6dd      	b.n	8000872 <__aeabi_dadd+0x3ee>
 8000ab6:	0023      	movs	r3, r4
 8000ab8:	433b      	orrs	r3, r7
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x63a>
 8000abc:	e6ad      	b.n	800081a <__aeabi_dadd+0x396>
 8000abe:	e606      	b.n	80006ce <__aeabi_dadd+0x24a>
 8000ac0:	0744      	lsls	r4, r0, #29
 8000ac2:	4323      	orrs	r3, r4
 8000ac4:	2480      	movs	r4, #128	; 0x80
 8000ac6:	08c0      	lsrs	r0, r0, #3
 8000ac8:	0324      	lsls	r4, r4, #12
 8000aca:	4220      	tst	r0, r4
 8000acc:	d008      	beq.n	8000ae0 <__aeabi_dadd+0x65c>
 8000ace:	4642      	mov	r2, r8
 8000ad0:	08d6      	lsrs	r6, r2, #3
 8000ad2:	4226      	tst	r6, r4
 8000ad4:	d104      	bne.n	8000ae0 <__aeabi_dadd+0x65c>
 8000ad6:	4655      	mov	r5, sl
 8000ad8:	0030      	movs	r0, r6
 8000ada:	08cb      	lsrs	r3, r1, #3
 8000adc:	0751      	lsls	r1, r2, #29
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	0f5a      	lsrs	r2, r3, #29
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	08db      	lsrs	r3, r3, #3
 8000ae6:	0752      	lsls	r2, r2, #29
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	e619      	b.n	8000720 <__aeabi_dadd+0x29c>
 8000aec:	2300      	movs	r3, #0
 8000aee:	4a01      	ldr	r2, [pc, #4]	; (8000af4 <__aeabi_dadd+0x670>)
 8000af0:	001f      	movs	r7, r3
 8000af2:	e55e      	b.n	80005b2 <__aeabi_dadd+0x12e>
 8000af4:	000007ff 	.word	0x000007ff
 8000af8:	ff7fffff 	.word	0xff7fffff

08000afc <__aeabi_ddiv>:
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	4657      	mov	r7, sl
 8000b00:	464e      	mov	r6, r9
 8000b02:	4645      	mov	r5, r8
 8000b04:	46de      	mov	lr, fp
 8000b06:	b5e0      	push	{r5, r6, r7, lr}
 8000b08:	4681      	mov	r9, r0
 8000b0a:	0005      	movs	r5, r0
 8000b0c:	030c      	lsls	r4, r1, #12
 8000b0e:	0048      	lsls	r0, r1, #1
 8000b10:	4692      	mov	sl, r2
 8000b12:	001f      	movs	r7, r3
 8000b14:	b085      	sub	sp, #20
 8000b16:	0b24      	lsrs	r4, r4, #12
 8000b18:	0d40      	lsrs	r0, r0, #21
 8000b1a:	0fce      	lsrs	r6, r1, #31
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_ddiv+0x26>
 8000b20:	e156      	b.n	8000dd0 <__aeabi_ddiv+0x2d4>
 8000b22:	4bd4      	ldr	r3, [pc, #848]	; (8000e74 <__aeabi_ddiv+0x378>)
 8000b24:	4298      	cmp	r0, r3
 8000b26:	d100      	bne.n	8000b2a <__aeabi_ddiv+0x2e>
 8000b28:	e172      	b.n	8000e10 <__aeabi_ddiv+0x314>
 8000b2a:	0f6b      	lsrs	r3, r5, #29
 8000b2c:	00e4      	lsls	r4, r4, #3
 8000b2e:	431c      	orrs	r4, r3
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	041b      	lsls	r3, r3, #16
 8000b34:	4323      	orrs	r3, r4
 8000b36:	4698      	mov	r8, r3
 8000b38:	4bcf      	ldr	r3, [pc, #828]	; (8000e78 <__aeabi_ddiv+0x37c>)
 8000b3a:	00ed      	lsls	r5, r5, #3
 8000b3c:	469b      	mov	fp, r3
 8000b3e:	2300      	movs	r3, #0
 8000b40:	4699      	mov	r9, r3
 8000b42:	4483      	add	fp, r0
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	033c      	lsls	r4, r7, #12
 8000b48:	007b      	lsls	r3, r7, #1
 8000b4a:	4650      	mov	r0, sl
 8000b4c:	0b24      	lsrs	r4, r4, #12
 8000b4e:	0d5b      	lsrs	r3, r3, #21
 8000b50:	0fff      	lsrs	r7, r7, #31
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d100      	bne.n	8000b58 <__aeabi_ddiv+0x5c>
 8000b56:	e11f      	b.n	8000d98 <__aeabi_ddiv+0x29c>
 8000b58:	4ac6      	ldr	r2, [pc, #792]	; (8000e74 <__aeabi_ddiv+0x378>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_ddiv+0x64>
 8000b5e:	e162      	b.n	8000e26 <__aeabi_ddiv+0x32a>
 8000b60:	49c5      	ldr	r1, [pc, #788]	; (8000e78 <__aeabi_ddiv+0x37c>)
 8000b62:	0f42      	lsrs	r2, r0, #29
 8000b64:	468c      	mov	ip, r1
 8000b66:	00e4      	lsls	r4, r4, #3
 8000b68:	4659      	mov	r1, fp
 8000b6a:	4314      	orrs	r4, r2
 8000b6c:	2280      	movs	r2, #128	; 0x80
 8000b6e:	4463      	add	r3, ip
 8000b70:	0412      	lsls	r2, r2, #16
 8000b72:	1acb      	subs	r3, r1, r3
 8000b74:	4314      	orrs	r4, r2
 8000b76:	469b      	mov	fp, r3
 8000b78:	00c2      	lsls	r2, r0, #3
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	0033      	movs	r3, r6
 8000b7e:	407b      	eors	r3, r7
 8000b80:	469a      	mov	sl, r3
 8000b82:	464b      	mov	r3, r9
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d827      	bhi.n	8000bd8 <__aeabi_ddiv+0xdc>
 8000b88:	49bc      	ldr	r1, [pc, #752]	; (8000e7c <__aeabi_ddiv+0x380>)
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	58cb      	ldr	r3, [r1, r3]
 8000b8e:	469f      	mov	pc, r3
 8000b90:	46b2      	mov	sl, r6
 8000b92:	9b00      	ldr	r3, [sp, #0]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d016      	beq.n	8000bc6 <__aeabi_ddiv+0xca>
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_ddiv+0xa2>
 8000b9c:	e28e      	b.n	80010bc <__aeabi_ddiv+0x5c0>
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d000      	beq.n	8000ba4 <__aeabi_ddiv+0xa8>
 8000ba2:	e0d9      	b.n	8000d58 <__aeabi_ddiv+0x25c>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	2500      	movs	r5, #0
 8000baa:	4652      	mov	r2, sl
 8000bac:	051b      	lsls	r3, r3, #20
 8000bae:	4323      	orrs	r3, r4
 8000bb0:	07d2      	lsls	r2, r2, #31
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	0028      	movs	r0, r5
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	b005      	add	sp, #20
 8000bba:	bcf0      	pop	{r4, r5, r6, r7}
 8000bbc:	46bb      	mov	fp, r7
 8000bbe:	46b2      	mov	sl, r6
 8000bc0:	46a9      	mov	r9, r5
 8000bc2:	46a0      	mov	r8, r4
 8000bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc6:	2400      	movs	r4, #0
 8000bc8:	2500      	movs	r5, #0
 8000bca:	4baa      	ldr	r3, [pc, #680]	; (8000e74 <__aeabi_ddiv+0x378>)
 8000bcc:	e7ed      	b.n	8000baa <__aeabi_ddiv+0xae>
 8000bce:	46ba      	mov	sl, r7
 8000bd0:	46a0      	mov	r8, r4
 8000bd2:	0015      	movs	r5, r2
 8000bd4:	9000      	str	r0, [sp, #0]
 8000bd6:	e7dc      	b.n	8000b92 <__aeabi_ddiv+0x96>
 8000bd8:	4544      	cmp	r4, r8
 8000bda:	d200      	bcs.n	8000bde <__aeabi_ddiv+0xe2>
 8000bdc:	e1c7      	b.n	8000f6e <__aeabi_ddiv+0x472>
 8000bde:	d100      	bne.n	8000be2 <__aeabi_ddiv+0xe6>
 8000be0:	e1c2      	b.n	8000f68 <__aeabi_ddiv+0x46c>
 8000be2:	2301      	movs	r3, #1
 8000be4:	425b      	negs	r3, r3
 8000be6:	469c      	mov	ip, r3
 8000be8:	002e      	movs	r6, r5
 8000bea:	4640      	mov	r0, r8
 8000bec:	2500      	movs	r5, #0
 8000bee:	44e3      	add	fp, ip
 8000bf0:	0223      	lsls	r3, r4, #8
 8000bf2:	0e14      	lsrs	r4, r2, #24
 8000bf4:	431c      	orrs	r4, r3
 8000bf6:	0c1b      	lsrs	r3, r3, #16
 8000bf8:	4699      	mov	r9, r3
 8000bfa:	0423      	lsls	r3, r4, #16
 8000bfc:	0c1f      	lsrs	r7, r3, #16
 8000bfe:	0212      	lsls	r2, r2, #8
 8000c00:	4649      	mov	r1, r9
 8000c02:	9200      	str	r2, [sp, #0]
 8000c04:	9701      	str	r7, [sp, #4]
 8000c06:	f7ff fb0f 	bl	8000228 <__aeabi_uidivmod>
 8000c0a:	0002      	movs	r2, r0
 8000c0c:	437a      	muls	r2, r7
 8000c0e:	040b      	lsls	r3, r1, #16
 8000c10:	0c31      	lsrs	r1, r6, #16
 8000c12:	4680      	mov	r8, r0
 8000c14:	4319      	orrs	r1, r3
 8000c16:	428a      	cmp	r2, r1
 8000c18:	d907      	bls.n	8000c2a <__aeabi_ddiv+0x12e>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	425b      	negs	r3, r3
 8000c1e:	469c      	mov	ip, r3
 8000c20:	1909      	adds	r1, r1, r4
 8000c22:	44e0      	add	r8, ip
 8000c24:	428c      	cmp	r4, r1
 8000c26:	d800      	bhi.n	8000c2a <__aeabi_ddiv+0x12e>
 8000c28:	e207      	b.n	800103a <__aeabi_ddiv+0x53e>
 8000c2a:	1a88      	subs	r0, r1, r2
 8000c2c:	4649      	mov	r1, r9
 8000c2e:	f7ff fafb 	bl	8000228 <__aeabi_uidivmod>
 8000c32:	0409      	lsls	r1, r1, #16
 8000c34:	468c      	mov	ip, r1
 8000c36:	0431      	lsls	r1, r6, #16
 8000c38:	4666      	mov	r6, ip
 8000c3a:	9a01      	ldr	r2, [sp, #4]
 8000c3c:	0c09      	lsrs	r1, r1, #16
 8000c3e:	4342      	muls	r2, r0
 8000c40:	0003      	movs	r3, r0
 8000c42:	4331      	orrs	r1, r6
 8000c44:	428a      	cmp	r2, r1
 8000c46:	d904      	bls.n	8000c52 <__aeabi_ddiv+0x156>
 8000c48:	1909      	adds	r1, r1, r4
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	428c      	cmp	r4, r1
 8000c4e:	d800      	bhi.n	8000c52 <__aeabi_ddiv+0x156>
 8000c50:	e1ed      	b.n	800102e <__aeabi_ddiv+0x532>
 8000c52:	1a88      	subs	r0, r1, r2
 8000c54:	4642      	mov	r2, r8
 8000c56:	0412      	lsls	r2, r2, #16
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	4690      	mov	r8, r2
 8000c5c:	4641      	mov	r1, r8
 8000c5e:	9b00      	ldr	r3, [sp, #0]
 8000c60:	040e      	lsls	r6, r1, #16
 8000c62:	0c1b      	lsrs	r3, r3, #16
 8000c64:	001f      	movs	r7, r3
 8000c66:	9302      	str	r3, [sp, #8]
 8000c68:	9b00      	ldr	r3, [sp, #0]
 8000c6a:	0c36      	lsrs	r6, r6, #16
 8000c6c:	041b      	lsls	r3, r3, #16
 8000c6e:	0c19      	lsrs	r1, r3, #16
 8000c70:	000b      	movs	r3, r1
 8000c72:	4373      	muls	r3, r6
 8000c74:	0c12      	lsrs	r2, r2, #16
 8000c76:	437e      	muls	r6, r7
 8000c78:	9103      	str	r1, [sp, #12]
 8000c7a:	4351      	muls	r1, r2
 8000c7c:	437a      	muls	r2, r7
 8000c7e:	0c1f      	lsrs	r7, r3, #16
 8000c80:	46bc      	mov	ip, r7
 8000c82:	1876      	adds	r6, r6, r1
 8000c84:	4466      	add	r6, ip
 8000c86:	42b1      	cmp	r1, r6
 8000c88:	d903      	bls.n	8000c92 <__aeabi_ddiv+0x196>
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	0249      	lsls	r1, r1, #9
 8000c8e:	468c      	mov	ip, r1
 8000c90:	4462      	add	r2, ip
 8000c92:	0c31      	lsrs	r1, r6, #16
 8000c94:	188a      	adds	r2, r1, r2
 8000c96:	0431      	lsls	r1, r6, #16
 8000c98:	041e      	lsls	r6, r3, #16
 8000c9a:	0c36      	lsrs	r6, r6, #16
 8000c9c:	198e      	adds	r6, r1, r6
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	d302      	bcc.n	8000ca8 <__aeabi_ddiv+0x1ac>
 8000ca2:	d112      	bne.n	8000cca <__aeabi_ddiv+0x1ce>
 8000ca4:	42b5      	cmp	r5, r6
 8000ca6:	d210      	bcs.n	8000cca <__aeabi_ddiv+0x1ce>
 8000ca8:	4643      	mov	r3, r8
 8000caa:	1e59      	subs	r1, r3, #1
 8000cac:	9b00      	ldr	r3, [sp, #0]
 8000cae:	469c      	mov	ip, r3
 8000cb0:	4465      	add	r5, ip
 8000cb2:	001f      	movs	r7, r3
 8000cb4:	429d      	cmp	r5, r3
 8000cb6:	419b      	sbcs	r3, r3
 8000cb8:	425b      	negs	r3, r3
 8000cba:	191b      	adds	r3, r3, r4
 8000cbc:	18c0      	adds	r0, r0, r3
 8000cbe:	4284      	cmp	r4, r0
 8000cc0:	d200      	bcs.n	8000cc4 <__aeabi_ddiv+0x1c8>
 8000cc2:	e1a0      	b.n	8001006 <__aeabi_ddiv+0x50a>
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_ddiv+0x1cc>
 8000cc6:	e19b      	b.n	8001000 <__aeabi_ddiv+0x504>
 8000cc8:	4688      	mov	r8, r1
 8000cca:	1bae      	subs	r6, r5, r6
 8000ccc:	42b5      	cmp	r5, r6
 8000cce:	41ad      	sbcs	r5, r5
 8000cd0:	1a80      	subs	r0, r0, r2
 8000cd2:	426d      	negs	r5, r5
 8000cd4:	1b40      	subs	r0, r0, r5
 8000cd6:	4284      	cmp	r4, r0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_ddiv+0x1e0>
 8000cda:	e1d5      	b.n	8001088 <__aeabi_ddiv+0x58c>
 8000cdc:	4649      	mov	r1, r9
 8000cde:	f7ff faa3 	bl	8000228 <__aeabi_uidivmod>
 8000ce2:	9a01      	ldr	r2, [sp, #4]
 8000ce4:	040b      	lsls	r3, r1, #16
 8000ce6:	4342      	muls	r2, r0
 8000ce8:	0c31      	lsrs	r1, r6, #16
 8000cea:	0005      	movs	r5, r0
 8000cec:	4319      	orrs	r1, r3
 8000cee:	428a      	cmp	r2, r1
 8000cf0:	d900      	bls.n	8000cf4 <__aeabi_ddiv+0x1f8>
 8000cf2:	e16c      	b.n	8000fce <__aeabi_ddiv+0x4d2>
 8000cf4:	1a88      	subs	r0, r1, r2
 8000cf6:	4649      	mov	r1, r9
 8000cf8:	f7ff fa96 	bl	8000228 <__aeabi_uidivmod>
 8000cfc:	9a01      	ldr	r2, [sp, #4]
 8000cfe:	0436      	lsls	r6, r6, #16
 8000d00:	4342      	muls	r2, r0
 8000d02:	0409      	lsls	r1, r1, #16
 8000d04:	0c36      	lsrs	r6, r6, #16
 8000d06:	0003      	movs	r3, r0
 8000d08:	430e      	orrs	r6, r1
 8000d0a:	42b2      	cmp	r2, r6
 8000d0c:	d900      	bls.n	8000d10 <__aeabi_ddiv+0x214>
 8000d0e:	e153      	b.n	8000fb8 <__aeabi_ddiv+0x4bc>
 8000d10:	9803      	ldr	r0, [sp, #12]
 8000d12:	1ab6      	subs	r6, r6, r2
 8000d14:	0002      	movs	r2, r0
 8000d16:	042d      	lsls	r5, r5, #16
 8000d18:	431d      	orrs	r5, r3
 8000d1a:	9f02      	ldr	r7, [sp, #8]
 8000d1c:	042b      	lsls	r3, r5, #16
 8000d1e:	0c1b      	lsrs	r3, r3, #16
 8000d20:	435a      	muls	r2, r3
 8000d22:	437b      	muls	r3, r7
 8000d24:	469c      	mov	ip, r3
 8000d26:	0c29      	lsrs	r1, r5, #16
 8000d28:	4348      	muls	r0, r1
 8000d2a:	0c13      	lsrs	r3, r2, #16
 8000d2c:	4484      	add	ip, r0
 8000d2e:	4463      	add	r3, ip
 8000d30:	4379      	muls	r1, r7
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d903      	bls.n	8000d3e <__aeabi_ddiv+0x242>
 8000d36:	2080      	movs	r0, #128	; 0x80
 8000d38:	0240      	lsls	r0, r0, #9
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	4461      	add	r1, ip
 8000d3e:	0c18      	lsrs	r0, r3, #16
 8000d40:	0412      	lsls	r2, r2, #16
 8000d42:	041b      	lsls	r3, r3, #16
 8000d44:	0c12      	lsrs	r2, r2, #16
 8000d46:	1841      	adds	r1, r0, r1
 8000d48:	189b      	adds	r3, r3, r2
 8000d4a:	428e      	cmp	r6, r1
 8000d4c:	d200      	bcs.n	8000d50 <__aeabi_ddiv+0x254>
 8000d4e:	e0ff      	b.n	8000f50 <__aeabi_ddiv+0x454>
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x258>
 8000d52:	e0fa      	b.n	8000f4a <__aeabi_ddiv+0x44e>
 8000d54:	2301      	movs	r3, #1
 8000d56:	431d      	orrs	r5, r3
 8000d58:	4a49      	ldr	r2, [pc, #292]	; (8000e80 <__aeabi_ddiv+0x384>)
 8000d5a:	445a      	add	r2, fp
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	dc00      	bgt.n	8000d62 <__aeabi_ddiv+0x266>
 8000d60:	e0aa      	b.n	8000eb8 <__aeabi_ddiv+0x3bc>
 8000d62:	076b      	lsls	r3, r5, #29
 8000d64:	d000      	beq.n	8000d68 <__aeabi_ddiv+0x26c>
 8000d66:	e13d      	b.n	8000fe4 <__aeabi_ddiv+0x4e8>
 8000d68:	08ed      	lsrs	r5, r5, #3
 8000d6a:	4643      	mov	r3, r8
 8000d6c:	01db      	lsls	r3, r3, #7
 8000d6e:	d506      	bpl.n	8000d7e <__aeabi_ddiv+0x282>
 8000d70:	4642      	mov	r2, r8
 8000d72:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <__aeabi_ddiv+0x388>)
 8000d74:	401a      	ands	r2, r3
 8000d76:	4690      	mov	r8, r2
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	00d2      	lsls	r2, r2, #3
 8000d7c:	445a      	add	r2, fp
 8000d7e:	4b42      	ldr	r3, [pc, #264]	; (8000e88 <__aeabi_ddiv+0x38c>)
 8000d80:	429a      	cmp	r2, r3
 8000d82:	dd00      	ble.n	8000d86 <__aeabi_ddiv+0x28a>
 8000d84:	e71f      	b.n	8000bc6 <__aeabi_ddiv+0xca>
 8000d86:	4643      	mov	r3, r8
 8000d88:	075b      	lsls	r3, r3, #29
 8000d8a:	431d      	orrs	r5, r3
 8000d8c:	4643      	mov	r3, r8
 8000d8e:	0552      	lsls	r2, r2, #21
 8000d90:	025c      	lsls	r4, r3, #9
 8000d92:	0b24      	lsrs	r4, r4, #12
 8000d94:	0d53      	lsrs	r3, r2, #21
 8000d96:	e708      	b.n	8000baa <__aeabi_ddiv+0xae>
 8000d98:	4652      	mov	r2, sl
 8000d9a:	4322      	orrs	r2, r4
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_ddiv+0x2a4>
 8000d9e:	e07b      	b.n	8000e98 <__aeabi_ddiv+0x39c>
 8000da0:	2c00      	cmp	r4, #0
 8000da2:	d100      	bne.n	8000da6 <__aeabi_ddiv+0x2aa>
 8000da4:	e0fa      	b.n	8000f9c <__aeabi_ddiv+0x4a0>
 8000da6:	0020      	movs	r0, r4
 8000da8:	f001 f952 	bl	8002050 <__clzsi2>
 8000dac:	0002      	movs	r2, r0
 8000dae:	3a0b      	subs	r2, #11
 8000db0:	231d      	movs	r3, #29
 8000db2:	0001      	movs	r1, r0
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	4652      	mov	r2, sl
 8000db8:	3908      	subs	r1, #8
 8000dba:	40da      	lsrs	r2, r3
 8000dbc:	408c      	lsls	r4, r1
 8000dbe:	4314      	orrs	r4, r2
 8000dc0:	4652      	mov	r2, sl
 8000dc2:	408a      	lsls	r2, r1
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <__aeabi_ddiv+0x390>)
 8000dc6:	4458      	add	r0, fp
 8000dc8:	469b      	mov	fp, r3
 8000dca:	4483      	add	fp, r0
 8000dcc:	2000      	movs	r0, #0
 8000dce:	e6d5      	b.n	8000b7c <__aeabi_ddiv+0x80>
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	4323      	orrs	r3, r4
 8000dd4:	4698      	mov	r8, r3
 8000dd6:	d044      	beq.n	8000e62 <__aeabi_ddiv+0x366>
 8000dd8:	2c00      	cmp	r4, #0
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0x2e2>
 8000ddc:	e0ce      	b.n	8000f7c <__aeabi_ddiv+0x480>
 8000dde:	0020      	movs	r0, r4
 8000de0:	f001 f936 	bl	8002050 <__clzsi2>
 8000de4:	0001      	movs	r1, r0
 8000de6:	0002      	movs	r2, r0
 8000de8:	390b      	subs	r1, #11
 8000dea:	231d      	movs	r3, #29
 8000dec:	1a5b      	subs	r3, r3, r1
 8000dee:	4649      	mov	r1, r9
 8000df0:	0010      	movs	r0, r2
 8000df2:	40d9      	lsrs	r1, r3
 8000df4:	3808      	subs	r0, #8
 8000df6:	4084      	lsls	r4, r0
 8000df8:	000b      	movs	r3, r1
 8000dfa:	464d      	mov	r5, r9
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	4698      	mov	r8, r3
 8000e00:	4085      	lsls	r5, r0
 8000e02:	4823      	ldr	r0, [pc, #140]	; (8000e90 <__aeabi_ddiv+0x394>)
 8000e04:	1a83      	subs	r3, r0, r2
 8000e06:	469b      	mov	fp, r3
 8000e08:	2300      	movs	r3, #0
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	e69a      	b.n	8000b46 <__aeabi_ddiv+0x4a>
 8000e10:	464b      	mov	r3, r9
 8000e12:	4323      	orrs	r3, r4
 8000e14:	4698      	mov	r8, r3
 8000e16:	d11d      	bne.n	8000e54 <__aeabi_ddiv+0x358>
 8000e18:	2308      	movs	r3, #8
 8000e1a:	4699      	mov	r9, r3
 8000e1c:	3b06      	subs	r3, #6
 8000e1e:	2500      	movs	r5, #0
 8000e20:	4683      	mov	fp, r0
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	e68f      	b.n	8000b46 <__aeabi_ddiv+0x4a>
 8000e26:	4652      	mov	r2, sl
 8000e28:	4322      	orrs	r2, r4
 8000e2a:	d109      	bne.n	8000e40 <__aeabi_ddiv+0x344>
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	4649      	mov	r1, r9
 8000e30:	4319      	orrs	r1, r3
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <__aeabi_ddiv+0x398>)
 8000e34:	4689      	mov	r9, r1
 8000e36:	469c      	mov	ip, r3
 8000e38:	2400      	movs	r4, #0
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	44e3      	add	fp, ip
 8000e3e:	e69d      	b.n	8000b7c <__aeabi_ddiv+0x80>
 8000e40:	2303      	movs	r3, #3
 8000e42:	464a      	mov	r2, r9
 8000e44:	431a      	orrs	r2, r3
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <__aeabi_ddiv+0x398>)
 8000e48:	4691      	mov	r9, r2
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	4652      	mov	r2, sl
 8000e4e:	2003      	movs	r0, #3
 8000e50:	44e3      	add	fp, ip
 8000e52:	e693      	b.n	8000b7c <__aeabi_ddiv+0x80>
 8000e54:	230c      	movs	r3, #12
 8000e56:	4699      	mov	r9, r3
 8000e58:	3b09      	subs	r3, #9
 8000e5a:	46a0      	mov	r8, r4
 8000e5c:	4683      	mov	fp, r0
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	e671      	b.n	8000b46 <__aeabi_ddiv+0x4a>
 8000e62:	2304      	movs	r3, #4
 8000e64:	4699      	mov	r9, r3
 8000e66:	2300      	movs	r3, #0
 8000e68:	469b      	mov	fp, r3
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	2500      	movs	r5, #0
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	e669      	b.n	8000b46 <__aeabi_ddiv+0x4a>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	000007ff 	.word	0x000007ff
 8000e78:	fffffc01 	.word	0xfffffc01
 8000e7c:	080076f0 	.word	0x080076f0
 8000e80:	000003ff 	.word	0x000003ff
 8000e84:	feffffff 	.word	0xfeffffff
 8000e88:	000007fe 	.word	0x000007fe
 8000e8c:	000003f3 	.word	0x000003f3
 8000e90:	fffffc0d 	.word	0xfffffc0d
 8000e94:	fffff801 	.word	0xfffff801
 8000e98:	4649      	mov	r1, r9
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	4319      	orrs	r1, r3
 8000e9e:	4689      	mov	r9, r1
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	e66a      	b.n	8000b7c <__aeabi_ddiv+0x80>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	2480      	movs	r4, #128	; 0x80
 8000eaa:	469a      	mov	sl, r3
 8000eac:	2500      	movs	r5, #0
 8000eae:	4b8a      	ldr	r3, [pc, #552]	; (80010d8 <__aeabi_ddiv+0x5dc>)
 8000eb0:	0324      	lsls	r4, r4, #12
 8000eb2:	e67a      	b.n	8000baa <__aeabi_ddiv+0xae>
 8000eb4:	2501      	movs	r5, #1
 8000eb6:	426d      	negs	r5, r5
 8000eb8:	2301      	movs	r3, #1
 8000eba:	1a9b      	subs	r3, r3, r2
 8000ebc:	2b38      	cmp	r3, #56	; 0x38
 8000ebe:	dd00      	ble.n	8000ec2 <__aeabi_ddiv+0x3c6>
 8000ec0:	e670      	b.n	8000ba4 <__aeabi_ddiv+0xa8>
 8000ec2:	2b1f      	cmp	r3, #31
 8000ec4:	dc00      	bgt.n	8000ec8 <__aeabi_ddiv+0x3cc>
 8000ec6:	e0bf      	b.n	8001048 <__aeabi_ddiv+0x54c>
 8000ec8:	211f      	movs	r1, #31
 8000eca:	4249      	negs	r1, r1
 8000ecc:	1a8a      	subs	r2, r1, r2
 8000ece:	4641      	mov	r1, r8
 8000ed0:	40d1      	lsrs	r1, r2
 8000ed2:	000a      	movs	r2, r1
 8000ed4:	2b20      	cmp	r3, #32
 8000ed6:	d004      	beq.n	8000ee2 <__aeabi_ddiv+0x3e6>
 8000ed8:	4641      	mov	r1, r8
 8000eda:	4b80      	ldr	r3, [pc, #512]	; (80010dc <__aeabi_ddiv+0x5e0>)
 8000edc:	445b      	add	r3, fp
 8000ede:	4099      	lsls	r1, r3
 8000ee0:	430d      	orrs	r5, r1
 8000ee2:	1e6b      	subs	r3, r5, #1
 8000ee4:	419d      	sbcs	r5, r3
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	432a      	orrs	r2, r5
 8000eea:	001d      	movs	r5, r3
 8000eec:	2400      	movs	r4, #0
 8000eee:	4015      	ands	r5, r2
 8000ef0:	4213      	tst	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_ddiv+0x3fa>
 8000ef4:	e0d4      	b.n	80010a0 <__aeabi_ddiv+0x5a4>
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4011      	ands	r1, r2
 8000efc:	2904      	cmp	r1, #4
 8000efe:	d100      	bne.n	8000f02 <__aeabi_ddiv+0x406>
 8000f00:	e0cb      	b.n	800109a <__aeabi_ddiv+0x59e>
 8000f02:	1d11      	adds	r1, r2, #4
 8000f04:	4291      	cmp	r1, r2
 8000f06:	4192      	sbcs	r2, r2
 8000f08:	4252      	negs	r2, r2
 8000f0a:	189b      	adds	r3, r3, r2
 8000f0c:	000a      	movs	r2, r1
 8000f0e:	0219      	lsls	r1, r3, #8
 8000f10:	d400      	bmi.n	8000f14 <__aeabi_ddiv+0x418>
 8000f12:	e0c2      	b.n	800109a <__aeabi_ddiv+0x59e>
 8000f14:	2301      	movs	r3, #1
 8000f16:	2400      	movs	r4, #0
 8000f18:	2500      	movs	r5, #0
 8000f1a:	e646      	b.n	8000baa <__aeabi_ddiv+0xae>
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	4641      	mov	r1, r8
 8000f20:	031b      	lsls	r3, r3, #12
 8000f22:	4219      	tst	r1, r3
 8000f24:	d008      	beq.n	8000f38 <__aeabi_ddiv+0x43c>
 8000f26:	421c      	tst	r4, r3
 8000f28:	d106      	bne.n	8000f38 <__aeabi_ddiv+0x43c>
 8000f2a:	431c      	orrs	r4, r3
 8000f2c:	0324      	lsls	r4, r4, #12
 8000f2e:	46ba      	mov	sl, r7
 8000f30:	0015      	movs	r5, r2
 8000f32:	4b69      	ldr	r3, [pc, #420]	; (80010d8 <__aeabi_ddiv+0x5dc>)
 8000f34:	0b24      	lsrs	r4, r4, #12
 8000f36:	e638      	b.n	8000baa <__aeabi_ddiv+0xae>
 8000f38:	2480      	movs	r4, #128	; 0x80
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	0324      	lsls	r4, r4, #12
 8000f3e:	431c      	orrs	r4, r3
 8000f40:	0324      	lsls	r4, r4, #12
 8000f42:	46b2      	mov	sl, r6
 8000f44:	4b64      	ldr	r3, [pc, #400]	; (80010d8 <__aeabi_ddiv+0x5dc>)
 8000f46:	0b24      	lsrs	r4, r4, #12
 8000f48:	e62f      	b.n	8000baa <__aeabi_ddiv+0xae>
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_ddiv+0x454>
 8000f4e:	e703      	b.n	8000d58 <__aeabi_ddiv+0x25c>
 8000f50:	19a6      	adds	r6, r4, r6
 8000f52:	1e68      	subs	r0, r5, #1
 8000f54:	42a6      	cmp	r6, r4
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0x45e>
 8000f58:	e08d      	b.n	8001076 <__aeabi_ddiv+0x57a>
 8000f5a:	428e      	cmp	r6, r1
 8000f5c:	d200      	bcs.n	8000f60 <__aeabi_ddiv+0x464>
 8000f5e:	e0a3      	b.n	80010a8 <__aeabi_ddiv+0x5ac>
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x468>
 8000f62:	e0b3      	b.n	80010cc <__aeabi_ddiv+0x5d0>
 8000f64:	0005      	movs	r5, r0
 8000f66:	e6f5      	b.n	8000d54 <__aeabi_ddiv+0x258>
 8000f68:	42aa      	cmp	r2, r5
 8000f6a:	d900      	bls.n	8000f6e <__aeabi_ddiv+0x472>
 8000f6c:	e639      	b.n	8000be2 <__aeabi_ddiv+0xe6>
 8000f6e:	4643      	mov	r3, r8
 8000f70:	07de      	lsls	r6, r3, #31
 8000f72:	0858      	lsrs	r0, r3, #1
 8000f74:	086b      	lsrs	r3, r5, #1
 8000f76:	431e      	orrs	r6, r3
 8000f78:	07ed      	lsls	r5, r5, #31
 8000f7a:	e639      	b.n	8000bf0 <__aeabi_ddiv+0xf4>
 8000f7c:	4648      	mov	r0, r9
 8000f7e:	f001 f867 	bl	8002050 <__clzsi2>
 8000f82:	0001      	movs	r1, r0
 8000f84:	0002      	movs	r2, r0
 8000f86:	3115      	adds	r1, #21
 8000f88:	3220      	adds	r2, #32
 8000f8a:	291c      	cmp	r1, #28
 8000f8c:	dc00      	bgt.n	8000f90 <__aeabi_ddiv+0x494>
 8000f8e:	e72c      	b.n	8000dea <__aeabi_ddiv+0x2ee>
 8000f90:	464b      	mov	r3, r9
 8000f92:	3808      	subs	r0, #8
 8000f94:	4083      	lsls	r3, r0
 8000f96:	2500      	movs	r5, #0
 8000f98:	4698      	mov	r8, r3
 8000f9a:	e732      	b.n	8000e02 <__aeabi_ddiv+0x306>
 8000f9c:	f001 f858 	bl	8002050 <__clzsi2>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	001a      	movs	r2, r3
 8000fa4:	3215      	adds	r2, #21
 8000fa6:	3020      	adds	r0, #32
 8000fa8:	2a1c      	cmp	r2, #28
 8000faa:	dc00      	bgt.n	8000fae <__aeabi_ddiv+0x4b2>
 8000fac:	e700      	b.n	8000db0 <__aeabi_ddiv+0x2b4>
 8000fae:	4654      	mov	r4, sl
 8000fb0:	3b08      	subs	r3, #8
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	409c      	lsls	r4, r3
 8000fb6:	e705      	b.n	8000dc4 <__aeabi_ddiv+0x2c8>
 8000fb8:	1936      	adds	r6, r6, r4
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	42b4      	cmp	r4, r6
 8000fbe:	d900      	bls.n	8000fc2 <__aeabi_ddiv+0x4c6>
 8000fc0:	e6a6      	b.n	8000d10 <__aeabi_ddiv+0x214>
 8000fc2:	42b2      	cmp	r2, r6
 8000fc4:	d800      	bhi.n	8000fc8 <__aeabi_ddiv+0x4cc>
 8000fc6:	e6a3      	b.n	8000d10 <__aeabi_ddiv+0x214>
 8000fc8:	1e83      	subs	r3, r0, #2
 8000fca:	1936      	adds	r6, r6, r4
 8000fcc:	e6a0      	b.n	8000d10 <__aeabi_ddiv+0x214>
 8000fce:	1909      	adds	r1, r1, r4
 8000fd0:	3d01      	subs	r5, #1
 8000fd2:	428c      	cmp	r4, r1
 8000fd4:	d900      	bls.n	8000fd8 <__aeabi_ddiv+0x4dc>
 8000fd6:	e68d      	b.n	8000cf4 <__aeabi_ddiv+0x1f8>
 8000fd8:	428a      	cmp	r2, r1
 8000fda:	d800      	bhi.n	8000fde <__aeabi_ddiv+0x4e2>
 8000fdc:	e68a      	b.n	8000cf4 <__aeabi_ddiv+0x1f8>
 8000fde:	1e85      	subs	r5, r0, #2
 8000fe0:	1909      	adds	r1, r1, r4
 8000fe2:	e687      	b.n	8000cf4 <__aeabi_ddiv+0x1f8>
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	402b      	ands	r3, r5
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d100      	bne.n	8000fee <__aeabi_ddiv+0x4f2>
 8000fec:	e6bc      	b.n	8000d68 <__aeabi_ddiv+0x26c>
 8000fee:	2305      	movs	r3, #5
 8000ff0:	425b      	negs	r3, r3
 8000ff2:	42ab      	cmp	r3, r5
 8000ff4:	419b      	sbcs	r3, r3
 8000ff6:	3504      	adds	r5, #4
 8000ff8:	425b      	negs	r3, r3
 8000ffa:	08ed      	lsrs	r5, r5, #3
 8000ffc:	4498      	add	r8, r3
 8000ffe:	e6b4      	b.n	8000d6a <__aeabi_ddiv+0x26e>
 8001000:	42af      	cmp	r7, r5
 8001002:	d900      	bls.n	8001006 <__aeabi_ddiv+0x50a>
 8001004:	e660      	b.n	8000cc8 <__aeabi_ddiv+0x1cc>
 8001006:	4282      	cmp	r2, r0
 8001008:	d804      	bhi.n	8001014 <__aeabi_ddiv+0x518>
 800100a:	d000      	beq.n	800100e <__aeabi_ddiv+0x512>
 800100c:	e65c      	b.n	8000cc8 <__aeabi_ddiv+0x1cc>
 800100e:	42ae      	cmp	r6, r5
 8001010:	d800      	bhi.n	8001014 <__aeabi_ddiv+0x518>
 8001012:	e659      	b.n	8000cc8 <__aeabi_ddiv+0x1cc>
 8001014:	2302      	movs	r3, #2
 8001016:	425b      	negs	r3, r3
 8001018:	469c      	mov	ip, r3
 800101a:	9b00      	ldr	r3, [sp, #0]
 800101c:	44e0      	add	r8, ip
 800101e:	469c      	mov	ip, r3
 8001020:	4465      	add	r5, ip
 8001022:	429d      	cmp	r5, r3
 8001024:	419b      	sbcs	r3, r3
 8001026:	425b      	negs	r3, r3
 8001028:	191b      	adds	r3, r3, r4
 800102a:	18c0      	adds	r0, r0, r3
 800102c:	e64d      	b.n	8000cca <__aeabi_ddiv+0x1ce>
 800102e:	428a      	cmp	r2, r1
 8001030:	d800      	bhi.n	8001034 <__aeabi_ddiv+0x538>
 8001032:	e60e      	b.n	8000c52 <__aeabi_ddiv+0x156>
 8001034:	1e83      	subs	r3, r0, #2
 8001036:	1909      	adds	r1, r1, r4
 8001038:	e60b      	b.n	8000c52 <__aeabi_ddiv+0x156>
 800103a:	428a      	cmp	r2, r1
 800103c:	d800      	bhi.n	8001040 <__aeabi_ddiv+0x544>
 800103e:	e5f4      	b.n	8000c2a <__aeabi_ddiv+0x12e>
 8001040:	1e83      	subs	r3, r0, #2
 8001042:	4698      	mov	r8, r3
 8001044:	1909      	adds	r1, r1, r4
 8001046:	e5f0      	b.n	8000c2a <__aeabi_ddiv+0x12e>
 8001048:	4925      	ldr	r1, [pc, #148]	; (80010e0 <__aeabi_ddiv+0x5e4>)
 800104a:	0028      	movs	r0, r5
 800104c:	4459      	add	r1, fp
 800104e:	408d      	lsls	r5, r1
 8001050:	4642      	mov	r2, r8
 8001052:	408a      	lsls	r2, r1
 8001054:	1e69      	subs	r1, r5, #1
 8001056:	418d      	sbcs	r5, r1
 8001058:	4641      	mov	r1, r8
 800105a:	40d8      	lsrs	r0, r3
 800105c:	40d9      	lsrs	r1, r3
 800105e:	4302      	orrs	r2, r0
 8001060:	432a      	orrs	r2, r5
 8001062:	000b      	movs	r3, r1
 8001064:	0751      	lsls	r1, r2, #29
 8001066:	d100      	bne.n	800106a <__aeabi_ddiv+0x56e>
 8001068:	e751      	b.n	8000f0e <__aeabi_ddiv+0x412>
 800106a:	210f      	movs	r1, #15
 800106c:	4011      	ands	r1, r2
 800106e:	2904      	cmp	r1, #4
 8001070:	d000      	beq.n	8001074 <__aeabi_ddiv+0x578>
 8001072:	e746      	b.n	8000f02 <__aeabi_ddiv+0x406>
 8001074:	e74b      	b.n	8000f0e <__aeabi_ddiv+0x412>
 8001076:	0005      	movs	r5, r0
 8001078:	428e      	cmp	r6, r1
 800107a:	d000      	beq.n	800107e <__aeabi_ddiv+0x582>
 800107c:	e66a      	b.n	8000d54 <__aeabi_ddiv+0x258>
 800107e:	9a00      	ldr	r2, [sp, #0]
 8001080:	4293      	cmp	r3, r2
 8001082:	d000      	beq.n	8001086 <__aeabi_ddiv+0x58a>
 8001084:	e666      	b.n	8000d54 <__aeabi_ddiv+0x258>
 8001086:	e667      	b.n	8000d58 <__aeabi_ddiv+0x25c>
 8001088:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <__aeabi_ddiv+0x5e8>)
 800108a:	445a      	add	r2, fp
 800108c:	2a00      	cmp	r2, #0
 800108e:	dc00      	bgt.n	8001092 <__aeabi_ddiv+0x596>
 8001090:	e710      	b.n	8000eb4 <__aeabi_ddiv+0x3b8>
 8001092:	2301      	movs	r3, #1
 8001094:	2500      	movs	r5, #0
 8001096:	4498      	add	r8, r3
 8001098:	e667      	b.n	8000d6a <__aeabi_ddiv+0x26e>
 800109a:	075d      	lsls	r5, r3, #29
 800109c:	025b      	lsls	r3, r3, #9
 800109e:	0b1c      	lsrs	r4, r3, #12
 80010a0:	08d2      	lsrs	r2, r2, #3
 80010a2:	2300      	movs	r3, #0
 80010a4:	4315      	orrs	r5, r2
 80010a6:	e580      	b.n	8000baa <__aeabi_ddiv+0xae>
 80010a8:	9800      	ldr	r0, [sp, #0]
 80010aa:	3d02      	subs	r5, #2
 80010ac:	0042      	lsls	r2, r0, #1
 80010ae:	4282      	cmp	r2, r0
 80010b0:	41bf      	sbcs	r7, r7
 80010b2:	427f      	negs	r7, r7
 80010b4:	193c      	adds	r4, r7, r4
 80010b6:	1936      	adds	r6, r6, r4
 80010b8:	9200      	str	r2, [sp, #0]
 80010ba:	e7dd      	b.n	8001078 <__aeabi_ddiv+0x57c>
 80010bc:	2480      	movs	r4, #128	; 0x80
 80010be:	4643      	mov	r3, r8
 80010c0:	0324      	lsls	r4, r4, #12
 80010c2:	431c      	orrs	r4, r3
 80010c4:	0324      	lsls	r4, r4, #12
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__aeabi_ddiv+0x5dc>)
 80010c8:	0b24      	lsrs	r4, r4, #12
 80010ca:	e56e      	b.n	8000baa <__aeabi_ddiv+0xae>
 80010cc:	9a00      	ldr	r2, [sp, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d3ea      	bcc.n	80010a8 <__aeabi_ddiv+0x5ac>
 80010d2:	0005      	movs	r5, r0
 80010d4:	e7d3      	b.n	800107e <__aeabi_ddiv+0x582>
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	000007ff 	.word	0x000007ff
 80010dc:	0000043e 	.word	0x0000043e
 80010e0:	0000041e 	.word	0x0000041e
 80010e4:	000003ff 	.word	0x000003ff

080010e8 <__eqdf2>:
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	464e      	mov	r6, r9
 80010ec:	4645      	mov	r5, r8
 80010ee:	46de      	mov	lr, fp
 80010f0:	4657      	mov	r7, sl
 80010f2:	4690      	mov	r8, r2
 80010f4:	b5e0      	push	{r5, r6, r7, lr}
 80010f6:	0017      	movs	r7, r2
 80010f8:	031a      	lsls	r2, r3, #12
 80010fa:	0b12      	lsrs	r2, r2, #12
 80010fc:	0005      	movs	r5, r0
 80010fe:	4684      	mov	ip, r0
 8001100:	4819      	ldr	r0, [pc, #100]	; (8001168 <__eqdf2+0x80>)
 8001102:	030e      	lsls	r6, r1, #12
 8001104:	004c      	lsls	r4, r1, #1
 8001106:	4691      	mov	r9, r2
 8001108:	005a      	lsls	r2, r3, #1
 800110a:	0fdb      	lsrs	r3, r3, #31
 800110c:	469b      	mov	fp, r3
 800110e:	0b36      	lsrs	r6, r6, #12
 8001110:	0d64      	lsrs	r4, r4, #21
 8001112:	0fc9      	lsrs	r1, r1, #31
 8001114:	0d52      	lsrs	r2, r2, #21
 8001116:	4284      	cmp	r4, r0
 8001118:	d019      	beq.n	800114e <__eqdf2+0x66>
 800111a:	4282      	cmp	r2, r0
 800111c:	d010      	beq.n	8001140 <__eqdf2+0x58>
 800111e:	2001      	movs	r0, #1
 8001120:	4294      	cmp	r4, r2
 8001122:	d10e      	bne.n	8001142 <__eqdf2+0x5a>
 8001124:	454e      	cmp	r6, r9
 8001126:	d10c      	bne.n	8001142 <__eqdf2+0x5a>
 8001128:	2001      	movs	r0, #1
 800112a:	45c4      	cmp	ip, r8
 800112c:	d109      	bne.n	8001142 <__eqdf2+0x5a>
 800112e:	4559      	cmp	r1, fp
 8001130:	d017      	beq.n	8001162 <__eqdf2+0x7a>
 8001132:	2c00      	cmp	r4, #0
 8001134:	d105      	bne.n	8001142 <__eqdf2+0x5a>
 8001136:	0030      	movs	r0, r6
 8001138:	4328      	orrs	r0, r5
 800113a:	1e43      	subs	r3, r0, #1
 800113c:	4198      	sbcs	r0, r3
 800113e:	e000      	b.n	8001142 <__eqdf2+0x5a>
 8001140:	2001      	movs	r0, #1
 8001142:	bcf0      	pop	{r4, r5, r6, r7}
 8001144:	46bb      	mov	fp, r7
 8001146:	46b2      	mov	sl, r6
 8001148:	46a9      	mov	r9, r5
 800114a:	46a0      	mov	r8, r4
 800114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114e:	0033      	movs	r3, r6
 8001150:	2001      	movs	r0, #1
 8001152:	432b      	orrs	r3, r5
 8001154:	d1f5      	bne.n	8001142 <__eqdf2+0x5a>
 8001156:	42a2      	cmp	r2, r4
 8001158:	d1f3      	bne.n	8001142 <__eqdf2+0x5a>
 800115a:	464b      	mov	r3, r9
 800115c:	433b      	orrs	r3, r7
 800115e:	d1f0      	bne.n	8001142 <__eqdf2+0x5a>
 8001160:	e7e2      	b.n	8001128 <__eqdf2+0x40>
 8001162:	2000      	movs	r0, #0
 8001164:	e7ed      	b.n	8001142 <__eqdf2+0x5a>
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	000007ff 	.word	0x000007ff

0800116c <__gedf2>:
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	4647      	mov	r7, r8
 8001170:	46ce      	mov	lr, r9
 8001172:	0004      	movs	r4, r0
 8001174:	0018      	movs	r0, r3
 8001176:	0016      	movs	r6, r2
 8001178:	031b      	lsls	r3, r3, #12
 800117a:	0b1b      	lsrs	r3, r3, #12
 800117c:	4d2d      	ldr	r5, [pc, #180]	; (8001234 <__gedf2+0xc8>)
 800117e:	004a      	lsls	r2, r1, #1
 8001180:	4699      	mov	r9, r3
 8001182:	b580      	push	{r7, lr}
 8001184:	0043      	lsls	r3, r0, #1
 8001186:	030f      	lsls	r7, r1, #12
 8001188:	46a4      	mov	ip, r4
 800118a:	46b0      	mov	r8, r6
 800118c:	0b3f      	lsrs	r7, r7, #12
 800118e:	0d52      	lsrs	r2, r2, #21
 8001190:	0fc9      	lsrs	r1, r1, #31
 8001192:	0d5b      	lsrs	r3, r3, #21
 8001194:	0fc0      	lsrs	r0, r0, #31
 8001196:	42aa      	cmp	r2, r5
 8001198:	d021      	beq.n	80011de <__gedf2+0x72>
 800119a:	42ab      	cmp	r3, r5
 800119c:	d013      	beq.n	80011c6 <__gedf2+0x5a>
 800119e:	2a00      	cmp	r2, #0
 80011a0:	d122      	bne.n	80011e8 <__gedf2+0x7c>
 80011a2:	433c      	orrs	r4, r7
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <__gedf2+0x42>
 80011a8:	464d      	mov	r5, r9
 80011aa:	432e      	orrs	r6, r5
 80011ac:	d022      	beq.n	80011f4 <__gedf2+0x88>
 80011ae:	2c00      	cmp	r4, #0
 80011b0:	d010      	beq.n	80011d4 <__gedf2+0x68>
 80011b2:	4281      	cmp	r1, r0
 80011b4:	d022      	beq.n	80011fc <__gedf2+0x90>
 80011b6:	2002      	movs	r0, #2
 80011b8:	3901      	subs	r1, #1
 80011ba:	4008      	ands	r0, r1
 80011bc:	3801      	subs	r0, #1
 80011be:	bcc0      	pop	{r6, r7}
 80011c0:	46b9      	mov	r9, r7
 80011c2:	46b0      	mov	r8, r6
 80011c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c6:	464d      	mov	r5, r9
 80011c8:	432e      	orrs	r6, r5
 80011ca:	d129      	bne.n	8001220 <__gedf2+0xb4>
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	d1f0      	bne.n	80011b2 <__gedf2+0x46>
 80011d0:	433c      	orrs	r4, r7
 80011d2:	d1ee      	bne.n	80011b2 <__gedf2+0x46>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d1f2      	bne.n	80011be <__gedf2+0x52>
 80011d8:	2001      	movs	r0, #1
 80011da:	4240      	negs	r0, r0
 80011dc:	e7ef      	b.n	80011be <__gedf2+0x52>
 80011de:	003d      	movs	r5, r7
 80011e0:	4325      	orrs	r5, r4
 80011e2:	d11d      	bne.n	8001220 <__gedf2+0xb4>
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d0ee      	beq.n	80011c6 <__gedf2+0x5a>
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e2      	bne.n	80011b2 <__gedf2+0x46>
 80011ec:	464c      	mov	r4, r9
 80011ee:	4326      	orrs	r6, r4
 80011f0:	d1df      	bne.n	80011b2 <__gedf2+0x46>
 80011f2:	e7e0      	b.n	80011b6 <__gedf2+0x4a>
 80011f4:	2000      	movs	r0, #0
 80011f6:	2c00      	cmp	r4, #0
 80011f8:	d0e1      	beq.n	80011be <__gedf2+0x52>
 80011fa:	e7dc      	b.n	80011b6 <__gedf2+0x4a>
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dc0a      	bgt.n	8001216 <__gedf2+0xaa>
 8001200:	dbe8      	blt.n	80011d4 <__gedf2+0x68>
 8001202:	454f      	cmp	r7, r9
 8001204:	d8d7      	bhi.n	80011b6 <__gedf2+0x4a>
 8001206:	d00e      	beq.n	8001226 <__gedf2+0xba>
 8001208:	2000      	movs	r0, #0
 800120a:	454f      	cmp	r7, r9
 800120c:	d2d7      	bcs.n	80011be <__gedf2+0x52>
 800120e:	2900      	cmp	r1, #0
 8001210:	d0e2      	beq.n	80011d8 <__gedf2+0x6c>
 8001212:	0008      	movs	r0, r1
 8001214:	e7d3      	b.n	80011be <__gedf2+0x52>
 8001216:	4243      	negs	r3, r0
 8001218:	4158      	adcs	r0, r3
 800121a:	0040      	lsls	r0, r0, #1
 800121c:	3801      	subs	r0, #1
 800121e:	e7ce      	b.n	80011be <__gedf2+0x52>
 8001220:	2002      	movs	r0, #2
 8001222:	4240      	negs	r0, r0
 8001224:	e7cb      	b.n	80011be <__gedf2+0x52>
 8001226:	45c4      	cmp	ip, r8
 8001228:	d8c5      	bhi.n	80011b6 <__gedf2+0x4a>
 800122a:	2000      	movs	r0, #0
 800122c:	45c4      	cmp	ip, r8
 800122e:	d2c6      	bcs.n	80011be <__gedf2+0x52>
 8001230:	e7ed      	b.n	800120e <__gedf2+0xa2>
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	000007ff 	.word	0x000007ff

08001238 <__ledf2>:
 8001238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123a:	4647      	mov	r7, r8
 800123c:	46ce      	mov	lr, r9
 800123e:	0004      	movs	r4, r0
 8001240:	0018      	movs	r0, r3
 8001242:	0016      	movs	r6, r2
 8001244:	031b      	lsls	r3, r3, #12
 8001246:	0b1b      	lsrs	r3, r3, #12
 8001248:	4d2c      	ldr	r5, [pc, #176]	; (80012fc <__ledf2+0xc4>)
 800124a:	004a      	lsls	r2, r1, #1
 800124c:	4699      	mov	r9, r3
 800124e:	b580      	push	{r7, lr}
 8001250:	0043      	lsls	r3, r0, #1
 8001252:	030f      	lsls	r7, r1, #12
 8001254:	46a4      	mov	ip, r4
 8001256:	46b0      	mov	r8, r6
 8001258:	0b3f      	lsrs	r7, r7, #12
 800125a:	0d52      	lsrs	r2, r2, #21
 800125c:	0fc9      	lsrs	r1, r1, #31
 800125e:	0d5b      	lsrs	r3, r3, #21
 8001260:	0fc0      	lsrs	r0, r0, #31
 8001262:	42aa      	cmp	r2, r5
 8001264:	d00d      	beq.n	8001282 <__ledf2+0x4a>
 8001266:	42ab      	cmp	r3, r5
 8001268:	d010      	beq.n	800128c <__ledf2+0x54>
 800126a:	2a00      	cmp	r2, #0
 800126c:	d127      	bne.n	80012be <__ledf2+0x86>
 800126e:	433c      	orrs	r4, r7
 8001270:	2b00      	cmp	r3, #0
 8001272:	d111      	bne.n	8001298 <__ledf2+0x60>
 8001274:	464d      	mov	r5, r9
 8001276:	432e      	orrs	r6, r5
 8001278:	d10e      	bne.n	8001298 <__ledf2+0x60>
 800127a:	2000      	movs	r0, #0
 800127c:	2c00      	cmp	r4, #0
 800127e:	d015      	beq.n	80012ac <__ledf2+0x74>
 8001280:	e00e      	b.n	80012a0 <__ledf2+0x68>
 8001282:	003d      	movs	r5, r7
 8001284:	4325      	orrs	r5, r4
 8001286:	d110      	bne.n	80012aa <__ledf2+0x72>
 8001288:	4293      	cmp	r3, r2
 800128a:	d118      	bne.n	80012be <__ledf2+0x86>
 800128c:	464d      	mov	r5, r9
 800128e:	432e      	orrs	r6, r5
 8001290:	d10b      	bne.n	80012aa <__ledf2+0x72>
 8001292:	2a00      	cmp	r2, #0
 8001294:	d102      	bne.n	800129c <__ledf2+0x64>
 8001296:	433c      	orrs	r4, r7
 8001298:	2c00      	cmp	r4, #0
 800129a:	d00b      	beq.n	80012b4 <__ledf2+0x7c>
 800129c:	4281      	cmp	r1, r0
 800129e:	d014      	beq.n	80012ca <__ledf2+0x92>
 80012a0:	2002      	movs	r0, #2
 80012a2:	3901      	subs	r1, #1
 80012a4:	4008      	ands	r0, r1
 80012a6:	3801      	subs	r0, #1
 80012a8:	e000      	b.n	80012ac <__ledf2+0x74>
 80012aa:	2002      	movs	r0, #2
 80012ac:	bcc0      	pop	{r6, r7}
 80012ae:	46b9      	mov	r9, r7
 80012b0:	46b0      	mov	r8, r6
 80012b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d1f9      	bne.n	80012ac <__ledf2+0x74>
 80012b8:	2001      	movs	r0, #1
 80012ba:	4240      	negs	r0, r0
 80012bc:	e7f6      	b.n	80012ac <__ledf2+0x74>
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1ec      	bne.n	800129c <__ledf2+0x64>
 80012c2:	464c      	mov	r4, r9
 80012c4:	4326      	orrs	r6, r4
 80012c6:	d1e9      	bne.n	800129c <__ledf2+0x64>
 80012c8:	e7ea      	b.n	80012a0 <__ledf2+0x68>
 80012ca:	429a      	cmp	r2, r3
 80012cc:	dd04      	ble.n	80012d8 <__ledf2+0xa0>
 80012ce:	4243      	negs	r3, r0
 80012d0:	4158      	adcs	r0, r3
 80012d2:	0040      	lsls	r0, r0, #1
 80012d4:	3801      	subs	r0, #1
 80012d6:	e7e9      	b.n	80012ac <__ledf2+0x74>
 80012d8:	429a      	cmp	r2, r3
 80012da:	dbeb      	blt.n	80012b4 <__ledf2+0x7c>
 80012dc:	454f      	cmp	r7, r9
 80012de:	d8df      	bhi.n	80012a0 <__ledf2+0x68>
 80012e0:	d006      	beq.n	80012f0 <__ledf2+0xb8>
 80012e2:	2000      	movs	r0, #0
 80012e4:	454f      	cmp	r7, r9
 80012e6:	d2e1      	bcs.n	80012ac <__ledf2+0x74>
 80012e8:	2900      	cmp	r1, #0
 80012ea:	d0e5      	beq.n	80012b8 <__ledf2+0x80>
 80012ec:	0008      	movs	r0, r1
 80012ee:	e7dd      	b.n	80012ac <__ledf2+0x74>
 80012f0:	45c4      	cmp	ip, r8
 80012f2:	d8d5      	bhi.n	80012a0 <__ledf2+0x68>
 80012f4:	2000      	movs	r0, #0
 80012f6:	45c4      	cmp	ip, r8
 80012f8:	d2d8      	bcs.n	80012ac <__ledf2+0x74>
 80012fa:	e7f5      	b.n	80012e8 <__ledf2+0xb0>
 80012fc:	000007ff 	.word	0x000007ff

08001300 <__aeabi_dmul>:
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	4657      	mov	r7, sl
 8001304:	464e      	mov	r6, r9
 8001306:	4645      	mov	r5, r8
 8001308:	46de      	mov	lr, fp
 800130a:	b5e0      	push	{r5, r6, r7, lr}
 800130c:	4698      	mov	r8, r3
 800130e:	030c      	lsls	r4, r1, #12
 8001310:	004b      	lsls	r3, r1, #1
 8001312:	0006      	movs	r6, r0
 8001314:	4692      	mov	sl, r2
 8001316:	b087      	sub	sp, #28
 8001318:	0b24      	lsrs	r4, r4, #12
 800131a:	0d5b      	lsrs	r3, r3, #21
 800131c:	0fcf      	lsrs	r7, r1, #31
 800131e:	2b00      	cmp	r3, #0
 8001320:	d100      	bne.n	8001324 <__aeabi_dmul+0x24>
 8001322:	e15c      	b.n	80015de <__aeabi_dmul+0x2de>
 8001324:	4ad9      	ldr	r2, [pc, #868]	; (800168c <__aeabi_dmul+0x38c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d100      	bne.n	800132c <__aeabi_dmul+0x2c>
 800132a:	e175      	b.n	8001618 <__aeabi_dmul+0x318>
 800132c:	0f42      	lsrs	r2, r0, #29
 800132e:	00e4      	lsls	r4, r4, #3
 8001330:	4314      	orrs	r4, r2
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	0412      	lsls	r2, r2, #16
 8001336:	4314      	orrs	r4, r2
 8001338:	4ad5      	ldr	r2, [pc, #852]	; (8001690 <__aeabi_dmul+0x390>)
 800133a:	00c5      	lsls	r5, r0, #3
 800133c:	4694      	mov	ip, r2
 800133e:	4463      	add	r3, ip
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2300      	movs	r3, #0
 8001344:	4699      	mov	r9, r3
 8001346:	469b      	mov	fp, r3
 8001348:	4643      	mov	r3, r8
 800134a:	4642      	mov	r2, r8
 800134c:	031e      	lsls	r6, r3, #12
 800134e:	0fd2      	lsrs	r2, r2, #31
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4650      	mov	r0, sl
 8001354:	4690      	mov	r8, r2
 8001356:	0b36      	lsrs	r6, r6, #12
 8001358:	0d5b      	lsrs	r3, r3, #21
 800135a:	d100      	bne.n	800135e <__aeabi_dmul+0x5e>
 800135c:	e120      	b.n	80015a0 <__aeabi_dmul+0x2a0>
 800135e:	4acb      	ldr	r2, [pc, #812]	; (800168c <__aeabi_dmul+0x38c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d100      	bne.n	8001366 <__aeabi_dmul+0x66>
 8001364:	e162      	b.n	800162c <__aeabi_dmul+0x32c>
 8001366:	49ca      	ldr	r1, [pc, #808]	; (8001690 <__aeabi_dmul+0x390>)
 8001368:	0f42      	lsrs	r2, r0, #29
 800136a:	468c      	mov	ip, r1
 800136c:	9900      	ldr	r1, [sp, #0]
 800136e:	4463      	add	r3, ip
 8001370:	00f6      	lsls	r6, r6, #3
 8001372:	468c      	mov	ip, r1
 8001374:	4316      	orrs	r6, r2
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	449c      	add	ip, r3
 800137a:	0412      	lsls	r2, r2, #16
 800137c:	4663      	mov	r3, ip
 800137e:	4316      	orrs	r6, r2
 8001380:	00c2      	lsls	r2, r0, #3
 8001382:	2000      	movs	r0, #0
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	9900      	ldr	r1, [sp, #0]
 8001388:	4643      	mov	r3, r8
 800138a:	3101      	adds	r1, #1
 800138c:	468c      	mov	ip, r1
 800138e:	4649      	mov	r1, r9
 8001390:	407b      	eors	r3, r7
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	290f      	cmp	r1, #15
 8001396:	d826      	bhi.n	80013e6 <__aeabi_dmul+0xe6>
 8001398:	4bbe      	ldr	r3, [pc, #760]	; (8001694 <__aeabi_dmul+0x394>)
 800139a:	0089      	lsls	r1, r1, #2
 800139c:	5859      	ldr	r1, [r3, r1]
 800139e:	468f      	mov	pc, r1
 80013a0:	4643      	mov	r3, r8
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	0034      	movs	r4, r6
 80013a6:	0015      	movs	r5, r2
 80013a8:	4683      	mov	fp, r0
 80013aa:	465b      	mov	r3, fp
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d016      	beq.n	80013de <__aeabi_dmul+0xde>
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dmul+0xb6>
 80013b4:	e203      	b.n	80017be <__aeabi_dmul+0x4be>
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d000      	beq.n	80013bc <__aeabi_dmul+0xbc>
 80013ba:	e0cd      	b.n	8001558 <__aeabi_dmul+0x258>
 80013bc:	2200      	movs	r2, #0
 80013be:	2400      	movs	r4, #0
 80013c0:	2500      	movs	r5, #0
 80013c2:	9b01      	ldr	r3, [sp, #4]
 80013c4:	0512      	lsls	r2, r2, #20
 80013c6:	4322      	orrs	r2, r4
 80013c8:	07db      	lsls	r3, r3, #31
 80013ca:	431a      	orrs	r2, r3
 80013cc:	0028      	movs	r0, r5
 80013ce:	0011      	movs	r1, r2
 80013d0:	b007      	add	sp, #28
 80013d2:	bcf0      	pop	{r4, r5, r6, r7}
 80013d4:	46bb      	mov	fp, r7
 80013d6:	46b2      	mov	sl, r6
 80013d8:	46a9      	mov	r9, r5
 80013da:	46a0      	mov	r8, r4
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	2400      	movs	r4, #0
 80013e0:	2500      	movs	r5, #0
 80013e2:	4aaa      	ldr	r2, [pc, #680]	; (800168c <__aeabi_dmul+0x38c>)
 80013e4:	e7ed      	b.n	80013c2 <__aeabi_dmul+0xc2>
 80013e6:	0c28      	lsrs	r0, r5, #16
 80013e8:	042d      	lsls	r5, r5, #16
 80013ea:	0c2d      	lsrs	r5, r5, #16
 80013ec:	002b      	movs	r3, r5
 80013ee:	0c11      	lsrs	r1, r2, #16
 80013f0:	0412      	lsls	r2, r2, #16
 80013f2:	0c12      	lsrs	r2, r2, #16
 80013f4:	4353      	muls	r3, r2
 80013f6:	4698      	mov	r8, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	002f      	movs	r7, r5
 80013fc:	4343      	muls	r3, r0
 80013fe:	4699      	mov	r9, r3
 8001400:	434f      	muls	r7, r1
 8001402:	444f      	add	r7, r9
 8001404:	46bb      	mov	fp, r7
 8001406:	4647      	mov	r7, r8
 8001408:	000b      	movs	r3, r1
 800140a:	0c3f      	lsrs	r7, r7, #16
 800140c:	46ba      	mov	sl, r7
 800140e:	4343      	muls	r3, r0
 8001410:	44da      	add	sl, fp
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	45d1      	cmp	r9, sl
 8001416:	d904      	bls.n	8001422 <__aeabi_dmul+0x122>
 8001418:	2780      	movs	r7, #128	; 0x80
 800141a:	027f      	lsls	r7, r7, #9
 800141c:	46b9      	mov	r9, r7
 800141e:	444b      	add	r3, r9
 8001420:	9302      	str	r3, [sp, #8]
 8001422:	4653      	mov	r3, sl
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	469b      	mov	fp, r3
 8001428:	4653      	mov	r3, sl
 800142a:	041f      	lsls	r7, r3, #16
 800142c:	4643      	mov	r3, r8
 800142e:	041b      	lsls	r3, r3, #16
 8001430:	0c1b      	lsrs	r3, r3, #16
 8001432:	4698      	mov	r8, r3
 8001434:	003b      	movs	r3, r7
 8001436:	4443      	add	r3, r8
 8001438:	9304      	str	r3, [sp, #16]
 800143a:	0c33      	lsrs	r3, r6, #16
 800143c:	0436      	lsls	r6, r6, #16
 800143e:	0c36      	lsrs	r6, r6, #16
 8001440:	4698      	mov	r8, r3
 8001442:	0033      	movs	r3, r6
 8001444:	4343      	muls	r3, r0
 8001446:	4699      	mov	r9, r3
 8001448:	4643      	mov	r3, r8
 800144a:	4343      	muls	r3, r0
 800144c:	002f      	movs	r7, r5
 800144e:	469a      	mov	sl, r3
 8001450:	4643      	mov	r3, r8
 8001452:	4377      	muls	r7, r6
 8001454:	435d      	muls	r5, r3
 8001456:	0c38      	lsrs	r0, r7, #16
 8001458:	444d      	add	r5, r9
 800145a:	1945      	adds	r5, r0, r5
 800145c:	45a9      	cmp	r9, r5
 800145e:	d903      	bls.n	8001468 <__aeabi_dmul+0x168>
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	025b      	lsls	r3, r3, #9
 8001464:	4699      	mov	r9, r3
 8001466:	44ca      	add	sl, r9
 8001468:	043f      	lsls	r7, r7, #16
 800146a:	0c28      	lsrs	r0, r5, #16
 800146c:	0c3f      	lsrs	r7, r7, #16
 800146e:	042d      	lsls	r5, r5, #16
 8001470:	19ed      	adds	r5, r5, r7
 8001472:	0c27      	lsrs	r7, r4, #16
 8001474:	0424      	lsls	r4, r4, #16
 8001476:	0c24      	lsrs	r4, r4, #16
 8001478:	0003      	movs	r3, r0
 800147a:	0020      	movs	r0, r4
 800147c:	4350      	muls	r0, r2
 800147e:	437a      	muls	r2, r7
 8001480:	4691      	mov	r9, r2
 8001482:	003a      	movs	r2, r7
 8001484:	4453      	add	r3, sl
 8001486:	9305      	str	r3, [sp, #20]
 8001488:	0c03      	lsrs	r3, r0, #16
 800148a:	469a      	mov	sl, r3
 800148c:	434a      	muls	r2, r1
 800148e:	4361      	muls	r1, r4
 8001490:	4449      	add	r1, r9
 8001492:	4451      	add	r1, sl
 8001494:	44ab      	add	fp, r5
 8001496:	4589      	cmp	r9, r1
 8001498:	d903      	bls.n	80014a2 <__aeabi_dmul+0x1a2>
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	025b      	lsls	r3, r3, #9
 800149e:	4699      	mov	r9, r3
 80014a0:	444a      	add	r2, r9
 80014a2:	0400      	lsls	r0, r0, #16
 80014a4:	0c0b      	lsrs	r3, r1, #16
 80014a6:	0c00      	lsrs	r0, r0, #16
 80014a8:	0409      	lsls	r1, r1, #16
 80014aa:	1809      	adds	r1, r1, r0
 80014ac:	0020      	movs	r0, r4
 80014ae:	4699      	mov	r9, r3
 80014b0:	4643      	mov	r3, r8
 80014b2:	4370      	muls	r0, r6
 80014b4:	435c      	muls	r4, r3
 80014b6:	437e      	muls	r6, r7
 80014b8:	435f      	muls	r7, r3
 80014ba:	0c03      	lsrs	r3, r0, #16
 80014bc:	4698      	mov	r8, r3
 80014be:	19a4      	adds	r4, r4, r6
 80014c0:	4444      	add	r4, r8
 80014c2:	444a      	add	r2, r9
 80014c4:	9703      	str	r7, [sp, #12]
 80014c6:	42a6      	cmp	r6, r4
 80014c8:	d904      	bls.n	80014d4 <__aeabi_dmul+0x1d4>
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	025b      	lsls	r3, r3, #9
 80014ce:	4698      	mov	r8, r3
 80014d0:	4447      	add	r7, r8
 80014d2:	9703      	str	r7, [sp, #12]
 80014d4:	0423      	lsls	r3, r4, #16
 80014d6:	9e02      	ldr	r6, [sp, #8]
 80014d8:	469a      	mov	sl, r3
 80014da:	9b05      	ldr	r3, [sp, #20]
 80014dc:	445e      	add	r6, fp
 80014de:	4698      	mov	r8, r3
 80014e0:	42ae      	cmp	r6, r5
 80014e2:	41ad      	sbcs	r5, r5
 80014e4:	1876      	adds	r6, r6, r1
 80014e6:	428e      	cmp	r6, r1
 80014e8:	4189      	sbcs	r1, r1
 80014ea:	0400      	lsls	r0, r0, #16
 80014ec:	0c00      	lsrs	r0, r0, #16
 80014ee:	4450      	add	r0, sl
 80014f0:	4440      	add	r0, r8
 80014f2:	426d      	negs	r5, r5
 80014f4:	1947      	adds	r7, r0, r5
 80014f6:	46b8      	mov	r8, r7
 80014f8:	4693      	mov	fp, r2
 80014fa:	4249      	negs	r1, r1
 80014fc:	4689      	mov	r9, r1
 80014fe:	44c3      	add	fp, r8
 8001500:	44d9      	add	r9, fp
 8001502:	4298      	cmp	r0, r3
 8001504:	4180      	sbcs	r0, r0
 8001506:	45a8      	cmp	r8, r5
 8001508:	41ad      	sbcs	r5, r5
 800150a:	4593      	cmp	fp, r2
 800150c:	4192      	sbcs	r2, r2
 800150e:	4589      	cmp	r9, r1
 8001510:	4189      	sbcs	r1, r1
 8001512:	426d      	negs	r5, r5
 8001514:	4240      	negs	r0, r0
 8001516:	4328      	orrs	r0, r5
 8001518:	0c24      	lsrs	r4, r4, #16
 800151a:	4252      	negs	r2, r2
 800151c:	4249      	negs	r1, r1
 800151e:	430a      	orrs	r2, r1
 8001520:	9b03      	ldr	r3, [sp, #12]
 8001522:	1900      	adds	r0, r0, r4
 8001524:	1880      	adds	r0, r0, r2
 8001526:	18c7      	adds	r7, r0, r3
 8001528:	464b      	mov	r3, r9
 800152a:	0ddc      	lsrs	r4, r3, #23
 800152c:	9b04      	ldr	r3, [sp, #16]
 800152e:	0275      	lsls	r5, r6, #9
 8001530:	431d      	orrs	r5, r3
 8001532:	1e6a      	subs	r2, r5, #1
 8001534:	4195      	sbcs	r5, r2
 8001536:	464b      	mov	r3, r9
 8001538:	0df6      	lsrs	r6, r6, #23
 800153a:	027f      	lsls	r7, r7, #9
 800153c:	4335      	orrs	r5, r6
 800153e:	025a      	lsls	r2, r3, #9
 8001540:	433c      	orrs	r4, r7
 8001542:	4315      	orrs	r5, r2
 8001544:	01fb      	lsls	r3, r7, #7
 8001546:	d400      	bmi.n	800154a <__aeabi_dmul+0x24a>
 8001548:	e11c      	b.n	8001784 <__aeabi_dmul+0x484>
 800154a:	2101      	movs	r1, #1
 800154c:	086a      	lsrs	r2, r5, #1
 800154e:	400d      	ands	r5, r1
 8001550:	4315      	orrs	r5, r2
 8001552:	07e2      	lsls	r2, r4, #31
 8001554:	4315      	orrs	r5, r2
 8001556:	0864      	lsrs	r4, r4, #1
 8001558:	494f      	ldr	r1, [pc, #316]	; (8001698 <__aeabi_dmul+0x398>)
 800155a:	4461      	add	r1, ip
 800155c:	2900      	cmp	r1, #0
 800155e:	dc00      	bgt.n	8001562 <__aeabi_dmul+0x262>
 8001560:	e0b0      	b.n	80016c4 <__aeabi_dmul+0x3c4>
 8001562:	076b      	lsls	r3, r5, #29
 8001564:	d009      	beq.n	800157a <__aeabi_dmul+0x27a>
 8001566:	220f      	movs	r2, #15
 8001568:	402a      	ands	r2, r5
 800156a:	2a04      	cmp	r2, #4
 800156c:	d005      	beq.n	800157a <__aeabi_dmul+0x27a>
 800156e:	1d2a      	adds	r2, r5, #4
 8001570:	42aa      	cmp	r2, r5
 8001572:	41ad      	sbcs	r5, r5
 8001574:	426d      	negs	r5, r5
 8001576:	1964      	adds	r4, r4, r5
 8001578:	0015      	movs	r5, r2
 800157a:	01e3      	lsls	r3, r4, #7
 800157c:	d504      	bpl.n	8001588 <__aeabi_dmul+0x288>
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	4a46      	ldr	r2, [pc, #280]	; (800169c <__aeabi_dmul+0x39c>)
 8001582:	00c9      	lsls	r1, r1, #3
 8001584:	4014      	ands	r4, r2
 8001586:	4461      	add	r1, ip
 8001588:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <__aeabi_dmul+0x3a0>)
 800158a:	4291      	cmp	r1, r2
 800158c:	dd00      	ble.n	8001590 <__aeabi_dmul+0x290>
 800158e:	e726      	b.n	80013de <__aeabi_dmul+0xde>
 8001590:	0762      	lsls	r2, r4, #29
 8001592:	08ed      	lsrs	r5, r5, #3
 8001594:	0264      	lsls	r4, r4, #9
 8001596:	0549      	lsls	r1, r1, #21
 8001598:	4315      	orrs	r5, r2
 800159a:	0b24      	lsrs	r4, r4, #12
 800159c:	0d4a      	lsrs	r2, r1, #21
 800159e:	e710      	b.n	80013c2 <__aeabi_dmul+0xc2>
 80015a0:	4652      	mov	r2, sl
 80015a2:	4332      	orrs	r2, r6
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dmul+0x2a8>
 80015a6:	e07f      	b.n	80016a8 <__aeabi_dmul+0x3a8>
 80015a8:	2e00      	cmp	r6, #0
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0x2ae>
 80015ac:	e0dc      	b.n	8001768 <__aeabi_dmul+0x468>
 80015ae:	0030      	movs	r0, r6
 80015b0:	f000 fd4e 	bl	8002050 <__clzsi2>
 80015b4:	0002      	movs	r2, r0
 80015b6:	3a0b      	subs	r2, #11
 80015b8:	231d      	movs	r3, #29
 80015ba:	0001      	movs	r1, r0
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	4652      	mov	r2, sl
 80015c0:	3908      	subs	r1, #8
 80015c2:	40da      	lsrs	r2, r3
 80015c4:	408e      	lsls	r6, r1
 80015c6:	4316      	orrs	r6, r2
 80015c8:	4652      	mov	r2, sl
 80015ca:	408a      	lsls	r2, r1
 80015cc:	9b00      	ldr	r3, [sp, #0]
 80015ce:	4935      	ldr	r1, [pc, #212]	; (80016a4 <__aeabi_dmul+0x3a4>)
 80015d0:	1a18      	subs	r0, r3, r0
 80015d2:	0003      	movs	r3, r0
 80015d4:	468c      	mov	ip, r1
 80015d6:	4463      	add	r3, ip
 80015d8:	2000      	movs	r0, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	e6d3      	b.n	8001386 <__aeabi_dmul+0x86>
 80015de:	0025      	movs	r5, r4
 80015e0:	4305      	orrs	r5, r0
 80015e2:	d04a      	beq.n	800167a <__aeabi_dmul+0x37a>
 80015e4:	2c00      	cmp	r4, #0
 80015e6:	d100      	bne.n	80015ea <__aeabi_dmul+0x2ea>
 80015e8:	e0b0      	b.n	800174c <__aeabi_dmul+0x44c>
 80015ea:	0020      	movs	r0, r4
 80015ec:	f000 fd30 	bl	8002050 <__clzsi2>
 80015f0:	0001      	movs	r1, r0
 80015f2:	0002      	movs	r2, r0
 80015f4:	390b      	subs	r1, #11
 80015f6:	231d      	movs	r3, #29
 80015f8:	0010      	movs	r0, r2
 80015fa:	1a5b      	subs	r3, r3, r1
 80015fc:	0031      	movs	r1, r6
 80015fe:	0035      	movs	r5, r6
 8001600:	3808      	subs	r0, #8
 8001602:	4084      	lsls	r4, r0
 8001604:	40d9      	lsrs	r1, r3
 8001606:	4085      	lsls	r5, r0
 8001608:	430c      	orrs	r4, r1
 800160a:	4826      	ldr	r0, [pc, #152]	; (80016a4 <__aeabi_dmul+0x3a4>)
 800160c:	1a83      	subs	r3, r0, r2
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2300      	movs	r3, #0
 8001612:	4699      	mov	r9, r3
 8001614:	469b      	mov	fp, r3
 8001616:	e697      	b.n	8001348 <__aeabi_dmul+0x48>
 8001618:	0005      	movs	r5, r0
 800161a:	4325      	orrs	r5, r4
 800161c:	d126      	bne.n	800166c <__aeabi_dmul+0x36c>
 800161e:	2208      	movs	r2, #8
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2302      	movs	r3, #2
 8001624:	2400      	movs	r4, #0
 8001626:	4691      	mov	r9, r2
 8001628:	469b      	mov	fp, r3
 800162a:	e68d      	b.n	8001348 <__aeabi_dmul+0x48>
 800162c:	4652      	mov	r2, sl
 800162e:	9b00      	ldr	r3, [sp, #0]
 8001630:	4332      	orrs	r2, r6
 8001632:	d110      	bne.n	8001656 <__aeabi_dmul+0x356>
 8001634:	4915      	ldr	r1, [pc, #84]	; (800168c <__aeabi_dmul+0x38c>)
 8001636:	2600      	movs	r6, #0
 8001638:	468c      	mov	ip, r1
 800163a:	4463      	add	r3, ip
 800163c:	4649      	mov	r1, r9
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2302      	movs	r3, #2
 8001642:	4319      	orrs	r1, r3
 8001644:	4689      	mov	r9, r1
 8001646:	2002      	movs	r0, #2
 8001648:	e69d      	b.n	8001386 <__aeabi_dmul+0x86>
 800164a:	465b      	mov	r3, fp
 800164c:	9701      	str	r7, [sp, #4]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d000      	beq.n	8001654 <__aeabi_dmul+0x354>
 8001652:	e6ad      	b.n	80013b0 <__aeabi_dmul+0xb0>
 8001654:	e6c3      	b.n	80013de <__aeabi_dmul+0xde>
 8001656:	4a0d      	ldr	r2, [pc, #52]	; (800168c <__aeabi_dmul+0x38c>)
 8001658:	2003      	movs	r0, #3
 800165a:	4694      	mov	ip, r2
 800165c:	4463      	add	r3, ip
 800165e:	464a      	mov	r2, r9
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2303      	movs	r3, #3
 8001664:	431a      	orrs	r2, r3
 8001666:	4691      	mov	r9, r2
 8001668:	4652      	mov	r2, sl
 800166a:	e68c      	b.n	8001386 <__aeabi_dmul+0x86>
 800166c:	220c      	movs	r2, #12
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2303      	movs	r3, #3
 8001672:	0005      	movs	r5, r0
 8001674:	4691      	mov	r9, r2
 8001676:	469b      	mov	fp, r3
 8001678:	e666      	b.n	8001348 <__aeabi_dmul+0x48>
 800167a:	2304      	movs	r3, #4
 800167c:	4699      	mov	r9, r3
 800167e:	2300      	movs	r3, #0
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	2400      	movs	r4, #0
 8001686:	469b      	mov	fp, r3
 8001688:	e65e      	b.n	8001348 <__aeabi_dmul+0x48>
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	000007ff 	.word	0x000007ff
 8001690:	fffffc01 	.word	0xfffffc01
 8001694:	08007730 	.word	0x08007730
 8001698:	000003ff 	.word	0x000003ff
 800169c:	feffffff 	.word	0xfeffffff
 80016a0:	000007fe 	.word	0x000007fe
 80016a4:	fffffc0d 	.word	0xfffffc0d
 80016a8:	4649      	mov	r1, r9
 80016aa:	2301      	movs	r3, #1
 80016ac:	4319      	orrs	r1, r3
 80016ae:	4689      	mov	r9, r1
 80016b0:	2600      	movs	r6, #0
 80016b2:	2001      	movs	r0, #1
 80016b4:	e667      	b.n	8001386 <__aeabi_dmul+0x86>
 80016b6:	2300      	movs	r3, #0
 80016b8:	2480      	movs	r4, #128	; 0x80
 80016ba:	2500      	movs	r5, #0
 80016bc:	4a43      	ldr	r2, [pc, #268]	; (80017cc <__aeabi_dmul+0x4cc>)
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	0324      	lsls	r4, r4, #12
 80016c2:	e67e      	b.n	80013c2 <__aeabi_dmul+0xc2>
 80016c4:	2001      	movs	r0, #1
 80016c6:	1a40      	subs	r0, r0, r1
 80016c8:	2838      	cmp	r0, #56	; 0x38
 80016ca:	dd00      	ble.n	80016ce <__aeabi_dmul+0x3ce>
 80016cc:	e676      	b.n	80013bc <__aeabi_dmul+0xbc>
 80016ce:	281f      	cmp	r0, #31
 80016d0:	dd5b      	ble.n	800178a <__aeabi_dmul+0x48a>
 80016d2:	221f      	movs	r2, #31
 80016d4:	0023      	movs	r3, r4
 80016d6:	4252      	negs	r2, r2
 80016d8:	1a51      	subs	r1, r2, r1
 80016da:	40cb      	lsrs	r3, r1
 80016dc:	0019      	movs	r1, r3
 80016de:	2820      	cmp	r0, #32
 80016e0:	d003      	beq.n	80016ea <__aeabi_dmul+0x3ea>
 80016e2:	4a3b      	ldr	r2, [pc, #236]	; (80017d0 <__aeabi_dmul+0x4d0>)
 80016e4:	4462      	add	r2, ip
 80016e6:	4094      	lsls	r4, r2
 80016e8:	4325      	orrs	r5, r4
 80016ea:	1e6a      	subs	r2, r5, #1
 80016ec:	4195      	sbcs	r5, r2
 80016ee:	002a      	movs	r2, r5
 80016f0:	430a      	orrs	r2, r1
 80016f2:	2107      	movs	r1, #7
 80016f4:	000d      	movs	r5, r1
 80016f6:	2400      	movs	r4, #0
 80016f8:	4015      	ands	r5, r2
 80016fa:	4211      	tst	r1, r2
 80016fc:	d05b      	beq.n	80017b6 <__aeabi_dmul+0x4b6>
 80016fe:	210f      	movs	r1, #15
 8001700:	2400      	movs	r4, #0
 8001702:	4011      	ands	r1, r2
 8001704:	2904      	cmp	r1, #4
 8001706:	d053      	beq.n	80017b0 <__aeabi_dmul+0x4b0>
 8001708:	1d11      	adds	r1, r2, #4
 800170a:	4291      	cmp	r1, r2
 800170c:	4192      	sbcs	r2, r2
 800170e:	4252      	negs	r2, r2
 8001710:	18a4      	adds	r4, r4, r2
 8001712:	000a      	movs	r2, r1
 8001714:	0223      	lsls	r3, r4, #8
 8001716:	d54b      	bpl.n	80017b0 <__aeabi_dmul+0x4b0>
 8001718:	2201      	movs	r2, #1
 800171a:	2400      	movs	r4, #0
 800171c:	2500      	movs	r5, #0
 800171e:	e650      	b.n	80013c2 <__aeabi_dmul+0xc2>
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	031b      	lsls	r3, r3, #12
 8001724:	421c      	tst	r4, r3
 8001726:	d009      	beq.n	800173c <__aeabi_dmul+0x43c>
 8001728:	421e      	tst	r6, r3
 800172a:	d107      	bne.n	800173c <__aeabi_dmul+0x43c>
 800172c:	4333      	orrs	r3, r6
 800172e:	031c      	lsls	r4, r3, #12
 8001730:	4643      	mov	r3, r8
 8001732:	0015      	movs	r5, r2
 8001734:	0b24      	lsrs	r4, r4, #12
 8001736:	4a25      	ldr	r2, [pc, #148]	; (80017cc <__aeabi_dmul+0x4cc>)
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	e642      	b.n	80013c2 <__aeabi_dmul+0xc2>
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	0312      	lsls	r2, r2, #12
 8001740:	4314      	orrs	r4, r2
 8001742:	0324      	lsls	r4, r4, #12
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <__aeabi_dmul+0x4cc>)
 8001746:	0b24      	lsrs	r4, r4, #12
 8001748:	9701      	str	r7, [sp, #4]
 800174a:	e63a      	b.n	80013c2 <__aeabi_dmul+0xc2>
 800174c:	f000 fc80 	bl	8002050 <__clzsi2>
 8001750:	0001      	movs	r1, r0
 8001752:	0002      	movs	r2, r0
 8001754:	3115      	adds	r1, #21
 8001756:	3220      	adds	r2, #32
 8001758:	291c      	cmp	r1, #28
 800175a:	dc00      	bgt.n	800175e <__aeabi_dmul+0x45e>
 800175c:	e74b      	b.n	80015f6 <__aeabi_dmul+0x2f6>
 800175e:	0034      	movs	r4, r6
 8001760:	3808      	subs	r0, #8
 8001762:	2500      	movs	r5, #0
 8001764:	4084      	lsls	r4, r0
 8001766:	e750      	b.n	800160a <__aeabi_dmul+0x30a>
 8001768:	f000 fc72 	bl	8002050 <__clzsi2>
 800176c:	0003      	movs	r3, r0
 800176e:	001a      	movs	r2, r3
 8001770:	3215      	adds	r2, #21
 8001772:	3020      	adds	r0, #32
 8001774:	2a1c      	cmp	r2, #28
 8001776:	dc00      	bgt.n	800177a <__aeabi_dmul+0x47a>
 8001778:	e71e      	b.n	80015b8 <__aeabi_dmul+0x2b8>
 800177a:	4656      	mov	r6, sl
 800177c:	3b08      	subs	r3, #8
 800177e:	2200      	movs	r2, #0
 8001780:	409e      	lsls	r6, r3
 8001782:	e723      	b.n	80015cc <__aeabi_dmul+0x2cc>
 8001784:	9b00      	ldr	r3, [sp, #0]
 8001786:	469c      	mov	ip, r3
 8001788:	e6e6      	b.n	8001558 <__aeabi_dmul+0x258>
 800178a:	4912      	ldr	r1, [pc, #72]	; (80017d4 <__aeabi_dmul+0x4d4>)
 800178c:	0022      	movs	r2, r4
 800178e:	4461      	add	r1, ip
 8001790:	002e      	movs	r6, r5
 8001792:	408d      	lsls	r5, r1
 8001794:	408a      	lsls	r2, r1
 8001796:	40c6      	lsrs	r6, r0
 8001798:	1e69      	subs	r1, r5, #1
 800179a:	418d      	sbcs	r5, r1
 800179c:	4332      	orrs	r2, r6
 800179e:	432a      	orrs	r2, r5
 80017a0:	40c4      	lsrs	r4, r0
 80017a2:	0753      	lsls	r3, r2, #29
 80017a4:	d0b6      	beq.n	8001714 <__aeabi_dmul+0x414>
 80017a6:	210f      	movs	r1, #15
 80017a8:	4011      	ands	r1, r2
 80017aa:	2904      	cmp	r1, #4
 80017ac:	d1ac      	bne.n	8001708 <__aeabi_dmul+0x408>
 80017ae:	e7b1      	b.n	8001714 <__aeabi_dmul+0x414>
 80017b0:	0765      	lsls	r5, r4, #29
 80017b2:	0264      	lsls	r4, r4, #9
 80017b4:	0b24      	lsrs	r4, r4, #12
 80017b6:	08d2      	lsrs	r2, r2, #3
 80017b8:	4315      	orrs	r5, r2
 80017ba:	2200      	movs	r2, #0
 80017bc:	e601      	b.n	80013c2 <__aeabi_dmul+0xc2>
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	0312      	lsls	r2, r2, #12
 80017c2:	4314      	orrs	r4, r2
 80017c4:	0324      	lsls	r4, r4, #12
 80017c6:	4a01      	ldr	r2, [pc, #4]	; (80017cc <__aeabi_dmul+0x4cc>)
 80017c8:	0b24      	lsrs	r4, r4, #12
 80017ca:	e5fa      	b.n	80013c2 <__aeabi_dmul+0xc2>
 80017cc:	000007ff 	.word	0x000007ff
 80017d0:	0000043e 	.word	0x0000043e
 80017d4:	0000041e 	.word	0x0000041e

080017d8 <__aeabi_dsub>:
 80017d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017da:	4657      	mov	r7, sl
 80017dc:	464e      	mov	r6, r9
 80017de:	4645      	mov	r5, r8
 80017e0:	46de      	mov	lr, fp
 80017e2:	b5e0      	push	{r5, r6, r7, lr}
 80017e4:	001e      	movs	r6, r3
 80017e6:	0017      	movs	r7, r2
 80017e8:	004a      	lsls	r2, r1, #1
 80017ea:	030b      	lsls	r3, r1, #12
 80017ec:	0d52      	lsrs	r2, r2, #21
 80017ee:	0a5b      	lsrs	r3, r3, #9
 80017f0:	4690      	mov	r8, r2
 80017f2:	0f42      	lsrs	r2, r0, #29
 80017f4:	431a      	orrs	r2, r3
 80017f6:	0fcd      	lsrs	r5, r1, #31
 80017f8:	4ccd      	ldr	r4, [pc, #820]	; (8001b30 <__aeabi_dsub+0x358>)
 80017fa:	0331      	lsls	r1, r6, #12
 80017fc:	00c3      	lsls	r3, r0, #3
 80017fe:	4694      	mov	ip, r2
 8001800:	0070      	lsls	r0, r6, #1
 8001802:	0f7a      	lsrs	r2, r7, #29
 8001804:	0a49      	lsrs	r1, r1, #9
 8001806:	00ff      	lsls	r7, r7, #3
 8001808:	469a      	mov	sl, r3
 800180a:	46b9      	mov	r9, r7
 800180c:	0d40      	lsrs	r0, r0, #21
 800180e:	0ff6      	lsrs	r6, r6, #31
 8001810:	4311      	orrs	r1, r2
 8001812:	42a0      	cmp	r0, r4
 8001814:	d100      	bne.n	8001818 <__aeabi_dsub+0x40>
 8001816:	e0b1      	b.n	800197c <__aeabi_dsub+0x1a4>
 8001818:	2201      	movs	r2, #1
 800181a:	4056      	eors	r6, r2
 800181c:	46b3      	mov	fp, r6
 800181e:	42b5      	cmp	r5, r6
 8001820:	d100      	bne.n	8001824 <__aeabi_dsub+0x4c>
 8001822:	e088      	b.n	8001936 <__aeabi_dsub+0x15e>
 8001824:	4642      	mov	r2, r8
 8001826:	1a12      	subs	r2, r2, r0
 8001828:	2a00      	cmp	r2, #0
 800182a:	dc00      	bgt.n	800182e <__aeabi_dsub+0x56>
 800182c:	e0ae      	b.n	800198c <__aeabi_dsub+0x1b4>
 800182e:	2800      	cmp	r0, #0
 8001830:	d100      	bne.n	8001834 <__aeabi_dsub+0x5c>
 8001832:	e0c1      	b.n	80019b8 <__aeabi_dsub+0x1e0>
 8001834:	48be      	ldr	r0, [pc, #760]	; (8001b30 <__aeabi_dsub+0x358>)
 8001836:	4580      	cmp	r8, r0
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x64>
 800183a:	e151      	b.n	8001ae0 <__aeabi_dsub+0x308>
 800183c:	2080      	movs	r0, #128	; 0x80
 800183e:	0400      	lsls	r0, r0, #16
 8001840:	4301      	orrs	r1, r0
 8001842:	2a38      	cmp	r2, #56	; 0x38
 8001844:	dd00      	ble.n	8001848 <__aeabi_dsub+0x70>
 8001846:	e17b      	b.n	8001b40 <__aeabi_dsub+0x368>
 8001848:	2a1f      	cmp	r2, #31
 800184a:	dd00      	ble.n	800184e <__aeabi_dsub+0x76>
 800184c:	e1ee      	b.n	8001c2c <__aeabi_dsub+0x454>
 800184e:	2020      	movs	r0, #32
 8001850:	003e      	movs	r6, r7
 8001852:	1a80      	subs	r0, r0, r2
 8001854:	000c      	movs	r4, r1
 8001856:	40d6      	lsrs	r6, r2
 8001858:	40d1      	lsrs	r1, r2
 800185a:	4087      	lsls	r7, r0
 800185c:	4662      	mov	r2, ip
 800185e:	4084      	lsls	r4, r0
 8001860:	1a52      	subs	r2, r2, r1
 8001862:	1e78      	subs	r0, r7, #1
 8001864:	4187      	sbcs	r7, r0
 8001866:	4694      	mov	ip, r2
 8001868:	4334      	orrs	r4, r6
 800186a:	4327      	orrs	r7, r4
 800186c:	1bdc      	subs	r4, r3, r7
 800186e:	42a3      	cmp	r3, r4
 8001870:	419b      	sbcs	r3, r3
 8001872:	4662      	mov	r2, ip
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	4699      	mov	r9, r3
 800187a:	464b      	mov	r3, r9
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	d400      	bmi.n	8001882 <__aeabi_dsub+0xaa>
 8001880:	e118      	b.n	8001ab4 <__aeabi_dsub+0x2dc>
 8001882:	464b      	mov	r3, r9
 8001884:	0258      	lsls	r0, r3, #9
 8001886:	0a43      	lsrs	r3, r0, #9
 8001888:	4699      	mov	r9, r3
 800188a:	464b      	mov	r3, r9
 800188c:	2b00      	cmp	r3, #0
 800188e:	d100      	bne.n	8001892 <__aeabi_dsub+0xba>
 8001890:	e137      	b.n	8001b02 <__aeabi_dsub+0x32a>
 8001892:	4648      	mov	r0, r9
 8001894:	f000 fbdc 	bl	8002050 <__clzsi2>
 8001898:	0001      	movs	r1, r0
 800189a:	3908      	subs	r1, #8
 800189c:	2320      	movs	r3, #32
 800189e:	0022      	movs	r2, r4
 80018a0:	4648      	mov	r0, r9
 80018a2:	1a5b      	subs	r3, r3, r1
 80018a4:	40da      	lsrs	r2, r3
 80018a6:	4088      	lsls	r0, r1
 80018a8:	408c      	lsls	r4, r1
 80018aa:	4643      	mov	r3, r8
 80018ac:	4310      	orrs	r0, r2
 80018ae:	4588      	cmp	r8, r1
 80018b0:	dd00      	ble.n	80018b4 <__aeabi_dsub+0xdc>
 80018b2:	e136      	b.n	8001b22 <__aeabi_dsub+0x34a>
 80018b4:	1ac9      	subs	r1, r1, r3
 80018b6:	1c4b      	adds	r3, r1, #1
 80018b8:	2b1f      	cmp	r3, #31
 80018ba:	dd00      	ble.n	80018be <__aeabi_dsub+0xe6>
 80018bc:	e0ea      	b.n	8001a94 <__aeabi_dsub+0x2bc>
 80018be:	2220      	movs	r2, #32
 80018c0:	0026      	movs	r6, r4
 80018c2:	1ad2      	subs	r2, r2, r3
 80018c4:	0001      	movs	r1, r0
 80018c6:	4094      	lsls	r4, r2
 80018c8:	40de      	lsrs	r6, r3
 80018ca:	40d8      	lsrs	r0, r3
 80018cc:	2300      	movs	r3, #0
 80018ce:	4091      	lsls	r1, r2
 80018d0:	1e62      	subs	r2, r4, #1
 80018d2:	4194      	sbcs	r4, r2
 80018d4:	4681      	mov	r9, r0
 80018d6:	4698      	mov	r8, r3
 80018d8:	4331      	orrs	r1, r6
 80018da:	430c      	orrs	r4, r1
 80018dc:	0763      	lsls	r3, r4, #29
 80018de:	d009      	beq.n	80018f4 <__aeabi_dsub+0x11c>
 80018e0:	230f      	movs	r3, #15
 80018e2:	4023      	ands	r3, r4
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d005      	beq.n	80018f4 <__aeabi_dsub+0x11c>
 80018e8:	1d23      	adds	r3, r4, #4
 80018ea:	42a3      	cmp	r3, r4
 80018ec:	41a4      	sbcs	r4, r4
 80018ee:	4264      	negs	r4, r4
 80018f0:	44a1      	add	r9, r4
 80018f2:	001c      	movs	r4, r3
 80018f4:	464b      	mov	r3, r9
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	d400      	bmi.n	80018fc <__aeabi_dsub+0x124>
 80018fa:	e0de      	b.n	8001aba <__aeabi_dsub+0x2e2>
 80018fc:	4641      	mov	r1, r8
 80018fe:	4b8c      	ldr	r3, [pc, #560]	; (8001b30 <__aeabi_dsub+0x358>)
 8001900:	3101      	adds	r1, #1
 8001902:	4299      	cmp	r1, r3
 8001904:	d100      	bne.n	8001908 <__aeabi_dsub+0x130>
 8001906:	e0e7      	b.n	8001ad8 <__aeabi_dsub+0x300>
 8001908:	464b      	mov	r3, r9
 800190a:	488a      	ldr	r0, [pc, #552]	; (8001b34 <__aeabi_dsub+0x35c>)
 800190c:	08e4      	lsrs	r4, r4, #3
 800190e:	4003      	ands	r3, r0
 8001910:	0018      	movs	r0, r3
 8001912:	0549      	lsls	r1, r1, #21
 8001914:	075b      	lsls	r3, r3, #29
 8001916:	0240      	lsls	r0, r0, #9
 8001918:	4323      	orrs	r3, r4
 800191a:	0d4a      	lsrs	r2, r1, #21
 800191c:	0b04      	lsrs	r4, r0, #12
 800191e:	0512      	lsls	r2, r2, #20
 8001920:	07ed      	lsls	r5, r5, #31
 8001922:	4322      	orrs	r2, r4
 8001924:	432a      	orrs	r2, r5
 8001926:	0018      	movs	r0, r3
 8001928:	0011      	movs	r1, r2
 800192a:	bcf0      	pop	{r4, r5, r6, r7}
 800192c:	46bb      	mov	fp, r7
 800192e:	46b2      	mov	sl, r6
 8001930:	46a9      	mov	r9, r5
 8001932:	46a0      	mov	r8, r4
 8001934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001936:	4642      	mov	r2, r8
 8001938:	1a12      	subs	r2, r2, r0
 800193a:	2a00      	cmp	r2, #0
 800193c:	dd52      	ble.n	80019e4 <__aeabi_dsub+0x20c>
 800193e:	2800      	cmp	r0, #0
 8001940:	d100      	bne.n	8001944 <__aeabi_dsub+0x16c>
 8001942:	e09c      	b.n	8001a7e <__aeabi_dsub+0x2a6>
 8001944:	45a0      	cmp	r8, r4
 8001946:	d100      	bne.n	800194a <__aeabi_dsub+0x172>
 8001948:	e0ca      	b.n	8001ae0 <__aeabi_dsub+0x308>
 800194a:	2080      	movs	r0, #128	; 0x80
 800194c:	0400      	lsls	r0, r0, #16
 800194e:	4301      	orrs	r1, r0
 8001950:	2a38      	cmp	r2, #56	; 0x38
 8001952:	dd00      	ble.n	8001956 <__aeabi_dsub+0x17e>
 8001954:	e149      	b.n	8001bea <__aeabi_dsub+0x412>
 8001956:	2a1f      	cmp	r2, #31
 8001958:	dc00      	bgt.n	800195c <__aeabi_dsub+0x184>
 800195a:	e197      	b.n	8001c8c <__aeabi_dsub+0x4b4>
 800195c:	0010      	movs	r0, r2
 800195e:	000e      	movs	r6, r1
 8001960:	3820      	subs	r0, #32
 8001962:	40c6      	lsrs	r6, r0
 8001964:	2a20      	cmp	r2, #32
 8001966:	d004      	beq.n	8001972 <__aeabi_dsub+0x19a>
 8001968:	2040      	movs	r0, #64	; 0x40
 800196a:	1a82      	subs	r2, r0, r2
 800196c:	4091      	lsls	r1, r2
 800196e:	430f      	orrs	r7, r1
 8001970:	46b9      	mov	r9, r7
 8001972:	464c      	mov	r4, r9
 8001974:	1e62      	subs	r2, r4, #1
 8001976:	4194      	sbcs	r4, r2
 8001978:	4334      	orrs	r4, r6
 800197a:	e13a      	b.n	8001bf2 <__aeabi_dsub+0x41a>
 800197c:	000a      	movs	r2, r1
 800197e:	433a      	orrs	r2, r7
 8001980:	d028      	beq.n	80019d4 <__aeabi_dsub+0x1fc>
 8001982:	46b3      	mov	fp, r6
 8001984:	42b5      	cmp	r5, r6
 8001986:	d02b      	beq.n	80019e0 <__aeabi_dsub+0x208>
 8001988:	4a6b      	ldr	r2, [pc, #428]	; (8001b38 <__aeabi_dsub+0x360>)
 800198a:	4442      	add	r2, r8
 800198c:	2a00      	cmp	r2, #0
 800198e:	d05d      	beq.n	8001a4c <__aeabi_dsub+0x274>
 8001990:	4642      	mov	r2, r8
 8001992:	4644      	mov	r4, r8
 8001994:	1a82      	subs	r2, r0, r2
 8001996:	2c00      	cmp	r4, #0
 8001998:	d000      	beq.n	800199c <__aeabi_dsub+0x1c4>
 800199a:	e0f5      	b.n	8001b88 <__aeabi_dsub+0x3b0>
 800199c:	4665      	mov	r5, ip
 800199e:	431d      	orrs	r5, r3
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x1cc>
 80019a2:	e19c      	b.n	8001cde <__aeabi_dsub+0x506>
 80019a4:	1e55      	subs	r5, r2, #1
 80019a6:	2a01      	cmp	r2, #1
 80019a8:	d100      	bne.n	80019ac <__aeabi_dsub+0x1d4>
 80019aa:	e1fb      	b.n	8001da4 <__aeabi_dsub+0x5cc>
 80019ac:	4c60      	ldr	r4, [pc, #384]	; (8001b30 <__aeabi_dsub+0x358>)
 80019ae:	42a2      	cmp	r2, r4
 80019b0:	d100      	bne.n	80019b4 <__aeabi_dsub+0x1dc>
 80019b2:	e1bd      	b.n	8001d30 <__aeabi_dsub+0x558>
 80019b4:	002a      	movs	r2, r5
 80019b6:	e0f0      	b.n	8001b9a <__aeabi_dsub+0x3c2>
 80019b8:	0008      	movs	r0, r1
 80019ba:	4338      	orrs	r0, r7
 80019bc:	d100      	bne.n	80019c0 <__aeabi_dsub+0x1e8>
 80019be:	e0c3      	b.n	8001b48 <__aeabi_dsub+0x370>
 80019c0:	1e50      	subs	r0, r2, #1
 80019c2:	2a01      	cmp	r2, #1
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x1f0>
 80019c6:	e1a8      	b.n	8001d1a <__aeabi_dsub+0x542>
 80019c8:	4c59      	ldr	r4, [pc, #356]	; (8001b30 <__aeabi_dsub+0x358>)
 80019ca:	42a2      	cmp	r2, r4
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x1f8>
 80019ce:	e087      	b.n	8001ae0 <__aeabi_dsub+0x308>
 80019d0:	0002      	movs	r2, r0
 80019d2:	e736      	b.n	8001842 <__aeabi_dsub+0x6a>
 80019d4:	2201      	movs	r2, #1
 80019d6:	4056      	eors	r6, r2
 80019d8:	46b3      	mov	fp, r6
 80019da:	42b5      	cmp	r5, r6
 80019dc:	d000      	beq.n	80019e0 <__aeabi_dsub+0x208>
 80019de:	e721      	b.n	8001824 <__aeabi_dsub+0x4c>
 80019e0:	4a55      	ldr	r2, [pc, #340]	; (8001b38 <__aeabi_dsub+0x360>)
 80019e2:	4442      	add	r2, r8
 80019e4:	2a00      	cmp	r2, #0
 80019e6:	d100      	bne.n	80019ea <__aeabi_dsub+0x212>
 80019e8:	e0b5      	b.n	8001b56 <__aeabi_dsub+0x37e>
 80019ea:	4642      	mov	r2, r8
 80019ec:	4644      	mov	r4, r8
 80019ee:	1a82      	subs	r2, r0, r2
 80019f0:	2c00      	cmp	r4, #0
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dsub+0x21e>
 80019f4:	e138      	b.n	8001c68 <__aeabi_dsub+0x490>
 80019f6:	4e4e      	ldr	r6, [pc, #312]	; (8001b30 <__aeabi_dsub+0x358>)
 80019f8:	42b0      	cmp	r0, r6
 80019fa:	d100      	bne.n	80019fe <__aeabi_dsub+0x226>
 80019fc:	e1de      	b.n	8001dbc <__aeabi_dsub+0x5e4>
 80019fe:	2680      	movs	r6, #128	; 0x80
 8001a00:	4664      	mov	r4, ip
 8001a02:	0436      	lsls	r6, r6, #16
 8001a04:	4334      	orrs	r4, r6
 8001a06:	46a4      	mov	ip, r4
 8001a08:	2a38      	cmp	r2, #56	; 0x38
 8001a0a:	dd00      	ble.n	8001a0e <__aeabi_dsub+0x236>
 8001a0c:	e196      	b.n	8001d3c <__aeabi_dsub+0x564>
 8001a0e:	2a1f      	cmp	r2, #31
 8001a10:	dd00      	ble.n	8001a14 <__aeabi_dsub+0x23c>
 8001a12:	e224      	b.n	8001e5e <__aeabi_dsub+0x686>
 8001a14:	2620      	movs	r6, #32
 8001a16:	1ab4      	subs	r4, r6, r2
 8001a18:	46a2      	mov	sl, r4
 8001a1a:	4664      	mov	r4, ip
 8001a1c:	4656      	mov	r6, sl
 8001a1e:	40b4      	lsls	r4, r6
 8001a20:	46a1      	mov	r9, r4
 8001a22:	001c      	movs	r4, r3
 8001a24:	464e      	mov	r6, r9
 8001a26:	40d4      	lsrs	r4, r2
 8001a28:	4326      	orrs	r6, r4
 8001a2a:	0034      	movs	r4, r6
 8001a2c:	4656      	mov	r6, sl
 8001a2e:	40b3      	lsls	r3, r6
 8001a30:	1e5e      	subs	r6, r3, #1
 8001a32:	41b3      	sbcs	r3, r6
 8001a34:	431c      	orrs	r4, r3
 8001a36:	4663      	mov	r3, ip
 8001a38:	40d3      	lsrs	r3, r2
 8001a3a:	18c9      	adds	r1, r1, r3
 8001a3c:	19e4      	adds	r4, r4, r7
 8001a3e:	42bc      	cmp	r4, r7
 8001a40:	41bf      	sbcs	r7, r7
 8001a42:	427f      	negs	r7, r7
 8001a44:	46b9      	mov	r9, r7
 8001a46:	4680      	mov	r8, r0
 8001a48:	4489      	add	r9, r1
 8001a4a:	e0d8      	b.n	8001bfe <__aeabi_dsub+0x426>
 8001a4c:	4640      	mov	r0, r8
 8001a4e:	4c3b      	ldr	r4, [pc, #236]	; (8001b3c <__aeabi_dsub+0x364>)
 8001a50:	3001      	adds	r0, #1
 8001a52:	4220      	tst	r0, r4
 8001a54:	d000      	beq.n	8001a58 <__aeabi_dsub+0x280>
 8001a56:	e0b4      	b.n	8001bc2 <__aeabi_dsub+0x3ea>
 8001a58:	4640      	mov	r0, r8
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	d000      	beq.n	8001a60 <__aeabi_dsub+0x288>
 8001a5e:	e144      	b.n	8001cea <__aeabi_dsub+0x512>
 8001a60:	4660      	mov	r0, ip
 8001a62:	4318      	orrs	r0, r3
 8001a64:	d100      	bne.n	8001a68 <__aeabi_dsub+0x290>
 8001a66:	e190      	b.n	8001d8a <__aeabi_dsub+0x5b2>
 8001a68:	0008      	movs	r0, r1
 8001a6a:	4338      	orrs	r0, r7
 8001a6c:	d000      	beq.n	8001a70 <__aeabi_dsub+0x298>
 8001a6e:	e1aa      	b.n	8001dc6 <__aeabi_dsub+0x5ee>
 8001a70:	4661      	mov	r1, ip
 8001a72:	08db      	lsrs	r3, r3, #3
 8001a74:	0749      	lsls	r1, r1, #29
 8001a76:	430b      	orrs	r3, r1
 8001a78:	4661      	mov	r1, ip
 8001a7a:	08cc      	lsrs	r4, r1, #3
 8001a7c:	e027      	b.n	8001ace <__aeabi_dsub+0x2f6>
 8001a7e:	0008      	movs	r0, r1
 8001a80:	4338      	orrs	r0, r7
 8001a82:	d061      	beq.n	8001b48 <__aeabi_dsub+0x370>
 8001a84:	1e50      	subs	r0, r2, #1
 8001a86:	2a01      	cmp	r2, #1
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x2b4>
 8001a8a:	e139      	b.n	8001d00 <__aeabi_dsub+0x528>
 8001a8c:	42a2      	cmp	r2, r4
 8001a8e:	d027      	beq.n	8001ae0 <__aeabi_dsub+0x308>
 8001a90:	0002      	movs	r2, r0
 8001a92:	e75d      	b.n	8001950 <__aeabi_dsub+0x178>
 8001a94:	0002      	movs	r2, r0
 8001a96:	391f      	subs	r1, #31
 8001a98:	40ca      	lsrs	r2, r1
 8001a9a:	0011      	movs	r1, r2
 8001a9c:	2b20      	cmp	r3, #32
 8001a9e:	d003      	beq.n	8001aa8 <__aeabi_dsub+0x2d0>
 8001aa0:	2240      	movs	r2, #64	; 0x40
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	4098      	lsls	r0, r3
 8001aa6:	4304      	orrs	r4, r0
 8001aa8:	1e63      	subs	r3, r4, #1
 8001aaa:	419c      	sbcs	r4, r3
 8001aac:	2300      	movs	r3, #0
 8001aae:	4699      	mov	r9, r3
 8001ab0:	4698      	mov	r8, r3
 8001ab2:	430c      	orrs	r4, r1
 8001ab4:	0763      	lsls	r3, r4, #29
 8001ab6:	d000      	beq.n	8001aba <__aeabi_dsub+0x2e2>
 8001ab8:	e712      	b.n	80018e0 <__aeabi_dsub+0x108>
 8001aba:	464b      	mov	r3, r9
 8001abc:	464a      	mov	r2, r9
 8001abe:	08e4      	lsrs	r4, r4, #3
 8001ac0:	075b      	lsls	r3, r3, #29
 8001ac2:	4323      	orrs	r3, r4
 8001ac4:	08d4      	lsrs	r4, r2, #3
 8001ac6:	4642      	mov	r2, r8
 8001ac8:	4919      	ldr	r1, [pc, #100]	; (8001b30 <__aeabi_dsub+0x358>)
 8001aca:	428a      	cmp	r2, r1
 8001acc:	d00e      	beq.n	8001aec <__aeabi_dsub+0x314>
 8001ace:	0324      	lsls	r4, r4, #12
 8001ad0:	0552      	lsls	r2, r2, #21
 8001ad2:	0b24      	lsrs	r4, r4, #12
 8001ad4:	0d52      	lsrs	r2, r2, #21
 8001ad6:	e722      	b.n	800191e <__aeabi_dsub+0x146>
 8001ad8:	000a      	movs	r2, r1
 8001ada:	2400      	movs	r4, #0
 8001adc:	2300      	movs	r3, #0
 8001ade:	e71e      	b.n	800191e <__aeabi_dsub+0x146>
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	4662      	mov	r2, ip
 8001ae4:	0752      	lsls	r2, r2, #29
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	4662      	mov	r2, ip
 8001aea:	08d4      	lsrs	r4, r2, #3
 8001aec:	001a      	movs	r2, r3
 8001aee:	4322      	orrs	r2, r4
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dsub+0x31c>
 8001af2:	e1fc      	b.n	8001eee <__aeabi_dsub+0x716>
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	0312      	lsls	r2, r2, #12
 8001af8:	4314      	orrs	r4, r2
 8001afa:	0324      	lsls	r4, r4, #12
 8001afc:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <__aeabi_dsub+0x358>)
 8001afe:	0b24      	lsrs	r4, r4, #12
 8001b00:	e70d      	b.n	800191e <__aeabi_dsub+0x146>
 8001b02:	0020      	movs	r0, r4
 8001b04:	f000 faa4 	bl	8002050 <__clzsi2>
 8001b08:	0001      	movs	r1, r0
 8001b0a:	3118      	adds	r1, #24
 8001b0c:	291f      	cmp	r1, #31
 8001b0e:	dc00      	bgt.n	8001b12 <__aeabi_dsub+0x33a>
 8001b10:	e6c4      	b.n	800189c <__aeabi_dsub+0xc4>
 8001b12:	3808      	subs	r0, #8
 8001b14:	4084      	lsls	r4, r0
 8001b16:	4643      	mov	r3, r8
 8001b18:	0020      	movs	r0, r4
 8001b1a:	2400      	movs	r4, #0
 8001b1c:	4588      	cmp	r8, r1
 8001b1e:	dc00      	bgt.n	8001b22 <__aeabi_dsub+0x34a>
 8001b20:	e6c8      	b.n	80018b4 <__aeabi_dsub+0xdc>
 8001b22:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <__aeabi_dsub+0x35c>)
 8001b24:	1a5b      	subs	r3, r3, r1
 8001b26:	4010      	ands	r0, r2
 8001b28:	4698      	mov	r8, r3
 8001b2a:	4681      	mov	r9, r0
 8001b2c:	e6d6      	b.n	80018dc <__aeabi_dsub+0x104>
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	000007ff 	.word	0x000007ff
 8001b34:	ff7fffff 	.word	0xff7fffff
 8001b38:	fffff801 	.word	0xfffff801
 8001b3c:	000007fe 	.word	0x000007fe
 8001b40:	430f      	orrs	r7, r1
 8001b42:	1e7a      	subs	r2, r7, #1
 8001b44:	4197      	sbcs	r7, r2
 8001b46:	e691      	b.n	800186c <__aeabi_dsub+0x94>
 8001b48:	4661      	mov	r1, ip
 8001b4a:	08db      	lsrs	r3, r3, #3
 8001b4c:	0749      	lsls	r1, r1, #29
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	4661      	mov	r1, ip
 8001b52:	08cc      	lsrs	r4, r1, #3
 8001b54:	e7b8      	b.n	8001ac8 <__aeabi_dsub+0x2f0>
 8001b56:	4640      	mov	r0, r8
 8001b58:	4cd3      	ldr	r4, [pc, #844]	; (8001ea8 <__aeabi_dsub+0x6d0>)
 8001b5a:	3001      	adds	r0, #1
 8001b5c:	4220      	tst	r0, r4
 8001b5e:	d000      	beq.n	8001b62 <__aeabi_dsub+0x38a>
 8001b60:	e0a2      	b.n	8001ca8 <__aeabi_dsub+0x4d0>
 8001b62:	4640      	mov	r0, r8
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d000      	beq.n	8001b6a <__aeabi_dsub+0x392>
 8001b68:	e101      	b.n	8001d6e <__aeabi_dsub+0x596>
 8001b6a:	4660      	mov	r0, ip
 8001b6c:	4318      	orrs	r0, r3
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dsub+0x39a>
 8001b70:	e15e      	b.n	8001e30 <__aeabi_dsub+0x658>
 8001b72:	0008      	movs	r0, r1
 8001b74:	4338      	orrs	r0, r7
 8001b76:	d000      	beq.n	8001b7a <__aeabi_dsub+0x3a2>
 8001b78:	e15f      	b.n	8001e3a <__aeabi_dsub+0x662>
 8001b7a:	4661      	mov	r1, ip
 8001b7c:	08db      	lsrs	r3, r3, #3
 8001b7e:	0749      	lsls	r1, r1, #29
 8001b80:	430b      	orrs	r3, r1
 8001b82:	4661      	mov	r1, ip
 8001b84:	08cc      	lsrs	r4, r1, #3
 8001b86:	e7a2      	b.n	8001ace <__aeabi_dsub+0x2f6>
 8001b88:	4dc8      	ldr	r5, [pc, #800]	; (8001eac <__aeabi_dsub+0x6d4>)
 8001b8a:	42a8      	cmp	r0, r5
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x3b8>
 8001b8e:	e0cf      	b.n	8001d30 <__aeabi_dsub+0x558>
 8001b90:	2580      	movs	r5, #128	; 0x80
 8001b92:	4664      	mov	r4, ip
 8001b94:	042d      	lsls	r5, r5, #16
 8001b96:	432c      	orrs	r4, r5
 8001b98:	46a4      	mov	ip, r4
 8001b9a:	2a38      	cmp	r2, #56	; 0x38
 8001b9c:	dc56      	bgt.n	8001c4c <__aeabi_dsub+0x474>
 8001b9e:	2a1f      	cmp	r2, #31
 8001ba0:	dd00      	ble.n	8001ba4 <__aeabi_dsub+0x3cc>
 8001ba2:	e0d1      	b.n	8001d48 <__aeabi_dsub+0x570>
 8001ba4:	2520      	movs	r5, #32
 8001ba6:	001e      	movs	r6, r3
 8001ba8:	1aad      	subs	r5, r5, r2
 8001baa:	4664      	mov	r4, ip
 8001bac:	40ab      	lsls	r3, r5
 8001bae:	40ac      	lsls	r4, r5
 8001bb0:	40d6      	lsrs	r6, r2
 8001bb2:	1e5d      	subs	r5, r3, #1
 8001bb4:	41ab      	sbcs	r3, r5
 8001bb6:	4334      	orrs	r4, r6
 8001bb8:	4323      	orrs	r3, r4
 8001bba:	4664      	mov	r4, ip
 8001bbc:	40d4      	lsrs	r4, r2
 8001bbe:	1b09      	subs	r1, r1, r4
 8001bc0:	e049      	b.n	8001c56 <__aeabi_dsub+0x47e>
 8001bc2:	4660      	mov	r0, ip
 8001bc4:	1bdc      	subs	r4, r3, r7
 8001bc6:	1a46      	subs	r6, r0, r1
 8001bc8:	42a3      	cmp	r3, r4
 8001bca:	4180      	sbcs	r0, r0
 8001bcc:	4240      	negs	r0, r0
 8001bce:	4681      	mov	r9, r0
 8001bd0:	0030      	movs	r0, r6
 8001bd2:	464e      	mov	r6, r9
 8001bd4:	1b80      	subs	r0, r0, r6
 8001bd6:	4681      	mov	r9, r0
 8001bd8:	0200      	lsls	r0, r0, #8
 8001bda:	d476      	bmi.n	8001cca <__aeabi_dsub+0x4f2>
 8001bdc:	464b      	mov	r3, r9
 8001bde:	4323      	orrs	r3, r4
 8001be0:	d000      	beq.n	8001be4 <__aeabi_dsub+0x40c>
 8001be2:	e652      	b.n	800188a <__aeabi_dsub+0xb2>
 8001be4:	2400      	movs	r4, #0
 8001be6:	2500      	movs	r5, #0
 8001be8:	e771      	b.n	8001ace <__aeabi_dsub+0x2f6>
 8001bea:	4339      	orrs	r1, r7
 8001bec:	000c      	movs	r4, r1
 8001bee:	1e62      	subs	r2, r4, #1
 8001bf0:	4194      	sbcs	r4, r2
 8001bf2:	18e4      	adds	r4, r4, r3
 8001bf4:	429c      	cmp	r4, r3
 8001bf6:	419b      	sbcs	r3, r3
 8001bf8:	425b      	negs	r3, r3
 8001bfa:	4463      	add	r3, ip
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	464b      	mov	r3, r9
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	d400      	bmi.n	8001c06 <__aeabi_dsub+0x42e>
 8001c04:	e756      	b.n	8001ab4 <__aeabi_dsub+0x2dc>
 8001c06:	2301      	movs	r3, #1
 8001c08:	469c      	mov	ip, r3
 8001c0a:	4ba8      	ldr	r3, [pc, #672]	; (8001eac <__aeabi_dsub+0x6d4>)
 8001c0c:	44e0      	add	r8, ip
 8001c0e:	4598      	cmp	r8, r3
 8001c10:	d038      	beq.n	8001c84 <__aeabi_dsub+0x4ac>
 8001c12:	464b      	mov	r3, r9
 8001c14:	48a6      	ldr	r0, [pc, #664]	; (8001eb0 <__aeabi_dsub+0x6d8>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	4003      	ands	r3, r0
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	0863      	lsrs	r3, r4, #1
 8001c1e:	4014      	ands	r4, r2
 8001c20:	431c      	orrs	r4, r3
 8001c22:	07c3      	lsls	r3, r0, #31
 8001c24:	431c      	orrs	r4, r3
 8001c26:	0843      	lsrs	r3, r0, #1
 8001c28:	4699      	mov	r9, r3
 8001c2a:	e657      	b.n	80018dc <__aeabi_dsub+0x104>
 8001c2c:	0010      	movs	r0, r2
 8001c2e:	000e      	movs	r6, r1
 8001c30:	3820      	subs	r0, #32
 8001c32:	40c6      	lsrs	r6, r0
 8001c34:	2a20      	cmp	r2, #32
 8001c36:	d004      	beq.n	8001c42 <__aeabi_dsub+0x46a>
 8001c38:	2040      	movs	r0, #64	; 0x40
 8001c3a:	1a82      	subs	r2, r0, r2
 8001c3c:	4091      	lsls	r1, r2
 8001c3e:	430f      	orrs	r7, r1
 8001c40:	46b9      	mov	r9, r7
 8001c42:	464f      	mov	r7, r9
 8001c44:	1e7a      	subs	r2, r7, #1
 8001c46:	4197      	sbcs	r7, r2
 8001c48:	4337      	orrs	r7, r6
 8001c4a:	e60f      	b.n	800186c <__aeabi_dsub+0x94>
 8001c4c:	4662      	mov	r2, ip
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	0013      	movs	r3, r2
 8001c52:	1e5a      	subs	r2, r3, #1
 8001c54:	4193      	sbcs	r3, r2
 8001c56:	1afc      	subs	r4, r7, r3
 8001c58:	42a7      	cmp	r7, r4
 8001c5a:	41bf      	sbcs	r7, r7
 8001c5c:	427f      	negs	r7, r7
 8001c5e:	1bcb      	subs	r3, r1, r7
 8001c60:	4699      	mov	r9, r3
 8001c62:	465d      	mov	r5, fp
 8001c64:	4680      	mov	r8, r0
 8001c66:	e608      	b.n	800187a <__aeabi_dsub+0xa2>
 8001c68:	4666      	mov	r6, ip
 8001c6a:	431e      	orrs	r6, r3
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x498>
 8001c6e:	e0be      	b.n	8001dee <__aeabi_dsub+0x616>
 8001c70:	1e56      	subs	r6, r2, #1
 8001c72:	2a01      	cmp	r2, #1
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x4a0>
 8001c76:	e109      	b.n	8001e8c <__aeabi_dsub+0x6b4>
 8001c78:	4c8c      	ldr	r4, [pc, #560]	; (8001eac <__aeabi_dsub+0x6d4>)
 8001c7a:	42a2      	cmp	r2, r4
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_dsub+0x4a8>
 8001c7e:	e119      	b.n	8001eb4 <__aeabi_dsub+0x6dc>
 8001c80:	0032      	movs	r2, r6
 8001c82:	e6c1      	b.n	8001a08 <__aeabi_dsub+0x230>
 8001c84:	4642      	mov	r2, r8
 8001c86:	2400      	movs	r4, #0
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e648      	b.n	800191e <__aeabi_dsub+0x146>
 8001c8c:	2020      	movs	r0, #32
 8001c8e:	000c      	movs	r4, r1
 8001c90:	1a80      	subs	r0, r0, r2
 8001c92:	003e      	movs	r6, r7
 8001c94:	4087      	lsls	r7, r0
 8001c96:	4084      	lsls	r4, r0
 8001c98:	40d6      	lsrs	r6, r2
 8001c9a:	1e78      	subs	r0, r7, #1
 8001c9c:	4187      	sbcs	r7, r0
 8001c9e:	40d1      	lsrs	r1, r2
 8001ca0:	4334      	orrs	r4, r6
 8001ca2:	433c      	orrs	r4, r7
 8001ca4:	448c      	add	ip, r1
 8001ca6:	e7a4      	b.n	8001bf2 <__aeabi_dsub+0x41a>
 8001ca8:	4a80      	ldr	r2, [pc, #512]	; (8001eac <__aeabi_dsub+0x6d4>)
 8001caa:	4290      	cmp	r0, r2
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_dsub+0x4d8>
 8001cae:	e0e9      	b.n	8001e84 <__aeabi_dsub+0x6ac>
 8001cb0:	19df      	adds	r7, r3, r7
 8001cb2:	429f      	cmp	r7, r3
 8001cb4:	419b      	sbcs	r3, r3
 8001cb6:	4461      	add	r1, ip
 8001cb8:	425b      	negs	r3, r3
 8001cba:	18c9      	adds	r1, r1, r3
 8001cbc:	07cc      	lsls	r4, r1, #31
 8001cbe:	087f      	lsrs	r7, r7, #1
 8001cc0:	084b      	lsrs	r3, r1, #1
 8001cc2:	4699      	mov	r9, r3
 8001cc4:	4680      	mov	r8, r0
 8001cc6:	433c      	orrs	r4, r7
 8001cc8:	e6f4      	b.n	8001ab4 <__aeabi_dsub+0x2dc>
 8001cca:	1afc      	subs	r4, r7, r3
 8001ccc:	42a7      	cmp	r7, r4
 8001cce:	41bf      	sbcs	r7, r7
 8001cd0:	4663      	mov	r3, ip
 8001cd2:	427f      	negs	r7, r7
 8001cd4:	1ac9      	subs	r1, r1, r3
 8001cd6:	1bcb      	subs	r3, r1, r7
 8001cd8:	4699      	mov	r9, r3
 8001cda:	465d      	mov	r5, fp
 8001cdc:	e5d5      	b.n	800188a <__aeabi_dsub+0xb2>
 8001cde:	08ff      	lsrs	r7, r7, #3
 8001ce0:	074b      	lsls	r3, r1, #29
 8001ce2:	465d      	mov	r5, fp
 8001ce4:	433b      	orrs	r3, r7
 8001ce6:	08cc      	lsrs	r4, r1, #3
 8001ce8:	e6ee      	b.n	8001ac8 <__aeabi_dsub+0x2f0>
 8001cea:	4662      	mov	r2, ip
 8001cec:	431a      	orrs	r2, r3
 8001cee:	d000      	beq.n	8001cf2 <__aeabi_dsub+0x51a>
 8001cf0:	e082      	b.n	8001df8 <__aeabi_dsub+0x620>
 8001cf2:	000b      	movs	r3, r1
 8001cf4:	433b      	orrs	r3, r7
 8001cf6:	d11b      	bne.n	8001d30 <__aeabi_dsub+0x558>
 8001cf8:	2480      	movs	r4, #128	; 0x80
 8001cfa:	2500      	movs	r5, #0
 8001cfc:	0324      	lsls	r4, r4, #12
 8001cfe:	e6f9      	b.n	8001af4 <__aeabi_dsub+0x31c>
 8001d00:	19dc      	adds	r4, r3, r7
 8001d02:	429c      	cmp	r4, r3
 8001d04:	419b      	sbcs	r3, r3
 8001d06:	4461      	add	r1, ip
 8001d08:	4689      	mov	r9, r1
 8001d0a:	425b      	negs	r3, r3
 8001d0c:	4499      	add	r9, r3
 8001d0e:	464b      	mov	r3, r9
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	d444      	bmi.n	8001d9e <__aeabi_dsub+0x5c6>
 8001d14:	2301      	movs	r3, #1
 8001d16:	4698      	mov	r8, r3
 8001d18:	e6cc      	b.n	8001ab4 <__aeabi_dsub+0x2dc>
 8001d1a:	1bdc      	subs	r4, r3, r7
 8001d1c:	4662      	mov	r2, ip
 8001d1e:	42a3      	cmp	r3, r4
 8001d20:	419b      	sbcs	r3, r3
 8001d22:	1a51      	subs	r1, r2, r1
 8001d24:	425b      	negs	r3, r3
 8001d26:	1acb      	subs	r3, r1, r3
 8001d28:	4699      	mov	r9, r3
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	4698      	mov	r8, r3
 8001d2e:	e5a4      	b.n	800187a <__aeabi_dsub+0xa2>
 8001d30:	08ff      	lsrs	r7, r7, #3
 8001d32:	074b      	lsls	r3, r1, #29
 8001d34:	465d      	mov	r5, fp
 8001d36:	433b      	orrs	r3, r7
 8001d38:	08cc      	lsrs	r4, r1, #3
 8001d3a:	e6d7      	b.n	8001aec <__aeabi_dsub+0x314>
 8001d3c:	4662      	mov	r2, ip
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	0014      	movs	r4, r2
 8001d42:	1e63      	subs	r3, r4, #1
 8001d44:	419c      	sbcs	r4, r3
 8001d46:	e679      	b.n	8001a3c <__aeabi_dsub+0x264>
 8001d48:	0015      	movs	r5, r2
 8001d4a:	4664      	mov	r4, ip
 8001d4c:	3d20      	subs	r5, #32
 8001d4e:	40ec      	lsrs	r4, r5
 8001d50:	46a0      	mov	r8, r4
 8001d52:	2a20      	cmp	r2, #32
 8001d54:	d005      	beq.n	8001d62 <__aeabi_dsub+0x58a>
 8001d56:	2540      	movs	r5, #64	; 0x40
 8001d58:	4664      	mov	r4, ip
 8001d5a:	1aaa      	subs	r2, r5, r2
 8001d5c:	4094      	lsls	r4, r2
 8001d5e:	4323      	orrs	r3, r4
 8001d60:	469a      	mov	sl, r3
 8001d62:	4654      	mov	r4, sl
 8001d64:	1e63      	subs	r3, r4, #1
 8001d66:	419c      	sbcs	r4, r3
 8001d68:	4643      	mov	r3, r8
 8001d6a:	4323      	orrs	r3, r4
 8001d6c:	e773      	b.n	8001c56 <__aeabi_dsub+0x47e>
 8001d6e:	4662      	mov	r2, ip
 8001d70:	431a      	orrs	r2, r3
 8001d72:	d023      	beq.n	8001dbc <__aeabi_dsub+0x5e4>
 8001d74:	000a      	movs	r2, r1
 8001d76:	433a      	orrs	r2, r7
 8001d78:	d000      	beq.n	8001d7c <__aeabi_dsub+0x5a4>
 8001d7a:	e0a0      	b.n	8001ebe <__aeabi_dsub+0x6e6>
 8001d7c:	4662      	mov	r2, ip
 8001d7e:	08db      	lsrs	r3, r3, #3
 8001d80:	0752      	lsls	r2, r2, #29
 8001d82:	4313      	orrs	r3, r2
 8001d84:	4662      	mov	r2, ip
 8001d86:	08d4      	lsrs	r4, r2, #3
 8001d88:	e6b0      	b.n	8001aec <__aeabi_dsub+0x314>
 8001d8a:	000b      	movs	r3, r1
 8001d8c:	433b      	orrs	r3, r7
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dsub+0x5ba>
 8001d90:	e728      	b.n	8001be4 <__aeabi_dsub+0x40c>
 8001d92:	08ff      	lsrs	r7, r7, #3
 8001d94:	074b      	lsls	r3, r1, #29
 8001d96:	465d      	mov	r5, fp
 8001d98:	433b      	orrs	r3, r7
 8001d9a:	08cc      	lsrs	r4, r1, #3
 8001d9c:	e697      	b.n	8001ace <__aeabi_dsub+0x2f6>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	4698      	mov	r8, r3
 8001da2:	e736      	b.n	8001c12 <__aeabi_dsub+0x43a>
 8001da4:	1afc      	subs	r4, r7, r3
 8001da6:	42a7      	cmp	r7, r4
 8001da8:	41bf      	sbcs	r7, r7
 8001daa:	4663      	mov	r3, ip
 8001dac:	427f      	negs	r7, r7
 8001dae:	1ac9      	subs	r1, r1, r3
 8001db0:	1bcb      	subs	r3, r1, r7
 8001db2:	4699      	mov	r9, r3
 8001db4:	2301      	movs	r3, #1
 8001db6:	465d      	mov	r5, fp
 8001db8:	4698      	mov	r8, r3
 8001dba:	e55e      	b.n	800187a <__aeabi_dsub+0xa2>
 8001dbc:	074b      	lsls	r3, r1, #29
 8001dbe:	08ff      	lsrs	r7, r7, #3
 8001dc0:	433b      	orrs	r3, r7
 8001dc2:	08cc      	lsrs	r4, r1, #3
 8001dc4:	e692      	b.n	8001aec <__aeabi_dsub+0x314>
 8001dc6:	1bdc      	subs	r4, r3, r7
 8001dc8:	4660      	mov	r0, ip
 8001dca:	42a3      	cmp	r3, r4
 8001dcc:	41b6      	sbcs	r6, r6
 8001dce:	1a40      	subs	r0, r0, r1
 8001dd0:	4276      	negs	r6, r6
 8001dd2:	1b80      	subs	r0, r0, r6
 8001dd4:	4681      	mov	r9, r0
 8001dd6:	0200      	lsls	r0, r0, #8
 8001dd8:	d560      	bpl.n	8001e9c <__aeabi_dsub+0x6c4>
 8001dda:	1afc      	subs	r4, r7, r3
 8001ddc:	42a7      	cmp	r7, r4
 8001dde:	41bf      	sbcs	r7, r7
 8001de0:	4663      	mov	r3, ip
 8001de2:	427f      	negs	r7, r7
 8001de4:	1ac9      	subs	r1, r1, r3
 8001de6:	1bcb      	subs	r3, r1, r7
 8001de8:	4699      	mov	r9, r3
 8001dea:	465d      	mov	r5, fp
 8001dec:	e576      	b.n	80018dc <__aeabi_dsub+0x104>
 8001dee:	08ff      	lsrs	r7, r7, #3
 8001df0:	074b      	lsls	r3, r1, #29
 8001df2:	433b      	orrs	r3, r7
 8001df4:	08cc      	lsrs	r4, r1, #3
 8001df6:	e667      	b.n	8001ac8 <__aeabi_dsub+0x2f0>
 8001df8:	000a      	movs	r2, r1
 8001dfa:	08db      	lsrs	r3, r3, #3
 8001dfc:	433a      	orrs	r2, r7
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_dsub+0x62a>
 8001e00:	e66f      	b.n	8001ae2 <__aeabi_dsub+0x30a>
 8001e02:	4662      	mov	r2, ip
 8001e04:	0752      	lsls	r2, r2, #29
 8001e06:	4313      	orrs	r3, r2
 8001e08:	4662      	mov	r2, ip
 8001e0a:	08d4      	lsrs	r4, r2, #3
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	0312      	lsls	r2, r2, #12
 8001e10:	4214      	tst	r4, r2
 8001e12:	d007      	beq.n	8001e24 <__aeabi_dsub+0x64c>
 8001e14:	08c8      	lsrs	r0, r1, #3
 8001e16:	4210      	tst	r0, r2
 8001e18:	d104      	bne.n	8001e24 <__aeabi_dsub+0x64c>
 8001e1a:	465d      	mov	r5, fp
 8001e1c:	0004      	movs	r4, r0
 8001e1e:	08fb      	lsrs	r3, r7, #3
 8001e20:	0749      	lsls	r1, r1, #29
 8001e22:	430b      	orrs	r3, r1
 8001e24:	0f5a      	lsrs	r2, r3, #29
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	0752      	lsls	r2, r2, #29
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	e65d      	b.n	8001aec <__aeabi_dsub+0x314>
 8001e30:	074b      	lsls	r3, r1, #29
 8001e32:	08ff      	lsrs	r7, r7, #3
 8001e34:	433b      	orrs	r3, r7
 8001e36:	08cc      	lsrs	r4, r1, #3
 8001e38:	e649      	b.n	8001ace <__aeabi_dsub+0x2f6>
 8001e3a:	19dc      	adds	r4, r3, r7
 8001e3c:	429c      	cmp	r4, r3
 8001e3e:	419b      	sbcs	r3, r3
 8001e40:	4461      	add	r1, ip
 8001e42:	4689      	mov	r9, r1
 8001e44:	425b      	negs	r3, r3
 8001e46:	4499      	add	r9, r3
 8001e48:	464b      	mov	r3, r9
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	d400      	bmi.n	8001e50 <__aeabi_dsub+0x678>
 8001e4e:	e631      	b.n	8001ab4 <__aeabi_dsub+0x2dc>
 8001e50:	464a      	mov	r2, r9
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <__aeabi_dsub+0x6d8>)
 8001e54:	401a      	ands	r2, r3
 8001e56:	2301      	movs	r3, #1
 8001e58:	4691      	mov	r9, r2
 8001e5a:	4698      	mov	r8, r3
 8001e5c:	e62a      	b.n	8001ab4 <__aeabi_dsub+0x2dc>
 8001e5e:	0016      	movs	r6, r2
 8001e60:	4664      	mov	r4, ip
 8001e62:	3e20      	subs	r6, #32
 8001e64:	40f4      	lsrs	r4, r6
 8001e66:	46a0      	mov	r8, r4
 8001e68:	2a20      	cmp	r2, #32
 8001e6a:	d005      	beq.n	8001e78 <__aeabi_dsub+0x6a0>
 8001e6c:	2640      	movs	r6, #64	; 0x40
 8001e6e:	4664      	mov	r4, ip
 8001e70:	1ab2      	subs	r2, r6, r2
 8001e72:	4094      	lsls	r4, r2
 8001e74:	4323      	orrs	r3, r4
 8001e76:	469a      	mov	sl, r3
 8001e78:	4654      	mov	r4, sl
 8001e7a:	1e63      	subs	r3, r4, #1
 8001e7c:	419c      	sbcs	r4, r3
 8001e7e:	4643      	mov	r3, r8
 8001e80:	431c      	orrs	r4, r3
 8001e82:	e5db      	b.n	8001a3c <__aeabi_dsub+0x264>
 8001e84:	0002      	movs	r2, r0
 8001e86:	2400      	movs	r4, #0
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e548      	b.n	800191e <__aeabi_dsub+0x146>
 8001e8c:	19dc      	adds	r4, r3, r7
 8001e8e:	42bc      	cmp	r4, r7
 8001e90:	41bf      	sbcs	r7, r7
 8001e92:	4461      	add	r1, ip
 8001e94:	4689      	mov	r9, r1
 8001e96:	427f      	negs	r7, r7
 8001e98:	44b9      	add	r9, r7
 8001e9a:	e738      	b.n	8001d0e <__aeabi_dsub+0x536>
 8001e9c:	464b      	mov	r3, r9
 8001e9e:	4323      	orrs	r3, r4
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x6cc>
 8001ea2:	e69f      	b.n	8001be4 <__aeabi_dsub+0x40c>
 8001ea4:	e606      	b.n	8001ab4 <__aeabi_dsub+0x2dc>
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	000007fe 	.word	0x000007fe
 8001eac:	000007ff 	.word	0x000007ff
 8001eb0:	ff7fffff 	.word	0xff7fffff
 8001eb4:	08ff      	lsrs	r7, r7, #3
 8001eb6:	074b      	lsls	r3, r1, #29
 8001eb8:	433b      	orrs	r3, r7
 8001eba:	08cc      	lsrs	r4, r1, #3
 8001ebc:	e616      	b.n	8001aec <__aeabi_dsub+0x314>
 8001ebe:	4662      	mov	r2, ip
 8001ec0:	08db      	lsrs	r3, r3, #3
 8001ec2:	0752      	lsls	r2, r2, #29
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	4662      	mov	r2, ip
 8001ec8:	08d4      	lsrs	r4, r2, #3
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	0312      	lsls	r2, r2, #12
 8001ece:	4214      	tst	r4, r2
 8001ed0:	d007      	beq.n	8001ee2 <__aeabi_dsub+0x70a>
 8001ed2:	08c8      	lsrs	r0, r1, #3
 8001ed4:	4210      	tst	r0, r2
 8001ed6:	d104      	bne.n	8001ee2 <__aeabi_dsub+0x70a>
 8001ed8:	465d      	mov	r5, fp
 8001eda:	0004      	movs	r4, r0
 8001edc:	08fb      	lsrs	r3, r7, #3
 8001ede:	0749      	lsls	r1, r1, #29
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	0f5a      	lsrs	r2, r3, #29
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	0752      	lsls	r2, r2, #29
 8001ee8:	08db      	lsrs	r3, r3, #3
 8001eea:	4313      	orrs	r3, r2
 8001eec:	e5fe      	b.n	8001aec <__aeabi_dsub+0x314>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	4a01      	ldr	r2, [pc, #4]	; (8001ef8 <__aeabi_dsub+0x720>)
 8001ef2:	001c      	movs	r4, r3
 8001ef4:	e513      	b.n	800191e <__aeabi_dsub+0x146>
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	000007ff 	.word	0x000007ff

08001efc <__aeabi_dcmpun>:
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	0005      	movs	r5, r0
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <__aeabi_dcmpun+0x38>)
 8001f02:	031c      	lsls	r4, r3, #12
 8001f04:	0016      	movs	r6, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	030a      	lsls	r2, r1, #12
 8001f0a:	0049      	lsls	r1, r1, #1
 8001f0c:	0b12      	lsrs	r2, r2, #12
 8001f0e:	0d49      	lsrs	r1, r1, #21
 8001f10:	0b24      	lsrs	r4, r4, #12
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	4281      	cmp	r1, r0
 8001f16:	d008      	beq.n	8001f2a <__aeabi_dcmpun+0x2e>
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <__aeabi_dcmpun+0x38>)
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d103      	bne.n	8001f28 <__aeabi_dcmpun+0x2c>
 8001f20:	0020      	movs	r0, r4
 8001f22:	4330      	orrs	r0, r6
 8001f24:	1e43      	subs	r3, r0, #1
 8001f26:	4198      	sbcs	r0, r3
 8001f28:	bd70      	pop	{r4, r5, r6, pc}
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	432a      	orrs	r2, r5
 8001f2e:	d1fb      	bne.n	8001f28 <__aeabi_dcmpun+0x2c>
 8001f30:	e7f2      	b.n	8001f18 <__aeabi_dcmpun+0x1c>
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	000007ff 	.word	0x000007ff

08001f38 <__aeabi_d2iz>:
 8001f38:	000a      	movs	r2, r1
 8001f3a:	b530      	push	{r4, r5, lr}
 8001f3c:	4c13      	ldr	r4, [pc, #76]	; (8001f8c <__aeabi_d2iz+0x54>)
 8001f3e:	0053      	lsls	r3, r2, #1
 8001f40:	0309      	lsls	r1, r1, #12
 8001f42:	0005      	movs	r5, r0
 8001f44:	0b09      	lsrs	r1, r1, #12
 8001f46:	2000      	movs	r0, #0
 8001f48:	0d5b      	lsrs	r3, r3, #21
 8001f4a:	0fd2      	lsrs	r2, r2, #31
 8001f4c:	42a3      	cmp	r3, r4
 8001f4e:	dd04      	ble.n	8001f5a <__aeabi_d2iz+0x22>
 8001f50:	480f      	ldr	r0, [pc, #60]	; (8001f90 <__aeabi_d2iz+0x58>)
 8001f52:	4283      	cmp	r3, r0
 8001f54:	dd02      	ble.n	8001f5c <__aeabi_d2iz+0x24>
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <__aeabi_d2iz+0x5c>)
 8001f58:	18d0      	adds	r0, r2, r3
 8001f5a:	bd30      	pop	{r4, r5, pc}
 8001f5c:	2080      	movs	r0, #128	; 0x80
 8001f5e:	0340      	lsls	r0, r0, #13
 8001f60:	4301      	orrs	r1, r0
 8001f62:	480d      	ldr	r0, [pc, #52]	; (8001f98 <__aeabi_d2iz+0x60>)
 8001f64:	1ac0      	subs	r0, r0, r3
 8001f66:	281f      	cmp	r0, #31
 8001f68:	dd08      	ble.n	8001f7c <__aeabi_d2iz+0x44>
 8001f6a:	480c      	ldr	r0, [pc, #48]	; (8001f9c <__aeabi_d2iz+0x64>)
 8001f6c:	1ac3      	subs	r3, r0, r3
 8001f6e:	40d9      	lsrs	r1, r3
 8001f70:	000b      	movs	r3, r1
 8001f72:	4258      	negs	r0, r3
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	d1f0      	bne.n	8001f5a <__aeabi_d2iz+0x22>
 8001f78:	0018      	movs	r0, r3
 8001f7a:	e7ee      	b.n	8001f5a <__aeabi_d2iz+0x22>
 8001f7c:	4c08      	ldr	r4, [pc, #32]	; (8001fa0 <__aeabi_d2iz+0x68>)
 8001f7e:	40c5      	lsrs	r5, r0
 8001f80:	46a4      	mov	ip, r4
 8001f82:	4463      	add	r3, ip
 8001f84:	4099      	lsls	r1, r3
 8001f86:	000b      	movs	r3, r1
 8001f88:	432b      	orrs	r3, r5
 8001f8a:	e7f2      	b.n	8001f72 <__aeabi_d2iz+0x3a>
 8001f8c:	000003fe 	.word	0x000003fe
 8001f90:	0000041d 	.word	0x0000041d
 8001f94:	7fffffff 	.word	0x7fffffff
 8001f98:	00000433 	.word	0x00000433
 8001f9c:	00000413 	.word	0x00000413
 8001fa0:	fffffbed 	.word	0xfffffbed

08001fa4 <__aeabi_i2d>:
 8001fa4:	b570      	push	{r4, r5, r6, lr}
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	d016      	beq.n	8001fd8 <__aeabi_i2d+0x34>
 8001faa:	17c3      	asrs	r3, r0, #31
 8001fac:	18c5      	adds	r5, r0, r3
 8001fae:	405d      	eors	r5, r3
 8001fb0:	0fc4      	lsrs	r4, r0, #31
 8001fb2:	0028      	movs	r0, r5
 8001fb4:	f000 f84c 	bl	8002050 <__clzsi2>
 8001fb8:	4a11      	ldr	r2, [pc, #68]	; (8002000 <__aeabi_i2d+0x5c>)
 8001fba:	1a12      	subs	r2, r2, r0
 8001fbc:	280a      	cmp	r0, #10
 8001fbe:	dc16      	bgt.n	8001fee <__aeabi_i2d+0x4a>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	002e      	movs	r6, r5
 8001fc4:	3315      	adds	r3, #21
 8001fc6:	409e      	lsls	r6, r3
 8001fc8:	230b      	movs	r3, #11
 8001fca:	1a18      	subs	r0, r3, r0
 8001fcc:	40c5      	lsrs	r5, r0
 8001fce:	0552      	lsls	r2, r2, #21
 8001fd0:	032d      	lsls	r5, r5, #12
 8001fd2:	0b2d      	lsrs	r5, r5, #12
 8001fd4:	0d53      	lsrs	r3, r2, #21
 8001fd6:	e003      	b.n	8001fe0 <__aeabi_i2d+0x3c>
 8001fd8:	2400      	movs	r4, #0
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2500      	movs	r5, #0
 8001fde:	2600      	movs	r6, #0
 8001fe0:	051b      	lsls	r3, r3, #20
 8001fe2:	432b      	orrs	r3, r5
 8001fe4:	07e4      	lsls	r4, r4, #31
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	0030      	movs	r0, r6
 8001fea:	0019      	movs	r1, r3
 8001fec:	bd70      	pop	{r4, r5, r6, pc}
 8001fee:	380b      	subs	r0, #11
 8001ff0:	4085      	lsls	r5, r0
 8001ff2:	0552      	lsls	r2, r2, #21
 8001ff4:	032d      	lsls	r5, r5, #12
 8001ff6:	2600      	movs	r6, #0
 8001ff8:	0b2d      	lsrs	r5, r5, #12
 8001ffa:	0d53      	lsrs	r3, r2, #21
 8001ffc:	e7f0      	b.n	8001fe0 <__aeabi_i2d+0x3c>
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	0000041e 	.word	0x0000041e

08002004 <__aeabi_ui2d>:
 8002004:	b510      	push	{r4, lr}
 8002006:	1e04      	subs	r4, r0, #0
 8002008:	d010      	beq.n	800202c <__aeabi_ui2d+0x28>
 800200a:	f000 f821 	bl	8002050 <__clzsi2>
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <__aeabi_ui2d+0x48>)
 8002010:	1a1b      	subs	r3, r3, r0
 8002012:	280a      	cmp	r0, #10
 8002014:	dc11      	bgt.n	800203a <__aeabi_ui2d+0x36>
 8002016:	220b      	movs	r2, #11
 8002018:	0021      	movs	r1, r4
 800201a:	1a12      	subs	r2, r2, r0
 800201c:	40d1      	lsrs	r1, r2
 800201e:	3015      	adds	r0, #21
 8002020:	030a      	lsls	r2, r1, #12
 8002022:	055b      	lsls	r3, r3, #21
 8002024:	4084      	lsls	r4, r0
 8002026:	0b12      	lsrs	r2, r2, #12
 8002028:	0d5b      	lsrs	r3, r3, #21
 800202a:	e001      	b.n	8002030 <__aeabi_ui2d+0x2c>
 800202c:	2300      	movs	r3, #0
 800202e:	2200      	movs	r2, #0
 8002030:	051b      	lsls	r3, r3, #20
 8002032:	4313      	orrs	r3, r2
 8002034:	0020      	movs	r0, r4
 8002036:	0019      	movs	r1, r3
 8002038:	bd10      	pop	{r4, pc}
 800203a:	0022      	movs	r2, r4
 800203c:	380b      	subs	r0, #11
 800203e:	4082      	lsls	r2, r0
 8002040:	055b      	lsls	r3, r3, #21
 8002042:	0312      	lsls	r2, r2, #12
 8002044:	2400      	movs	r4, #0
 8002046:	0b12      	lsrs	r2, r2, #12
 8002048:	0d5b      	lsrs	r3, r3, #21
 800204a:	e7f1      	b.n	8002030 <__aeabi_ui2d+0x2c>
 800204c:	0000041e 	.word	0x0000041e

08002050 <__clzsi2>:
 8002050:	211c      	movs	r1, #28
 8002052:	2301      	movs	r3, #1
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	4298      	cmp	r0, r3
 8002058:	d301      	bcc.n	800205e <__clzsi2+0xe>
 800205a:	0c00      	lsrs	r0, r0, #16
 800205c:	3910      	subs	r1, #16
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	4298      	cmp	r0, r3
 8002062:	d301      	bcc.n	8002068 <__clzsi2+0x18>
 8002064:	0a00      	lsrs	r0, r0, #8
 8002066:	3908      	subs	r1, #8
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	4298      	cmp	r0, r3
 800206c:	d301      	bcc.n	8002072 <__clzsi2+0x22>
 800206e:	0900      	lsrs	r0, r0, #4
 8002070:	3904      	subs	r1, #4
 8002072:	a202      	add	r2, pc, #8	; (adr r2, 800207c <__clzsi2+0x2c>)
 8002074:	5c10      	ldrb	r0, [r2, r0]
 8002076:	1840      	adds	r0, r0, r1
 8002078:	4770      	bx	lr
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	02020304 	.word	0x02020304
 8002080:	01010101 	.word	0x01010101
	...

0800208c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b08d      	sub	sp, #52	; 0x34
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002092:	f000 fc93 	bl	80029bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002096:	f000 f8a3 	bl	80021e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800209a:	f000 fa51 	bl	8002540 <MX_GPIO_Init>
  MX_DMA_Init();
 800209e:	f000 fa31 	bl	8002504 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80020a2:	f000 f9ff 	bl	80024a4 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80020a6:	f000 f8f5 	bl	8002294 <MX_ADC_Init>
  MX_TIM1_Init();
 80020aa:	f000 f94f 	bl	800234c <MX_TIM1_Init>
  MX_TIM2_Init();
 80020ae:	f000 f9a5 	bl	80023fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  double re = 1;
 80020b2:	2200      	movs	r2, #0
 80020b4:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <main+0x128>)
 80020b6:	623a      	str	r2, [r7, #32]
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  double img = sin(acos(re))*1000;
 80020ba:	6a3a      	ldr	r2, [r7, #32]
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	0010      	movs	r0, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	f004 f851 	bl	8006168 <acos>
 80020c6:	0002      	movs	r2, r0
 80020c8:	000b      	movs	r3, r1
 80020ca:	0010      	movs	r0, r2
 80020cc:	0019      	movs	r1, r3
 80020ce:	f004 f805 	bl	80060dc <sin>
 80020d2:	2200      	movs	r2, #0
 80020d4:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <main+0x12c>)
 80020d6:	f7ff f913 	bl	8001300 <__aeabi_dmul>
 80020da:	0002      	movs	r2, r0
 80020dc:	000b      	movs	r3, r1
 80020de:	61ba      	str	r2, [r7, #24]
 80020e0:	61fb      	str	r3, [r7, #28]
  uint32_t buffer=0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
  HAL_ADC_Start_DMA(&hadc, &buffer, 1);
 80020e6:	2310      	movs	r3, #16
 80020e8:	18f9      	adds	r1, r7, r3
 80020ea:	4b34      	ldr	r3, [pc, #208]	; (80021bc <main+0x130>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 fe08 	bl	8002d04 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <main+0x134>)
 80020f6:	0018      	movs	r0, r3
 80020f8:	f002 fb0e 	bl	8004718 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int out=0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if(flag_tim_1==1){
 8002100:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <main+0x138>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d139      	bne.n	800217c <main+0xf0>
		  static double z_1=0;
		  static double z =0;
		  z_1=z;
 8002108:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <main+0x13c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	492f      	ldr	r1, [pc, #188]	; (80021cc <main+0x140>)
 8002110:	600a      	str	r2, [r1, #0]
 8002112:	604b      	str	r3, [r1, #4]
		  z=(double)buffer;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	0018      	movs	r0, r3
 8002118:	f7ff ff74 	bl	8002004 <__aeabi_ui2d>
 800211c:	0002      	movs	r2, r0
 800211e:	000b      	movs	r3, r1
 8002120:	4929      	ldr	r1, [pc, #164]	; (80021c8 <main+0x13c>)
 8002122:	600a      	str	r2, [r1, #0]
 8002124:	604b      	str	r3, [r1, #4]
		  out=(z + z_1*(img-re))*100;
 8002126:	6a3a      	ldr	r2, [r7, #32]
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	69b8      	ldr	r0, [r7, #24]
 800212c:	69f9      	ldr	r1, [r7, #28]
 800212e:	f7ff fb53 	bl	80017d8 <__aeabi_dsub>
 8002132:	0002      	movs	r2, r0
 8002134:	000b      	movs	r3, r1
 8002136:	0010      	movs	r0, r2
 8002138:	0019      	movs	r1, r3
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <main+0x140>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f7ff f8de 	bl	8001300 <__aeabi_dmul>
 8002144:	0002      	movs	r2, r0
 8002146:	000b      	movs	r3, r1
 8002148:	0010      	movs	r0, r2
 800214a:	0019      	movs	r1, r3
 800214c:	4b1e      	ldr	r3, [pc, #120]	; (80021c8 <main+0x13c>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f7fe f997 	bl	8000484 <__aeabi_dadd>
 8002156:	0002      	movs	r2, r0
 8002158:	000b      	movs	r3, r1
 800215a:	0010      	movs	r0, r2
 800215c:	0019      	movs	r1, r3
 800215e:	2200      	movs	r2, #0
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <main+0x144>)
 8002162:	f7ff f8cd 	bl	8001300 <__aeabi_dmul>
 8002166:	0002      	movs	r2, r0
 8002168:	000b      	movs	r3, r1
 800216a:	0010      	movs	r0, r2
 800216c:	0019      	movs	r1, r3
 800216e:	f7ff fee3 	bl	8001f38 <__aeabi_d2iz>
 8002172:	0003      	movs	r3, r0
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
		  flag_tim_1=0;
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <main+0x138>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
	  }
	  if(flag_tim_2==1){
 800217c:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <main+0x148>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d1bb      	bne.n	80020fc <main+0x70>
		  	  char msg[10];
		  	  uint16_t size = snprintf(msg, 10, "%d\r\n",out);
 8002184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002186:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <main+0x14c>)
 8002188:	1d38      	adds	r0, r7, #4
 800218a:	210a      	movs	r1, #10
 800218c:	f003 fb28 	bl	80057e0 <sniprintf>
 8002190:	0002      	movs	r2, r0
 8002192:	2116      	movs	r1, #22
 8002194:	187b      	adds	r3, r7, r1
 8002196:	801a      	strh	r2, [r3, #0]
		  	  HAL_UART_Transmit(&huart2,(uint8_t*)msg,size,HAL_MAX_DELAY);
 8002198:	2301      	movs	r3, #1
 800219a:	425c      	negs	r4, r3
 800219c:	187b      	adds	r3, r7, r1
 800219e:	881a      	ldrh	r2, [r3, #0]
 80021a0:	1d39      	adds	r1, r7, #4
 80021a2:	480e      	ldr	r0, [pc, #56]	; (80021dc <main+0x150>)
 80021a4:	0023      	movs	r3, r4
 80021a6:	f002 fef7 	bl	8004f98 <HAL_UART_Transmit>
	  		  flag_tim_2=0;
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <main+0x148>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
  {
 80021b0:	e7a4      	b.n	80020fc <main+0x70>
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	3ff00000 	.word	0x3ff00000
 80021b8:	408f4000 	.word	0x408f4000
 80021bc:	2000008c 	.word	0x2000008c
 80021c0:	20000110 	.word	0x20000110
 80021c4:	20000224 	.word	0x20000224
 80021c8:	20000228 	.word	0x20000228
 80021cc:	20000230 	.word	0x20000230
 80021d0:	40590000 	.word	0x40590000
 80021d4:	20000225 	.word	0x20000225
 80021d8:	080076c8 	.word	0x080076c8
 80021dc:	200001a0 	.word	0x200001a0

080021e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b099      	sub	sp, #100	; 0x64
 80021e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021e6:	242c      	movs	r4, #44	; 0x2c
 80021e8:	193b      	adds	r3, r7, r4
 80021ea:	0018      	movs	r0, r3
 80021ec:	2334      	movs	r3, #52	; 0x34
 80021ee:	001a      	movs	r2, r3
 80021f0:	2100      	movs	r1, #0
 80021f2:	f003 faed 	bl	80057d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021f6:	231c      	movs	r3, #28
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	0018      	movs	r0, r3
 80021fc:	2310      	movs	r3, #16
 80021fe:	001a      	movs	r2, r3
 8002200:	2100      	movs	r1, #0
 8002202:	f003 fae5 	bl	80057d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002206:	003b      	movs	r3, r7
 8002208:	0018      	movs	r0, r3
 800220a:	231c      	movs	r3, #28
 800220c:	001a      	movs	r2, r3
 800220e:	2100      	movs	r1, #0
 8002210:	f003 fade 	bl	80057d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8002214:	0021      	movs	r1, r4
 8002216:	187b      	adds	r3, r7, r1
 8002218:	2230      	movs	r2, #48	; 0x30
 800221a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800221c:	187b      	adds	r3, r7, r1
 800221e:	2201      	movs	r2, #1
 8002220:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002222:	187b      	adds	r3, r7, r1
 8002224:	2201      	movs	r2, #1
 8002226:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002228:	187b      	adds	r3, r7, r1
 800222a:	2210      	movs	r2, #16
 800222c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800222e:	187b      	adds	r3, r7, r1
 8002230:	2200      	movs	r2, #0
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002234:	187b      	adds	r3, r7, r1
 8002236:	0018      	movs	r0, r3
 8002238:	f001 fc20 	bl	8003a7c <HAL_RCC_OscConfig>
 800223c:	1e03      	subs	r3, r0, #0
 800223e:	d001      	beq.n	8002244 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002240:	f000 f9e8 	bl	8002614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002244:	211c      	movs	r1, #28
 8002246:	187b      	adds	r3, r7, r1
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800224c:	187b      	adds	r3, r7, r1
 800224e:	2203      	movs	r2, #3
 8002250:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002252:	187b      	adds	r3, r7, r1
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002258:	187b      	adds	r3, r7, r1
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800225e:	187b      	adds	r3, r7, r1
 8002260:	2101      	movs	r1, #1
 8002262:	0018      	movs	r0, r3
 8002264:	f001 ff90 	bl	8004188 <HAL_RCC_ClockConfig>
 8002268:	1e03      	subs	r3, r0, #0
 800226a:	d001      	beq.n	8002270 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800226c:	f000 f9d2 	bl	8002614 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002270:	003b      	movs	r3, r7
 8002272:	2202      	movs	r2, #2
 8002274:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002276:	003b      	movs	r3, r7
 8002278:	2200      	movs	r2, #0
 800227a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800227c:	003b      	movs	r3, r7
 800227e:	0018      	movs	r0, r3
 8002280:	f002 f8fc 	bl	800447c <HAL_RCCEx_PeriphCLKConfig>
 8002284:	1e03      	subs	r3, r0, #0
 8002286:	d001      	beq.n	800228c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002288:	f000 f9c4 	bl	8002614 <Error_Handler>
  }
}
 800228c:	46c0      	nop			; (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	b019      	add	sp, #100	; 0x64
 8002292:	bd90      	pop	{r4, r7, pc}

08002294 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	0018      	movs	r0, r3
 800229e:	230c      	movs	r3, #12
 80022a0:	001a      	movs	r2, r3
 80022a2:	2100      	movs	r1, #0
 80022a4:	f003 fa94 	bl	80057d0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80022a8:	4b26      	ldr	r3, [pc, #152]	; (8002344 <MX_ADC_Init+0xb0>)
 80022aa:	4a27      	ldr	r2, [pc, #156]	; (8002348 <MX_ADC_Init+0xb4>)
 80022ac:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80022ae:	4b25      	ldr	r3, [pc, #148]	; (8002344 <MX_ADC_Init+0xb0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <MX_ADC_Init+0xb0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ba:	4b22      	ldr	r3, [pc, #136]	; (8002344 <MX_ADC_Init+0xb0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <MX_ADC_Init+0xb0>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <MX_ADC_Init+0xb0>)
 80022c8:	2204      	movs	r2, #4
 80022ca:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <MX_ADC_Init+0xb0>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <MX_ADC_Init+0xb0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <MX_ADC_Init+0xb0>)
 80022da:	2200      	movs	r2, #0
 80022dc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <MX_ADC_Init+0xb0>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <MX_ADC_Init+0xb0>)
 80022e6:	22c2      	movs	r2, #194	; 0xc2
 80022e8:	32ff      	adds	r2, #255	; 0xff
 80022ea:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <MX_ADC_Init+0xb0>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <MX_ADC_Init+0xb0>)
 80022f4:	2224      	movs	r2, #36	; 0x24
 80022f6:	2100      	movs	r1, #0
 80022f8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_ADC_Init+0xb0>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <MX_ADC_Init+0xb0>)
 8002302:	0018      	movs	r0, r3
 8002304:	f000 fbbe 	bl	8002a84 <HAL_ADC_Init>
 8002308:	1e03      	subs	r3, r0, #0
 800230a:	d001      	beq.n	8002310 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800230c:	f000 f982 	bl	8002614 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	0152      	lsls	r2, r2, #5
 800231c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2280      	movs	r2, #128	; 0x80
 8002322:	0552      	lsls	r2, r2, #21
 8002324:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002326:	1d3a      	adds	r2, r7, #4
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_ADC_Init+0xb0>)
 800232a:	0011      	movs	r1, r2
 800232c:	0018      	movs	r0, r3
 800232e:	f000 fd83 	bl	8002e38 <HAL_ADC_ConfigChannel>
 8002332:	1e03      	subs	r3, r0, #0
 8002334:	d001      	beq.n	800233a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002336:	f000 f96d 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b004      	add	sp, #16
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	2000008c 	.word	0x2000008c
 8002348:	40012400 	.word	0x40012400

0800234c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002352:	2308      	movs	r3, #8
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	0018      	movs	r0, r3
 8002358:	2310      	movs	r3, #16
 800235a:	001a      	movs	r2, r3
 800235c:	2100      	movs	r1, #0
 800235e:	f003 fa37 	bl	80057d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002362:	003b      	movs	r3, r7
 8002364:	0018      	movs	r0, r3
 8002366:	2308      	movs	r3, #8
 8002368:	001a      	movs	r2, r3
 800236a:	2100      	movs	r1, #0
 800236c:	f003 fa30 	bl	80057d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <MX_TIM1_Init+0xa4>)
 8002372:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <MX_TIM1_Init+0xa8>)
 8002374:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24-1;
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <MX_TIM1_Init+0xa4>)
 8002378:	2217      	movs	r2, #23
 800237a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237c:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <MX_TIM1_Init+0xa4>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <MX_TIM1_Init+0xa4>)
 8002384:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <MX_TIM1_Init+0xac>)
 8002386:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <MX_TIM1_Init+0xa4>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <MX_TIM1_Init+0xa4>)
 8002390:	2200      	movs	r2, #0
 8002392:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002394:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <MX_TIM1_Init+0xa4>)
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <MX_TIM1_Init+0xa4>)
 800239c:	0018      	movs	r0, r3
 800239e:	f002 f96b 	bl	8004678 <HAL_TIM_Base_Init>
 80023a2:	1e03      	subs	r3, r0, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80023a6:	f000 f935 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023aa:	2108      	movs	r1, #8
 80023ac:	187b      	adds	r3, r7, r1
 80023ae:	2280      	movs	r2, #128	; 0x80
 80023b0:	0152      	lsls	r2, r2, #5
 80023b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023b4:	187a      	adds	r2, r7, r1
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <MX_TIM1_Init+0xa4>)
 80023b8:	0011      	movs	r1, r2
 80023ba:	0018      	movs	r0, r3
 80023bc:	f002 fb14 	bl	80049e8 <HAL_TIM_ConfigClockSource>
 80023c0:	1e03      	subs	r3, r0, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80023c4:	f000 f926 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c8:	003b      	movs	r3, r7
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ce:	003b      	movs	r3, r7
 80023d0:	2200      	movs	r2, #0
 80023d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023d4:	003a      	movs	r2, r7
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <MX_TIM1_Init+0xa4>)
 80023d8:	0011      	movs	r1, r2
 80023da:	0018      	movs	r0, r3
 80023dc:	f002 fd1a 	bl	8004e14 <HAL_TIMEx_MasterConfigSynchronization>
 80023e0:	1e03      	subs	r3, r0, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80023e4:	f000 f916 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b006      	add	sp, #24
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000110 	.word	0x20000110
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	000003e7 	.word	0x000003e7

080023fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002402:	2308      	movs	r3, #8
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	0018      	movs	r0, r3
 8002408:	2310      	movs	r3, #16
 800240a:	001a      	movs	r2, r3
 800240c:	2100      	movs	r1, #0
 800240e:	f003 f9df 	bl	80057d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002412:	003b      	movs	r3, r7
 8002414:	0018      	movs	r0, r3
 8002416:	2308      	movs	r3, #8
 8002418:	001a      	movs	r2, r3
 800241a:	2100      	movs	r1, #0
 800241c:	f003 f9d8 	bl	80057d0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002420:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <MX_TIM2_Init+0xa4>)
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	05d2      	lsls	r2, r2, #23
 8002426:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <MX_TIM2_Init+0xa4>)
 800242a:	222f      	movs	r2, #47	; 0x2f
 800242c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <MX_TIM2_Init+0xa4>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002434:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <MX_TIM2_Init+0xa4>)
 8002436:	22fa      	movs	r2, #250	; 0xfa
 8002438:	0092      	lsls	r2, r2, #2
 800243a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <MX_TIM2_Init+0xa4>)
 800243e:	2200      	movs	r2, #0
 8002440:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <MX_TIM2_Init+0xa4>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <MX_TIM2_Init+0xa4>)
 800244a:	0018      	movs	r0, r3
 800244c:	f002 f914 	bl	8004678 <HAL_TIM_Base_Init>
 8002450:	1e03      	subs	r3, r0, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002454:	f000 f8de 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002458:	2108      	movs	r1, #8
 800245a:	187b      	adds	r3, r7, r1
 800245c:	2280      	movs	r2, #128	; 0x80
 800245e:	0152      	lsls	r2, r2, #5
 8002460:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002462:	187a      	adds	r2, r7, r1
 8002464:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <MX_TIM2_Init+0xa4>)
 8002466:	0011      	movs	r1, r2
 8002468:	0018      	movs	r0, r3
 800246a:	f002 fabd 	bl	80049e8 <HAL_TIM_ConfigClockSource>
 800246e:	1e03      	subs	r3, r0, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002472:	f000 f8cf 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002476:	003b      	movs	r3, r7
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247c:	003b      	movs	r3, r7
 800247e:	2200      	movs	r2, #0
 8002480:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002482:	003a      	movs	r2, r7
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <MX_TIM2_Init+0xa4>)
 8002486:	0011      	movs	r1, r2
 8002488:	0018      	movs	r0, r3
 800248a:	f002 fcc3 	bl	8004e14 <HAL_TIMEx_MasterConfigSynchronization>
 800248e:	1e03      	subs	r3, r0, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002492:	f000 f8bf 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	46bd      	mov	sp, r7
 800249a:	b006      	add	sp, #24
 800249c:	bd80      	pop	{r7, pc}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	20000158 	.word	0x20000158

080024a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <MX_USART2_UART_Init+0x58>)
 80024aa:	4a15      	ldr	r2, [pc, #84]	; (8002500 <MX_USART2_UART_Init+0x5c>)
 80024ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80024ae:	4b13      	ldr	r3, [pc, #76]	; (80024fc <MX_USART2_UART_Init+0x58>)
 80024b0:	2296      	movs	r2, #150	; 0x96
 80024b2:	0212      	lsls	r2, r2, #8
 80024b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <MX_USART2_UART_Init+0x58>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <MX_USART2_UART_Init+0x58>)
 80024be:	2200      	movs	r2, #0
 80024c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <MX_USART2_UART_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <MX_USART2_UART_Init+0x58>)
 80024ca:	220c      	movs	r2, #12
 80024cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <MX_USART2_UART_Init+0x58>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <MX_USART2_UART_Init+0x58>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <MX_USART2_UART_Init+0x58>)
 80024dc:	2200      	movs	r2, #0
 80024de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <MX_USART2_UART_Init+0x58>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <MX_USART2_UART_Init+0x58>)
 80024e8:	0018      	movs	r0, r3
 80024ea:	f002 fd01 	bl	8004ef0 <HAL_UART_Init>
 80024ee:	1e03      	subs	r3, r0, #0
 80024f0:	d001      	beq.n	80024f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80024f2:	f000 f88f 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200001a0 	.word	0x200001a0
 8002500:	40004400 	.word	0x40004400

08002504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_DMA_Init+0x38>)
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <MX_DMA_Init+0x38>)
 8002510:	2101      	movs	r1, #1
 8002512:	430a      	orrs	r2, r1
 8002514:	615a      	str	r2, [r3, #20]
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_DMA_Init+0x38>)
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	2201      	movs	r2, #1
 800251c:	4013      	ands	r3, r2
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	2009      	movs	r0, #9
 8002528:	f000 ff48 	bl	80033bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800252c:	2009      	movs	r0, #9
 800252e:	f000 ff5a 	bl	80033e6 <HAL_NVIC_EnableIRQ>

}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b002      	add	sp, #8
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	40021000 	.word	0x40021000

08002540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002546:	240c      	movs	r4, #12
 8002548:	193b      	adds	r3, r7, r4
 800254a:	0018      	movs	r0, r3
 800254c:	2314      	movs	r3, #20
 800254e:	001a      	movs	r2, r3
 8002550:	2100      	movs	r1, #0
 8002552:	f003 f93d 	bl	80057d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002556:	4b2d      	ldr	r3, [pc, #180]	; (800260c <MX_GPIO_Init+0xcc>)
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	4b2c      	ldr	r3, [pc, #176]	; (800260c <MX_GPIO_Init+0xcc>)
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	0309      	lsls	r1, r1, #12
 8002560:	430a      	orrs	r2, r1
 8002562:	615a      	str	r2, [r3, #20]
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <MX_GPIO_Init+0xcc>)
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	031b      	lsls	r3, r3, #12
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <MX_GPIO_Init+0xcc>)
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	4b25      	ldr	r3, [pc, #148]	; (800260c <MX_GPIO_Init+0xcc>)
 8002578:	2180      	movs	r1, #128	; 0x80
 800257a:	03c9      	lsls	r1, r1, #15
 800257c:	430a      	orrs	r2, r1
 800257e:	615a      	str	r2, [r3, #20]
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <MX_GPIO_Init+0xcc>)
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	03db      	lsls	r3, r3, #15
 8002588:	4013      	ands	r3, r2
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <MX_GPIO_Init+0xcc>)
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	4b1e      	ldr	r3, [pc, #120]	; (800260c <MX_GPIO_Init+0xcc>)
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	0289      	lsls	r1, r1, #10
 8002598:	430a      	orrs	r2, r1
 800259a:	615a      	str	r2, [r3, #20]
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <MX_GPIO_Init+0xcc>)
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	029b      	lsls	r3, r3, #10
 80025a4:	4013      	ands	r3, r2
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80025aa:	2390      	movs	r3, #144	; 0x90
 80025ac:	05db      	lsls	r3, r3, #23
 80025ae:	2200      	movs	r2, #0
 80025b0:	2120      	movs	r1, #32
 80025b2:	0018      	movs	r0, r3
 80025b4:	f001 fa44 	bl	8003a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025b8:	193b      	adds	r3, r7, r4
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	0192      	lsls	r2, r2, #6
 80025be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025c0:	193b      	adds	r3, r7, r4
 80025c2:	2284      	movs	r2, #132	; 0x84
 80025c4:	0392      	lsls	r2, r2, #14
 80025c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	193b      	adds	r3, r7, r4
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ce:	193b      	adds	r3, r7, r4
 80025d0:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <MX_GPIO_Init+0xd0>)
 80025d2:	0019      	movs	r1, r3
 80025d4:	0010      	movs	r0, r2
 80025d6:	f001 f8bb 	bl	8003750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80025da:	0021      	movs	r1, r4
 80025dc:	187b      	adds	r3, r7, r1
 80025de:	2220      	movs	r2, #32
 80025e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e2:	187b      	adds	r3, r7, r1
 80025e4:	2201      	movs	r2, #1
 80025e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	187b      	adds	r3, r7, r1
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	187a      	adds	r2, r7, r1
 80025f6:	2390      	movs	r3, #144	; 0x90
 80025f8:	05db      	lsls	r3, r3, #23
 80025fa:	0011      	movs	r1, r2
 80025fc:	0018      	movs	r0, r3
 80025fe:	f001 f8a7 	bl	8003750 <HAL_GPIO_Init>

}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	b009      	add	sp, #36	; 0x24
 8002608:	bd90      	pop	{r4, r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	40021000 	.word	0x40021000
 8002610:	48000800 	.word	0x48000800

08002614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002618:	b672      	cpsid	i
}
 800261a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800261c:	e7fe      	b.n	800261c <Error_Handler+0x8>
	...

08002620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <HAL_MspInit+0x44>)
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_MspInit+0x44>)
 800262c:	2101      	movs	r1, #1
 800262e:	430a      	orrs	r2, r1
 8002630:	619a      	str	r2, [r3, #24]
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <HAL_MspInit+0x44>)
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2201      	movs	r2, #1
 8002638:	4013      	ands	r3, r2
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_MspInit+0x44>)
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_MspInit+0x44>)
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	0549      	lsls	r1, r1, #21
 8002648:	430a      	orrs	r2, r1
 800264a:	61da      	str	r2, [r3, #28]
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_MspInit+0x44>)
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	055b      	lsls	r3, r3, #21
 8002654:	4013      	ands	r3, r2
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b002      	add	sp, #8
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	40021000 	.word	0x40021000

08002668 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b08b      	sub	sp, #44	; 0x2c
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	2414      	movs	r4, #20
 8002672:	193b      	adds	r3, r7, r4
 8002674:	0018      	movs	r0, r3
 8002676:	2314      	movs	r3, #20
 8002678:	001a      	movs	r2, r3
 800267a:	2100      	movs	r1, #0
 800267c:	f003 f8a8 	bl	80057d0 <memset>
  if(hadc->Instance==ADC1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a2d      	ldr	r2, [pc, #180]	; (800273c <HAL_ADC_MspInit+0xd4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d153      	bne.n	8002732 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800268a:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_ADC_MspInit+0xd8>)
 800268c:	699a      	ldr	r2, [r3, #24]
 800268e:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <HAL_ADC_MspInit+0xd8>)
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	0089      	lsls	r1, r1, #2
 8002694:	430a      	orrs	r2, r1
 8002696:	619a      	str	r2, [r3, #24]
 8002698:	4b29      	ldr	r3, [pc, #164]	; (8002740 <HAL_ADC_MspInit+0xd8>)
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	4b26      	ldr	r3, [pc, #152]	; (8002740 <HAL_ADC_MspInit+0xd8>)
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <HAL_ADC_MspInit+0xd8>)
 80026ac:	2180      	movs	r1, #128	; 0x80
 80026ae:	0289      	lsls	r1, r1, #10
 80026b0:	430a      	orrs	r2, r1
 80026b2:	615a      	str	r2, [r3, #20]
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <HAL_ADC_MspInit+0xd8>)
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	029b      	lsls	r3, r3, #10
 80026bc:	4013      	ands	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026c2:	193b      	adds	r3, r7, r4
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	2203      	movs	r2, #3
 80026cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	193b      	adds	r3, r7, r4
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d4:	193a      	adds	r2, r7, r4
 80026d6:	2390      	movs	r3, #144	; 0x90
 80026d8:	05db      	lsls	r3, r3, #23
 80026da:	0011      	movs	r1, r2
 80026dc:	0018      	movs	r0, r3
 80026de:	f001 f837 	bl	8003750 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80026e2:	4b18      	ldr	r3, [pc, #96]	; (8002744 <HAL_ADC_MspInit+0xdc>)
 80026e4:	4a18      	ldr	r2, [pc, #96]	; (8002748 <HAL_ADC_MspInit+0xe0>)
 80026e6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HAL_ADC_MspInit+0xdc>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_ADC_MspInit+0xdc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_ADC_MspInit+0xdc>)
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_ADC_MspInit+0xdc>)
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	0052      	lsls	r2, r2, #1
 8002700:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_ADC_MspInit+0xdc>)
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	0112      	lsls	r2, r2, #4
 8002708:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <HAL_ADC_MspInit+0xdc>)
 800270c:	2220      	movs	r2, #32
 800270e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <HAL_ADC_MspInit+0xdc>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_ADC_MspInit+0xdc>)
 8002718:	0018      	movs	r0, r3
 800271a:	f000 fe81 	bl	8003420 <HAL_DMA_Init>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d001      	beq.n	8002726 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002722:	f7ff ff77 	bl	8002614 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a06      	ldr	r2, [pc, #24]	; (8002744 <HAL_ADC_MspInit+0xdc>)
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_ADC_MspInit+0xdc>)
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	46bd      	mov	sp, r7
 8002736:	b00b      	add	sp, #44	; 0x2c
 8002738:	bd90      	pop	{r4, r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	40012400 	.word	0x40012400
 8002740:	40021000 	.word	0x40021000
 8002744:	200000cc 	.word	0x200000cc
 8002748:	40020008 	.word	0x40020008

0800274c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1b      	ldr	r2, [pc, #108]	; (80027c8 <HAL_TIM_Base_MspInit+0x7c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d116      	bne.n	800278c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_TIM_Base_MspInit+0x80>)
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_TIM_Base_MspInit+0x80>)
 8002764:	2180      	movs	r1, #128	; 0x80
 8002766:	0109      	lsls	r1, r1, #4
 8002768:	430a      	orrs	r2, r1
 800276a:	619a      	str	r2, [r3, #24]
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_TIM_Base_MspInit+0x80>)
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	200d      	movs	r0, #13
 8002780:	f000 fe1c 	bl	80033bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002784:	200d      	movs	r0, #13
 8002786:	f000 fe2e 	bl	80033e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800278a:	e019      	b.n	80027c0 <HAL_TIM_Base_MspInit+0x74>
  else if(htim_base->Instance==TIM2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	05db      	lsls	r3, r3, #23
 8002794:	429a      	cmp	r2, r3
 8002796:	d113      	bne.n	80027c0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_TIM_Base_MspInit+0x80>)
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_TIM_Base_MspInit+0x80>)
 800279e:	2101      	movs	r1, #1
 80027a0:	430a      	orrs	r2, r1
 80027a2:	61da      	str	r2, [r3, #28]
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_TIM_Base_MspInit+0x80>)
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	2201      	movs	r2, #1
 80027aa:	4013      	ands	r3, r2
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027b0:	2200      	movs	r2, #0
 80027b2:	2100      	movs	r1, #0
 80027b4:	200f      	movs	r0, #15
 80027b6:	f000 fe01 	bl	80033bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027ba:	200f      	movs	r0, #15
 80027bc:	f000 fe13 	bl	80033e6 <HAL_NVIC_EnableIRQ>
}
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b004      	add	sp, #16
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40012c00 	.word	0x40012c00
 80027cc:	40021000 	.word	0x40021000

080027d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b08b      	sub	sp, #44	; 0x2c
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	2414      	movs	r4, #20
 80027da:	193b      	adds	r3, r7, r4
 80027dc:	0018      	movs	r0, r3
 80027de:	2314      	movs	r3, #20
 80027e0:	001a      	movs	r2, r3
 80027e2:	2100      	movs	r1, #0
 80027e4:	f002 fff4 	bl	80057d0 <memset>
  if(huart->Instance==USART2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <HAL_UART_MspInit+0x90>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d132      	bne.n	8002858 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_UART_MspInit+0x94>)
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HAL_UART_MspInit+0x94>)
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	0289      	lsls	r1, r1, #10
 80027fc:	430a      	orrs	r2, r1
 80027fe:	61da      	str	r2, [r3, #28]
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <HAL_UART_MspInit+0x94>)
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	029b      	lsls	r3, r3, #10
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_UART_MspInit+0x94>)
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <HAL_UART_MspInit+0x94>)
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	0289      	lsls	r1, r1, #10
 8002818:	430a      	orrs	r2, r1
 800281a:	615a      	str	r2, [r3, #20]
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_UART_MspInit+0x94>)
 800281e:	695a      	ldr	r2, [r3, #20]
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	029b      	lsls	r3, r3, #10
 8002824:	4013      	ands	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800282a:	0021      	movs	r1, r4
 800282c:	187b      	adds	r3, r7, r1
 800282e:	220c      	movs	r2, #12
 8002830:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	187b      	adds	r3, r7, r1
 8002834:	2202      	movs	r2, #2
 8002836:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	187b      	adds	r3, r7, r1
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283e:	187b      	adds	r3, r7, r1
 8002840:	2200      	movs	r2, #0
 8002842:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002844:	187b      	adds	r3, r7, r1
 8002846:	2201      	movs	r2, #1
 8002848:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284a:	187a      	adds	r2, r7, r1
 800284c:	2390      	movs	r3, #144	; 0x90
 800284e:	05db      	lsls	r3, r3, #23
 8002850:	0011      	movs	r1, r2
 8002852:	0018      	movs	r0, r3
 8002854:	f000 ff7c 	bl	8003750 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b00b      	add	sp, #44	; 0x2c
 800285e:	bd90      	pop	{r4, r7, pc}
 8002860:	40004400 	.word	0x40004400
 8002864:	40021000 	.word	0x40021000

08002868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800286c:	e7fe      	b.n	800286c <NMI_Handler+0x4>

0800286e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002872:	e7fe      	b.n	8002872 <HardFault_Handler+0x4>

08002874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800288c:	f000 f8de 	bl	8002a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <DMA1_Channel1_IRQHandler+0x14>)
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 fe6c 	bl	800357c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	200000cc 	.word	0x200000cc

080028b0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
  flag_tim_1=1;
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1c>)
 80028bc:	0018      	movs	r0, r3
 80028be:	f001 ff7d 	bl	80047bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000224 	.word	0x20000224
 80028cc:	20000110 	.word	0x20000110

080028d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	flag_tim_2=1;
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <TIM2_IRQHandler+0x18>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <TIM2_IRQHandler+0x1c>)
 80028dc:	0018      	movs	r0, r3
 80028de:	f001 ff6d 	bl	80047bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000225 	.word	0x20000225
 80028ec:	20000158 	.word	0x20000158

080028f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <_sbrk+0x5c>)
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <_sbrk+0x60>)
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <_sbrk+0x64>)
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <_sbrk+0x68>)
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <_sbrk+0x64>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	18d3      	adds	r3, r2, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d207      	bcs.n	8002930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002920:	f002 ff2c 	bl	800577c <__errno>
 8002924:	0003      	movs	r3, r0
 8002926:	220c      	movs	r2, #12
 8002928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292a:	2301      	movs	r3, #1
 800292c:	425b      	negs	r3, r3
 800292e:	e009      	b.n	8002944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	18d2      	adds	r2, r2, r3
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <_sbrk+0x64>)
 8002940:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	b006      	add	sp, #24
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20004000 	.word	0x20004000
 8002950:	00000400 	.word	0x00000400
 8002954:	20000238 	.word	0x20000238
 8002958:	20000250 	.word	0x20000250

0800295c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002960:	46c0      	nop			; (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002968:	480d      	ldr	r0, [pc, #52]	; (80029a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800296a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800296c:	480d      	ldr	r0, [pc, #52]	; (80029a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800296e:	490e      	ldr	r1, [pc, #56]	; (80029a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002970:	4a0e      	ldr	r2, [pc, #56]	; (80029ac <LoopForever+0xe>)
  movs r3, #0
 8002972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002974:	e002      	b.n	800297c <LoopCopyDataInit>

08002976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297a:	3304      	adds	r3, #4

0800297c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800297c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800297e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002980:	d3f9      	bcc.n	8002976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002982:	4a0b      	ldr	r2, [pc, #44]	; (80029b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002984:	4c0b      	ldr	r4, [pc, #44]	; (80029b4 <LoopForever+0x16>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002988:	e001      	b.n	800298e <LoopFillZerobss>

0800298a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800298c:	3204      	adds	r2, #4

0800298e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800298e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002990:	d3fb      	bcc.n	800298a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002992:	f7ff ffe3 	bl	800295c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002996:	f002 fef7 	bl	8005788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800299a:	f7ff fb77 	bl	800208c <main>

0800299e <LoopForever>:

LoopForever:
    b LoopForever
 800299e:	e7fe      	b.n	800299e <LoopForever>
  ldr   r0, =_estack
 80029a0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80029a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80029ac:	080079a0 	.word	0x080079a0
  ldr r2, =_sbss
 80029b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80029b4:	20000250 	.word	0x20000250

080029b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029b8:	e7fe      	b.n	80029b8 <ADC1_COMP_IRQHandler>
	...

080029bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_Init+0x24>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_Init+0x24>)
 80029c6:	2110      	movs	r1, #16
 80029c8:	430a      	orrs	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f000 f809 	bl	80029e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d2:	f7ff fe25 	bl	8002620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	40022000 	.word	0x40022000

080029e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <HAL_InitTick+0x5c>)
 80029ee:	681c      	ldr	r4, [r3, #0]
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_InitTick+0x60>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	0019      	movs	r1, r3
 80029f6:	23fa      	movs	r3, #250	; 0xfa
 80029f8:	0098      	lsls	r0, r3, #2
 80029fa:	f7fd fb8f 	bl	800011c <__udivsi3>
 80029fe:	0003      	movs	r3, r0
 8002a00:	0019      	movs	r1, r3
 8002a02:	0020      	movs	r0, r4
 8002a04:	f7fd fb8a 	bl	800011c <__udivsi3>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 fcfb 	bl	8003406 <HAL_SYSTICK_Config>
 8002a10:	1e03      	subs	r3, r0, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e00f      	b.n	8002a38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d80b      	bhi.n	8002a36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	2301      	movs	r3, #1
 8002a22:	425b      	negs	r3, r3
 8002a24:	2200      	movs	r2, #0
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 fcc8 	bl	80033bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_InitTick+0x64>)
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b003      	add	sp, #12
 8002a3e:	bd90      	pop	{r4, r7, pc}
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000008 	.word	0x20000008
 8002a48:	20000004 	.word	0x20000004

08002a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_IncTick+0x1c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	001a      	movs	r2, r3
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_IncTick+0x20>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	18d2      	adds	r2, r2, r3
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_IncTick+0x20>)
 8002a5e:	601a      	str	r2, [r3, #0]
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	20000008 	.word	0x20000008
 8002a6c:	2000023c 	.word	0x2000023c

08002a70 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  return uwTick;
 8002a74:	4b02      	ldr	r3, [pc, #8]	; (8002a80 <HAL_GetTick+0x10>)
 8002a76:	681b      	ldr	r3, [r3, #0]
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	2000023c 	.word	0x2000023c

08002a84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8c:	230f      	movs	r3, #15
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e125      	b.n	8002cee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2234      	movs	r2, #52	; 0x34
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7ff fdd4 	bl	8002668 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac4:	2210      	movs	r2, #16
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d000      	beq.n	8002acc <HAL_ADC_Init+0x48>
 8002aca:	e103      	b.n	8002cd4 <HAL_ADC_Init+0x250>
 8002acc:	230f      	movs	r3, #15
 8002ace:	18fb      	adds	r3, r7, r3
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d000      	beq.n	8002ad8 <HAL_ADC_Init+0x54>
 8002ad6:	e0fd      	b.n	8002cd4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002ae2:	d000      	beq.n	8002ae6 <HAL_ADC_Init+0x62>
 8002ae4:	e0f6      	b.n	8002cd4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	4a83      	ldr	r2, [pc, #524]	; (8002cf8 <HAL_ADC_Init+0x274>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	2202      	movs	r2, #2
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2203      	movs	r2, #3
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d112      	bne.n	8002b2a <HAL_ADC_Init+0xa6>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d009      	beq.n	8002b26 <HAL_ADC_Init+0xa2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_Init+0xa6>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <HAL_ADC_Init+0xa8>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d116      	bne.n	8002b5e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2218      	movs	r2, #24
 8002b38:	4393      	bics	r3, r2
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	0899      	lsrs	r1, r3, #2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4964      	ldr	r1, [pc, #400]	; (8002cfc <HAL_ADC_Init+0x278>)
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7e1b      	ldrb	r3, [r3, #24]
 8002b72:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	7e5b      	ldrb	r3, [r3, #25]
 8002b78:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7e9b      	ldrb	r3, [r3, #26]
 8002b80:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002b82:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d002      	beq.n	8002b92 <HAL_ADC_Init+0x10e>
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	015b      	lsls	r3, r3, #5
 8002b90:	e000      	b.n	8002b94 <HAL_ADC_Init+0x110>
 8002b92:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b94:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002b9a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_Init+0x124>
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	e000      	b.n	8002baa <HAL_ADC_Init+0x126>
 8002ba8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002baa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2124      	movs	r1, #36	; 0x24
 8002bb0:	5c5b      	ldrb	r3, [r3, r1]
 8002bb2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002bb4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7edb      	ldrb	r3, [r3, #27]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d115      	bne.n	8002bf0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7e9b      	ldrb	r3, [r3, #26]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d105      	bne.n	8002bd8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2280      	movs	r2, #128	; 0x80
 8002bd0:	0252      	lsls	r2, r2, #9
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	2220      	movs	r2, #32
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	2201      	movs	r2, #1
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	23c2      	movs	r3, #194	; 0xc2
 8002bf6:	33ff      	adds	r3, #255	; 0xff
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d007      	beq.n	8002c0c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002c04:	4313      	orrs	r3, r2
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68d9      	ldr	r1, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	055b      	lsls	r3, r3, #21
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d01b      	beq.n	8002c60 <HAL_ADC_Init+0x1dc>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d017      	beq.n	8002c60 <HAL_ADC_Init+0x1dc>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d013      	beq.n	8002c60 <HAL_ADC_Init+0x1dc>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d00f      	beq.n	8002c60 <HAL_ADC_Init+0x1dc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d00b      	beq.n	8002c60 <HAL_ADC_Init+0x1dc>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d007      	beq.n	8002c60 <HAL_ADC_Init+0x1dc>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	2b06      	cmp	r3, #6
 8002c56:	d003      	beq.n	8002c60 <HAL_ADC_Init+0x1dc>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	2b07      	cmp	r3, #7
 8002c5e:	d112      	bne.n	8002c86 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2107      	movs	r1, #7
 8002c6c:	438a      	bics	r2, r1
 8002c6e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6959      	ldr	r1, [r3, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	2207      	movs	r2, #7
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <HAL_ADC_Init+0x27c>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d10b      	bne.n	8002cae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	4393      	bics	r3, r2
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002cac:	e01c      	b.n	8002ce8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	2212      	movs	r2, #18
 8002cb4:	4393      	bics	r3, r2
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002cca:	230f      	movs	r3, #15
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002cd2:	e009      	b.n	8002ce8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	2210      	movs	r2, #16
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002ce0:	230f      	movs	r3, #15
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ce8:	230f      	movs	r3, #15
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	781b      	ldrb	r3, [r3, #0]
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b004      	add	sp, #16
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	fffffefd 	.word	0xfffffefd
 8002cfc:	fffe0219 	.word	0xfffe0219
 8002d00:	833fffe7 	.word	0x833fffe7

08002d04 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d10:	2317      	movs	r3, #23
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	4013      	ands	r3, r2
 8002d22:	d15e      	bne.n	8002de2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2234      	movs	r2, #52	; 0x34
 8002d28:	5c9b      	ldrb	r3, [r3, r2]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_Start_DMA+0x2e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e05e      	b.n	8002df0 <HAL_ADC_Start_DMA+0xec>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2234      	movs	r2, #52	; 0x34
 8002d36:	2101      	movs	r1, #1
 8002d38:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	7e5b      	ldrb	r3, [r3, #25]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d007      	beq.n	8002d52 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002d42:	2317      	movs	r3, #23
 8002d44:	18fc      	adds	r4, r7, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f983 	bl	8003054 <ADC_Enable>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d52:	2317      	movs	r3, #23
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d146      	bne.n	8002dea <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_ADC_Start_DMA+0xf4>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	2280      	movs	r2, #128	; 0x80
 8002d66:	0052      	lsls	r2, r2, #1
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2234      	movs	r2, #52	; 0x34
 8002d78:	2100      	movs	r1, #0
 8002d7a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <HAL_ADC_Start_DMA+0xf8>)
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_ADC_Start_DMA+0xfc>)
 8002d8a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_ADC_Start_DMA+0x100>)
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	221c      	movs	r2, #28
 8002d9a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2110      	movs	r1, #16
 8002da8:	430a      	orrs	r2, r1
 8002daa:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2101      	movs	r1, #1
 8002db8:	430a      	orrs	r2, r1
 8002dba:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3340      	adds	r3, #64	; 0x40
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f000 fb70 	bl	80034b0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2104      	movs	r1, #4
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	e003      	b.n	8002dea <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002de2:	2317      	movs	r3, #23
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	2202      	movs	r2, #2
 8002de8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002dea:	2317      	movs	r3, #23
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	781b      	ldrb	r3, [r3, #0]
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b007      	add	sp, #28
 8002df6:	bd90      	pop	{r4, r7, pc}
 8002df8:	fffff0fe 	.word	0xfffff0fe
 8002dfc:	0800315d 	.word	0x0800315d
 8002e00:	08003211 	.word	0x08003211
 8002e04:	0800322f 	.word	0x0800322f

08002e08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b002      	add	sp, #8
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b002      	add	sp, #8
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b002      	add	sp, #8
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e42:	230f      	movs	r3, #15
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	055b      	lsls	r3, r3, #21
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d011      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x46>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d00d      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x46>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d009      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x46>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d005      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x46>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d001      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x46>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2234      	movs	r2, #52	; 0x34
 8002e82:	5c9b      	ldrb	r3, [r3, r2]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x54>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e0d0      	b.n	800302e <HAL_ADC_ConfigChannel+0x1f6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2234      	movs	r2, #52	; 0x34
 8002e90:	2101      	movs	r1, #1
 8002e92:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d000      	beq.n	8002ea2 <HAL_ADC_ConfigChannel+0x6a>
 8002ea0:	e0b4      	b.n	800300c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4a64      	ldr	r2, [pc, #400]	; (8003038 <HAL_ADC_ConfigChannel+0x200>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d100      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x76>
 8002eac:	e082      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	055b      	lsls	r3, r3, #21
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d037      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x108>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d033      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x108>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d02f      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x108>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d02b      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x108>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d027      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x108>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	d023      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x108>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	2b06      	cmp	r3, #6
 8002efe:	d01f      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x108>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	2b07      	cmp	r3, #7
 8002f06:	d01b      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	2107      	movs	r1, #7
 8002f14:	400b      	ands	r3, r1
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d012      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2107      	movs	r1, #7
 8002f26:	438a      	bics	r2, r1
 8002f28:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6959      	ldr	r1, [r3, #20]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2207      	movs	r2, #7
 8002f36:	401a      	ands	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d007      	beq.n	8002f58 <HAL_ADC_ConfigChannel+0x120>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b11      	cmp	r3, #17
 8002f4e:	d003      	beq.n	8002f58 <HAL_ADC_ConfigChannel+0x120>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b12      	cmp	r3, #18
 8002f56:	d163      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002f58:	4b38      	ldr	r3, [pc, #224]	; (800303c <HAL_ADC_ConfigChannel+0x204>)
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d009      	beq.n	8002f78 <HAL_ADC_ConfigChannel+0x140>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b11      	cmp	r3, #17
 8002f6a:	d102      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x13a>
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	03db      	lsls	r3, r3, #15
 8002f70:	e004      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x144>
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	045b      	lsls	r3, r3, #17
 8002f76:	e001      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x144>
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	041b      	lsls	r3, r3, #16
 8002f7c:	4a2f      	ldr	r2, [pc, #188]	; (800303c <HAL_ADC_ConfigChannel+0x204>)
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d14a      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_ADC_ConfigChannel+0x208>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	492d      	ldr	r1, [pc, #180]	; (8003044 <HAL_ADC_ConfigChannel+0x20c>)
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7fd f8c3 	bl	800011c <__udivsi3>
 8002f96:	0003      	movs	r3, r0
 8002f98:	001a      	movs	r2, r3
 8002f9a:	0013      	movs	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	189b      	adds	r3, r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fa4:	e002      	b.n	8002fac <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f9      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x16e>
 8002fb2:	e035      	b.n	8003020 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4099      	lsls	r1, r3
 8002fc2:	000b      	movs	r3, r1
 8002fc4:	43d9      	mvns	r1, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	400a      	ands	r2, r1
 8002fcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	d007      	beq.n	8002fe6 <HAL_ADC_ConfigChannel+0x1ae>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b11      	cmp	r3, #17
 8002fdc:	d003      	beq.n	8002fe6 <HAL_ADC_ConfigChannel+0x1ae>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b12      	cmp	r3, #18
 8002fe4:	d11c      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_ADC_ConfigChannel+0x204>)
 8002fe8:	6819      	ldr	r1, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d007      	beq.n	8003002 <HAL_ADC_ConfigChannel+0x1ca>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b11      	cmp	r3, #17
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x1c6>
 8002ffa:	4b13      	ldr	r3, [pc, #76]	; (8003048 <HAL_ADC_ConfigChannel+0x210>)
 8002ffc:	e002      	b.n	8003004 <HAL_ADC_ConfigChannel+0x1cc>
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <HAL_ADC_ConfigChannel+0x214>)
 8003000:	e000      	b.n	8003004 <HAL_ADC_ConfigChannel+0x1cc>
 8003002:	4b13      	ldr	r3, [pc, #76]	; (8003050 <HAL_ADC_ConfigChannel+0x218>)
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <HAL_ADC_ConfigChannel+0x204>)
 8003006:	400b      	ands	r3, r1
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e009      	b.n	8003020 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	2220      	movs	r2, #32
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003018:	230f      	movs	r3, #15
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2234      	movs	r2, #52	; 0x34
 8003024:	2100      	movs	r1, #0
 8003026:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003028:	230f      	movs	r3, #15
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	781b      	ldrb	r3, [r3, #0]
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	b004      	add	sp, #16
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	00001001 	.word	0x00001001
 800303c:	40012708 	.word	0x40012708
 8003040:	20000000 	.word	0x20000000
 8003044:	000f4240 	.word	0x000f4240
 8003048:	ffbfffff 	.word	0xffbfffff
 800304c:	feffffff 	.word	0xfeffffff
 8003050:	ff7fffff 	.word	0xff7fffff

08003054 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2203      	movs	r2, #3
 800306c:	4013      	ands	r3, r2
 800306e:	2b01      	cmp	r3, #1
 8003070:	d112      	bne.n	8003098 <ADC_Enable+0x44>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2201      	movs	r2, #1
 800307a:	4013      	ands	r3, r2
 800307c:	2b01      	cmp	r3, #1
 800307e:	d009      	beq.n	8003094 <ADC_Enable+0x40>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	401a      	ands	r2, r3
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	429a      	cmp	r2, r3
 8003092:	d101      	bne.n	8003098 <ADC_Enable+0x44>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <ADC_Enable+0x46>
 8003098:	2300      	movs	r3, #0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d152      	bne.n	8003144 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a2a      	ldr	r2, [pc, #168]	; (8003150 <ADC_Enable+0xfc>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	d00d      	beq.n	80030c6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	2210      	movs	r2, #16
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	2201      	movs	r2, #1
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e03f      	b.n	8003146 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	430a      	orrs	r2, r1
 80030d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030d6:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <ADC_Enable+0x100>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	491f      	ldr	r1, [pc, #124]	; (8003158 <ADC_Enable+0x104>)
 80030dc:	0018      	movs	r0, r3
 80030de:	f7fd f81d 	bl	800011c <__udivsi3>
 80030e2:	0003      	movs	r3, r0
 80030e4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80030e6:	e002      	b.n	80030ee <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f9      	bne.n	80030e8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80030f4:	f7ff fcbc 	bl	8002a70 <HAL_GetTick>
 80030f8:	0003      	movs	r3, r0
 80030fa:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030fc:	e01b      	b.n	8003136 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030fe:	f7ff fcb7 	bl	8002a70 <HAL_GetTick>
 8003102:	0002      	movs	r2, r0
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d914      	bls.n	8003136 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	4013      	ands	r3, r2
 8003116:	2b01      	cmp	r3, #1
 8003118:	d00d      	beq.n	8003136 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	2210      	movs	r2, #16
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	2201      	movs	r2, #1
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e007      	b.n	8003146 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2201      	movs	r2, #1
 800313e:	4013      	ands	r3, r2
 8003140:	2b01      	cmp	r3, #1
 8003142:	d1dc      	bne.n	80030fe <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b004      	add	sp, #16
 800314c:	bd80      	pop	{r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	80000017 	.word	0x80000017
 8003154:	20000000 	.word	0x20000000
 8003158:	000f4240 	.word	0x000f4240

0800315c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	2250      	movs	r2, #80	; 0x50
 8003170:	4013      	ands	r3, r2
 8003172:	d140      	bne.n	80031f6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	2280      	movs	r2, #128	; 0x80
 800317a:	0092      	lsls	r2, r2, #2
 800317c:	431a      	orrs	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	23c0      	movs	r3, #192	; 0xc0
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	4013      	ands	r3, r2
 800318e:	d12d      	bne.n	80031ec <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003194:	2b00      	cmp	r3, #0
 8003196:	d129      	bne.n	80031ec <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2208      	movs	r2, #8
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d122      	bne.n	80031ec <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2204      	movs	r2, #4
 80031ae:	4013      	ands	r3, r2
 80031b0:	d110      	bne.n	80031d4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	210c      	movs	r1, #12
 80031be:	438a      	bics	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	4a11      	ldr	r2, [pc, #68]	; (800320c <ADC_DMAConvCplt+0xb0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	2201      	movs	r2, #1
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38
 80031d2:	e00b      	b.n	80031ec <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	2220      	movs	r2, #32
 80031da:	431a      	orrs	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	2201      	movs	r2, #1
 80031e6:	431a      	orrs	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f7ff fe0a 	bl	8002e08 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80031f4:	e005      	b.n	8003202 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	0010      	movs	r0, r2
 8003200:	4798      	blx	r3
}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b004      	add	sp, #16
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	fffffefe 	.word	0xfffffefe

08003210 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	0018      	movs	r0, r3
 8003222:	f7ff fdf9 	bl	8002e18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	46bd      	mov	sp, r7
 800322a:	b004      	add	sp, #16
 800322c:	bd80      	pop	{r7, pc}

0800322e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	2240      	movs	r2, #64	; 0x40
 8003242:	431a      	orrs	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	2204      	movs	r2, #4
 800324e:	431a      	orrs	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	0018      	movs	r0, r3
 8003258:	f7ff fde6 	bl	8002e28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b004      	add	sp, #16
 8003262:	bd80      	pop	{r7, pc}

08003264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	0002      	movs	r2, r0
 800326c:	1dfb      	adds	r3, r7, #7
 800326e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003270:	1dfb      	adds	r3, r7, #7
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b7f      	cmp	r3, #127	; 0x7f
 8003276:	d809      	bhi.n	800328c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003278:	1dfb      	adds	r3, r7, #7
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	001a      	movs	r2, r3
 800327e:	231f      	movs	r3, #31
 8003280:	401a      	ands	r2, r3
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <__NVIC_EnableIRQ+0x30>)
 8003284:	2101      	movs	r1, #1
 8003286:	4091      	lsls	r1, r2
 8003288:	000a      	movs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]
  }
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b002      	add	sp, #8
 8003292:	bd80      	pop	{r7, pc}
 8003294:	e000e100 	.word	0xe000e100

08003298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	0002      	movs	r2, r0
 80032a0:	6039      	str	r1, [r7, #0]
 80032a2:	1dfb      	adds	r3, r7, #7
 80032a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032a6:	1dfb      	adds	r3, r7, #7
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b7f      	cmp	r3, #127	; 0x7f
 80032ac:	d828      	bhi.n	8003300 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ae:	4a2f      	ldr	r2, [pc, #188]	; (800336c <__NVIC_SetPriority+0xd4>)
 80032b0:	1dfb      	adds	r3, r7, #7
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	b25b      	sxtb	r3, r3
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	33c0      	adds	r3, #192	; 0xc0
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	589b      	ldr	r3, [r3, r2]
 80032be:	1dfa      	adds	r2, r7, #7
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	0011      	movs	r1, r2
 80032c4:	2203      	movs	r2, #3
 80032c6:	400a      	ands	r2, r1
 80032c8:	00d2      	lsls	r2, r2, #3
 80032ca:	21ff      	movs	r1, #255	; 0xff
 80032cc:	4091      	lsls	r1, r2
 80032ce:	000a      	movs	r2, r1
 80032d0:	43d2      	mvns	r2, r2
 80032d2:	401a      	ands	r2, r3
 80032d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	019b      	lsls	r3, r3, #6
 80032da:	22ff      	movs	r2, #255	; 0xff
 80032dc:	401a      	ands	r2, r3
 80032de:	1dfb      	adds	r3, r7, #7
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	0018      	movs	r0, r3
 80032e4:	2303      	movs	r3, #3
 80032e6:	4003      	ands	r3, r0
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ec:	481f      	ldr	r0, [pc, #124]	; (800336c <__NVIC_SetPriority+0xd4>)
 80032ee:	1dfb      	adds	r3, r7, #7
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	b25b      	sxtb	r3, r3
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	430a      	orrs	r2, r1
 80032f8:	33c0      	adds	r3, #192	; 0xc0
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032fe:	e031      	b.n	8003364 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003300:	4a1b      	ldr	r2, [pc, #108]	; (8003370 <__NVIC_SetPriority+0xd8>)
 8003302:	1dfb      	adds	r3, r7, #7
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	0019      	movs	r1, r3
 8003308:	230f      	movs	r3, #15
 800330a:	400b      	ands	r3, r1
 800330c:	3b08      	subs	r3, #8
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	3306      	adds	r3, #6
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	18d3      	adds	r3, r2, r3
 8003316:	3304      	adds	r3, #4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	1dfa      	adds	r2, r7, #7
 800331c:	7812      	ldrb	r2, [r2, #0]
 800331e:	0011      	movs	r1, r2
 8003320:	2203      	movs	r2, #3
 8003322:	400a      	ands	r2, r1
 8003324:	00d2      	lsls	r2, r2, #3
 8003326:	21ff      	movs	r1, #255	; 0xff
 8003328:	4091      	lsls	r1, r2
 800332a:	000a      	movs	r2, r1
 800332c:	43d2      	mvns	r2, r2
 800332e:	401a      	ands	r2, r3
 8003330:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	019b      	lsls	r3, r3, #6
 8003336:	22ff      	movs	r2, #255	; 0xff
 8003338:	401a      	ands	r2, r3
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	0018      	movs	r0, r3
 8003340:	2303      	movs	r3, #3
 8003342:	4003      	ands	r3, r0
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003348:	4809      	ldr	r0, [pc, #36]	; (8003370 <__NVIC_SetPriority+0xd8>)
 800334a:	1dfb      	adds	r3, r7, #7
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	001c      	movs	r4, r3
 8003350:	230f      	movs	r3, #15
 8003352:	4023      	ands	r3, r4
 8003354:	3b08      	subs	r3, #8
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	430a      	orrs	r2, r1
 800335a:	3306      	adds	r3, #6
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	18c3      	adds	r3, r0, r3
 8003360:	3304      	adds	r3, #4
 8003362:	601a      	str	r2, [r3, #0]
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b003      	add	sp, #12
 800336a:	bd90      	pop	{r4, r7, pc}
 800336c:	e000e100 	.word	0xe000e100
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	1e5a      	subs	r2, r3, #1
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	045b      	lsls	r3, r3, #17
 8003384:	429a      	cmp	r2, r3
 8003386:	d301      	bcc.n	800338c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003388:	2301      	movs	r3, #1
 800338a:	e010      	b.n	80033ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <SysTick_Config+0x44>)
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	3a01      	subs	r2, #1
 8003392:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003394:	2301      	movs	r3, #1
 8003396:	425b      	negs	r3, r3
 8003398:	2103      	movs	r1, #3
 800339a:	0018      	movs	r0, r3
 800339c:	f7ff ff7c 	bl	8003298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <SysTick_Config+0x44>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a6:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <SysTick_Config+0x44>)
 80033a8:	2207      	movs	r2, #7
 80033aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b002      	add	sp, #8
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	e000e010 	.word	0xe000e010

080033bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	210f      	movs	r1, #15
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	1c02      	adds	r2, r0, #0
 80033cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	187b      	adds	r3, r7, r1
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b25b      	sxtb	r3, r3
 80033d6:	0011      	movs	r1, r2
 80033d8:	0018      	movs	r0, r3
 80033da:	f7ff ff5d 	bl	8003298 <__NVIC_SetPriority>
}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b004      	add	sp, #16
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	0002      	movs	r2, r0
 80033ee:	1dfb      	adds	r3, r7, #7
 80033f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033f2:	1dfb      	adds	r3, r7, #7
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	b25b      	sxtb	r3, r3
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff ff33 	bl	8003264 <__NVIC_EnableIRQ>
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	b002      	add	sp, #8
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff ffaf 	bl	8003374 <SysTick_Config>
 8003416:	0003      	movs	r3, r0
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	b002      	add	sp, #8
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e036      	b.n	80034a4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2221      	movs	r2, #33	; 0x21
 800343a:	2102      	movs	r1, #2
 800343c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4a18      	ldr	r2, [pc, #96]	; (80034ac <HAL_DMA_Init+0x8c>)
 800344a:	4013      	ands	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	0018      	movs	r0, r3
 8003488:	f000 f946 	bl	8003718 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2221      	movs	r2, #33	; 0x21
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	2100      	movs	r1, #0
 80034a0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}  
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b004      	add	sp, #16
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	ffffc00f 	.word	0xffffc00f

080034b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80034be:	2317      	movs	r3, #23
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	5c9b      	ldrb	r3, [r3, r2]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_DMA_Start_IT+0x24>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e04f      	b.n	8003574 <HAL_DMA_Start_IT+0xc4>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	2101      	movs	r1, #1
 80034da:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2221      	movs	r2, #33	; 0x21
 80034e0:	5c9b      	ldrb	r3, [r3, r2]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d13a      	bne.n	800355e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2221      	movs	r2, #33	; 0x21
 80034ec:	2102      	movs	r1, #2
 80034ee:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	438a      	bics	r2, r1
 8003504:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f8d7 	bl	80036c0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d008      	beq.n	800352c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	210e      	movs	r1, #14
 8003526:	430a      	orrs	r2, r1
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e00f      	b.n	800354c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	210a      	movs	r1, #10
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2104      	movs	r1, #4
 8003548:	438a      	bics	r2, r1
 800354a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2101      	movs	r1, #1
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	e007      	b.n	800356e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	2100      	movs	r1, #0
 8003564:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003566:	2317      	movs	r3, #23
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	2202      	movs	r2, #2
 800356c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800356e:	2317      	movs	r3, #23
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	781b      	ldrb	r3, [r3, #0]
} 
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b006      	add	sp, #24
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2204      	movs	r2, #4
 800359a:	409a      	lsls	r2, r3
 800359c:	0013      	movs	r3, r2
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4013      	ands	r3, r2
 80035a2:	d024      	beq.n	80035ee <HAL_DMA_IRQHandler+0x72>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2204      	movs	r2, #4
 80035a8:	4013      	ands	r3, r2
 80035aa:	d020      	beq.n	80035ee <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2220      	movs	r2, #32
 80035b4:	4013      	ands	r3, r2
 80035b6:	d107      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2104      	movs	r1, #4
 80035c4:	438a      	bics	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d0:	2104      	movs	r1, #4
 80035d2:	4091      	lsls	r1, r2
 80035d4:	000a      	movs	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d100      	bne.n	80035e2 <HAL_DMA_IRQHandler+0x66>
 80035e0:	e06a      	b.n	80036b8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	0010      	movs	r0, r2
 80035ea:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80035ec:	e064      	b.n	80036b8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	2202      	movs	r2, #2
 80035f4:	409a      	lsls	r2, r3
 80035f6:	0013      	movs	r3, r2
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4013      	ands	r3, r2
 80035fc:	d02b      	beq.n	8003656 <HAL_DMA_IRQHandler+0xda>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2202      	movs	r2, #2
 8003602:	4013      	ands	r3, r2
 8003604:	d027      	beq.n	8003656 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2220      	movs	r2, #32
 800360e:	4013      	ands	r3, r2
 8003610:	d10b      	bne.n	800362a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	210a      	movs	r1, #10
 800361e:	438a      	bics	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2221      	movs	r2, #33	; 0x21
 8003626:	2101      	movs	r1, #1
 8003628:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	2102      	movs	r1, #2
 8003634:	4091      	lsls	r1, r2
 8003636:	000a      	movs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	d036      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	0010      	movs	r0, r2
 8003652:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003654:	e030      	b.n	80036b8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	2208      	movs	r2, #8
 800365c:	409a      	lsls	r2, r3
 800365e:	0013      	movs	r3, r2
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4013      	ands	r3, r2
 8003664:	d028      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x13c>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2208      	movs	r2, #8
 800366a:	4013      	ands	r3, r2
 800366c:	d024      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	210e      	movs	r1, #14
 800367a:	438a      	bics	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	2101      	movs	r1, #1
 8003688:	4091      	lsls	r1, r2
 800368a:	000a      	movs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2221      	movs	r2, #33	; 0x21
 8003698:	2101      	movs	r1, #1
 800369a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	2100      	movs	r1, #0
 80036a2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	0010      	movs	r0, r2
 80036b4:	4798      	blx	r3
    }
   }
}  
 80036b6:	e7ff      	b.n	80036b8 <HAL_DMA_IRQHandler+0x13c>
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b004      	add	sp, #16
 80036be:	bd80      	pop	{r7, pc}

080036c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d6:	2101      	movs	r1, #1
 80036d8:	4091      	lsls	r1, r2
 80036da:	000a      	movs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d108      	bne.n	8003700 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036fe:	e007      	b.n	8003710 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	60da      	str	r2, [r3, #12]
}
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	46bd      	mov	sp, r7
 8003714:	b004      	add	sp, #16
 8003716:	bd80      	pop	{r7, pc}

08003718 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a08      	ldr	r2, [pc, #32]	; (8003748 <DMA_CalcBaseAndBitshift+0x30>)
 8003726:	4694      	mov	ip, r2
 8003728:	4463      	add	r3, ip
 800372a:	2114      	movs	r1, #20
 800372c:	0018      	movs	r0, r3
 800372e:	f7fc fcf5 	bl	800011c <__udivsi3>
 8003732:	0003      	movs	r3, r0
 8003734:	009a      	lsls	r2, r3, #2
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a03      	ldr	r2, [pc, #12]	; (800374c <DMA_CalcBaseAndBitshift+0x34>)
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	46bd      	mov	sp, r7
 8003744:	b002      	add	sp, #8
 8003746:	bd80      	pop	{r7, pc}
 8003748:	bffdfff8 	.word	0xbffdfff8
 800374c:	40020000 	.word	0x40020000

08003750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375e:	e155      	b.n	8003a0c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2101      	movs	r1, #1
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4091      	lsls	r1, r2
 800376a:	000a      	movs	r2, r1
 800376c:	4013      	ands	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d100      	bne.n	8003778 <HAL_GPIO_Init+0x28>
 8003776:	e146      	b.n	8003a06 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2203      	movs	r2, #3
 800377e:	4013      	ands	r3, r2
 8003780:	2b01      	cmp	r3, #1
 8003782:	d005      	beq.n	8003790 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2203      	movs	r2, #3
 800378a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800378c:	2b02      	cmp	r3, #2
 800378e:	d130      	bne.n	80037f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2203      	movs	r2, #3
 800379c:	409a      	lsls	r2, r3
 800379e:	0013      	movs	r3, r2
 80037a0:	43da      	mvns	r2, r3
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	409a      	lsls	r2, r3
 80037b2:	0013      	movs	r3, r2
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037c6:	2201      	movs	r2, #1
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	409a      	lsls	r2, r3
 80037cc:	0013      	movs	r3, r2
 80037ce:	43da      	mvns	r2, r3
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4013      	ands	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	2201      	movs	r2, #1
 80037de:	401a      	ands	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	409a      	lsls	r2, r3
 80037e4:	0013      	movs	r3, r2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2203      	movs	r2, #3
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d017      	beq.n	800382e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	2203      	movs	r2, #3
 800380a:	409a      	lsls	r2, r3
 800380c:	0013      	movs	r3, r2
 800380e:	43da      	mvns	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	4013      	ands	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	409a      	lsls	r2, r3
 8003820:	0013      	movs	r3, r2
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2203      	movs	r2, #3
 8003834:	4013      	ands	r3, r2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d123      	bne.n	8003882 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	08da      	lsrs	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3208      	adds	r2, #8
 8003842:	0092      	lsls	r2, r2, #2
 8003844:	58d3      	ldr	r3, [r2, r3]
 8003846:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2207      	movs	r2, #7
 800384c:	4013      	ands	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	220f      	movs	r2, #15
 8003852:	409a      	lsls	r2, r3
 8003854:	0013      	movs	r3, r2
 8003856:	43da      	mvns	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2107      	movs	r1, #7
 8003866:	400b      	ands	r3, r1
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	409a      	lsls	r2, r3
 800386c:	0013      	movs	r3, r2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	08da      	lsrs	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3208      	adds	r2, #8
 800387c:	0092      	lsls	r2, r2, #2
 800387e:	6939      	ldr	r1, [r7, #16]
 8003880:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	2203      	movs	r2, #3
 800388e:	409a      	lsls	r2, r3
 8003890:	0013      	movs	r3, r2
 8003892:	43da      	mvns	r2, r3
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4013      	ands	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2203      	movs	r2, #3
 80038a0:	401a      	ands	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	0013      	movs	r3, r2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	23c0      	movs	r3, #192	; 0xc0
 80038bc:	029b      	lsls	r3, r3, #10
 80038be:	4013      	ands	r3, r2
 80038c0:	d100      	bne.n	80038c4 <HAL_GPIO_Init+0x174>
 80038c2:	e0a0      	b.n	8003a06 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c4:	4b57      	ldr	r3, [pc, #348]	; (8003a24 <HAL_GPIO_Init+0x2d4>)
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	4b56      	ldr	r3, [pc, #344]	; (8003a24 <HAL_GPIO_Init+0x2d4>)
 80038ca:	2101      	movs	r1, #1
 80038cc:	430a      	orrs	r2, r1
 80038ce:	619a      	str	r2, [r3, #24]
 80038d0:	4b54      	ldr	r3, [pc, #336]	; (8003a24 <HAL_GPIO_Init+0x2d4>)
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2201      	movs	r2, #1
 80038d6:	4013      	ands	r3, r2
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038dc:	4a52      	ldr	r2, [pc, #328]	; (8003a28 <HAL_GPIO_Init+0x2d8>)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	3302      	adds	r3, #2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	589b      	ldr	r3, [r3, r2]
 80038e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2203      	movs	r2, #3
 80038ee:	4013      	ands	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	220f      	movs	r2, #15
 80038f4:	409a      	lsls	r2, r3
 80038f6:	0013      	movs	r3, r2
 80038f8:	43da      	mvns	r2, r3
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4013      	ands	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	2390      	movs	r3, #144	; 0x90
 8003904:	05db      	lsls	r3, r3, #23
 8003906:	429a      	cmp	r2, r3
 8003908:	d019      	beq.n	800393e <HAL_GPIO_Init+0x1ee>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a47      	ldr	r2, [pc, #284]	; (8003a2c <HAL_GPIO_Init+0x2dc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <HAL_GPIO_Init+0x1ea>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a46      	ldr	r2, [pc, #280]	; (8003a30 <HAL_GPIO_Init+0x2e0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00d      	beq.n	8003936 <HAL_GPIO_Init+0x1e6>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a45      	ldr	r2, [pc, #276]	; (8003a34 <HAL_GPIO_Init+0x2e4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d007      	beq.n	8003932 <HAL_GPIO_Init+0x1e2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a44      	ldr	r2, [pc, #272]	; (8003a38 <HAL_GPIO_Init+0x2e8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d101      	bne.n	800392e <HAL_GPIO_Init+0x1de>
 800392a:	2304      	movs	r3, #4
 800392c:	e008      	b.n	8003940 <HAL_GPIO_Init+0x1f0>
 800392e:	2305      	movs	r3, #5
 8003930:	e006      	b.n	8003940 <HAL_GPIO_Init+0x1f0>
 8003932:	2303      	movs	r3, #3
 8003934:	e004      	b.n	8003940 <HAL_GPIO_Init+0x1f0>
 8003936:	2302      	movs	r3, #2
 8003938:	e002      	b.n	8003940 <HAL_GPIO_Init+0x1f0>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <HAL_GPIO_Init+0x1f0>
 800393e:	2300      	movs	r3, #0
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	2103      	movs	r1, #3
 8003944:	400a      	ands	r2, r1
 8003946:	0092      	lsls	r2, r2, #2
 8003948:	4093      	lsls	r3, r2
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003950:	4935      	ldr	r1, [pc, #212]	; (8003a28 <HAL_GPIO_Init+0x2d8>)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	089b      	lsrs	r3, r3, #2
 8003956:	3302      	adds	r3, #2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800395e:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <HAL_GPIO_Init+0x2ec>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	43da      	mvns	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4013      	ands	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	025b      	lsls	r3, r3, #9
 8003976:	4013      	ands	r3, r2
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003982:	4b2e      	ldr	r3, [pc, #184]	; (8003a3c <HAL_GPIO_Init+0x2ec>)
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003988:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <HAL_GPIO_Init+0x2ec>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	43da      	mvns	r2, r3
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	029b      	lsls	r3, r3, #10
 80039a0:	4013      	ands	r3, r2
 80039a2:	d003      	beq.n	80039ac <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039ac:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <HAL_GPIO_Init+0x2ec>)
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039b2:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <HAL_GPIO_Init+0x2ec>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	43da      	mvns	r2, r3
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	035b      	lsls	r3, r3, #13
 80039ca:	4013      	ands	r3, r2
 80039cc:	d003      	beq.n	80039d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80039d6:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <HAL_GPIO_Init+0x2ec>)
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80039dc:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <HAL_GPIO_Init+0x2ec>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	43da      	mvns	r2, r3
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4013      	ands	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	039b      	lsls	r3, r3, #14
 80039f4:	4013      	ands	r3, r2
 80039f6:	d003      	beq.n	8003a00 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a00:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <HAL_GPIO_Init+0x2ec>)
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	40da      	lsrs	r2, r3
 8003a14:	1e13      	subs	r3, r2, #0
 8003a16:	d000      	beq.n	8003a1a <HAL_GPIO_Init+0x2ca>
 8003a18:	e6a2      	b.n	8003760 <HAL_GPIO_Init+0x10>
  } 
}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b006      	add	sp, #24
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	48000400 	.word	0x48000400
 8003a30:	48000800 	.word	0x48000800
 8003a34:	48000c00 	.word	0x48000c00
 8003a38:	48001000 	.word	0x48001000
 8003a3c:	40010400 	.word	0x40010400

08003a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	0008      	movs	r0, r1
 8003a4a:	0011      	movs	r1, r2
 8003a4c:	1cbb      	adds	r3, r7, #2
 8003a4e:	1c02      	adds	r2, r0, #0
 8003a50:	801a      	strh	r2, [r3, #0]
 8003a52:	1c7b      	adds	r3, r7, #1
 8003a54:	1c0a      	adds	r2, r1, #0
 8003a56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a58:	1c7b      	adds	r3, r7, #1
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d004      	beq.n	8003a6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a60:	1cbb      	adds	r3, r7, #2
 8003a62:	881a      	ldrh	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a68:	e003      	b.n	8003a72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a6a:	1cbb      	adds	r3, r7, #2
 8003a6c:	881a      	ldrh	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b002      	add	sp, #8
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f000 fb76 	bl	800417c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2201      	movs	r2, #1
 8003a96:	4013      	ands	r3, r2
 8003a98:	d100      	bne.n	8003a9c <HAL_RCC_OscConfig+0x20>
 8003a9a:	e08e      	b.n	8003bba <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a9c:	4bc5      	ldr	r3, [pc, #788]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	220c      	movs	r2, #12
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d00e      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003aa8:	4bc2      	ldr	r3, [pc, #776]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	220c      	movs	r2, #12
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d117      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x68>
 8003ab4:	4bbf      	ldr	r3, [pc, #764]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	23c0      	movs	r3, #192	; 0xc0
 8003aba:	025b      	lsls	r3, r3, #9
 8003abc:	401a      	ands	r2, r3
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	025b      	lsls	r3, r3, #9
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac6:	4bbb      	ldr	r3, [pc, #748]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	029b      	lsls	r3, r3, #10
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d100      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x58>
 8003ad2:	e071      	b.n	8003bb8 <HAL_RCC_OscConfig+0x13c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d000      	beq.n	8003ade <HAL_RCC_OscConfig+0x62>
 8003adc:	e06c      	b.n	8003bb8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f000 fb4c 	bl	800417c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d107      	bne.n	8003afc <HAL_RCC_OscConfig+0x80>
 8003aec:	4bb1      	ldr	r3, [pc, #708]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4bb0      	ldr	r3, [pc, #704]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003af2:	2180      	movs	r1, #128	; 0x80
 8003af4:	0249      	lsls	r1, r1, #9
 8003af6:	430a      	orrs	r2, r1
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e02f      	b.n	8003b5c <HAL_RCC_OscConfig+0xe0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10c      	bne.n	8003b1e <HAL_RCC_OscConfig+0xa2>
 8003b04:	4bab      	ldr	r3, [pc, #684]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4baa      	ldr	r3, [pc, #680]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003b0a:	49ab      	ldr	r1, [pc, #684]	; (8003db8 <HAL_RCC_OscConfig+0x33c>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	4ba8      	ldr	r3, [pc, #672]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4ba7      	ldr	r3, [pc, #668]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003b16:	49a9      	ldr	r1, [pc, #676]	; (8003dbc <HAL_RCC_OscConfig+0x340>)
 8003b18:	400a      	ands	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e01e      	b.n	8003b5c <HAL_RCC_OscConfig+0xe0>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b05      	cmp	r3, #5
 8003b24:	d10e      	bne.n	8003b44 <HAL_RCC_OscConfig+0xc8>
 8003b26:	4ba3      	ldr	r3, [pc, #652]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4ba2      	ldr	r3, [pc, #648]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003b2c:	2180      	movs	r1, #128	; 0x80
 8003b2e:	02c9      	lsls	r1, r1, #11
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	4b9f      	ldr	r3, [pc, #636]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b9e      	ldr	r3, [pc, #632]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003b3a:	2180      	movs	r1, #128	; 0x80
 8003b3c:	0249      	lsls	r1, r1, #9
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e00b      	b.n	8003b5c <HAL_RCC_OscConfig+0xe0>
 8003b44:	4b9b      	ldr	r3, [pc, #620]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4b9a      	ldr	r3, [pc, #616]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003b4a:	499b      	ldr	r1, [pc, #620]	; (8003db8 <HAL_RCC_OscConfig+0x33c>)
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	4b98      	ldr	r3, [pc, #608]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4b97      	ldr	r3, [pc, #604]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003b56:	4999      	ldr	r1, [pc, #612]	; (8003dbc <HAL_RCC_OscConfig+0x340>)
 8003b58:	400a      	ands	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d014      	beq.n	8003b8e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fe ff84 	bl	8002a70 <HAL_GetTick>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b6e:	f7fe ff7f 	bl	8002a70 <HAL_GetTick>
 8003b72:	0002      	movs	r2, r0
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b64      	cmp	r3, #100	; 0x64
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e2fd      	b.n	800417c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b80:	4b8c      	ldr	r3, [pc, #560]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	029b      	lsls	r3, r3, #10
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0xf2>
 8003b8c:	e015      	b.n	8003bba <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8e:	f7fe ff6f 	bl	8002a70 <HAL_GetTick>
 8003b92:	0003      	movs	r3, r0
 8003b94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fe ff6a 	bl	8002a70 <HAL_GetTick>
 8003b9c:	0002      	movs	r2, r0
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e2e8      	b.n	800417c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	4b82      	ldr	r3, [pc, #520]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	029b      	lsls	r3, r3, #10
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x11c>
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d100      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x14a>
 8003bc4:	e06c      	b.n	8003ca0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bc6:	4b7b      	ldr	r3, [pc, #492]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	220c      	movs	r2, #12
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bd0:	4b78      	ldr	r3, [pc, #480]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	220c      	movs	r2, #12
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d11f      	bne.n	8003c1c <HAL_RCC_OscConfig+0x1a0>
 8003bdc:	4b75      	ldr	r3, [pc, #468]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	23c0      	movs	r3, #192	; 0xc0
 8003be2:	025b      	lsls	r3, r3, #9
 8003be4:	401a      	ands	r2, r3
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d116      	bne.n	8003c1c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	4b71      	ldr	r3, [pc, #452]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_OscConfig+0x188>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e2bb      	b.n	800417c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c04:	4b6b      	ldr	r3, [pc, #428]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	22f8      	movs	r2, #248	; 0xf8
 8003c0a:	4393      	bics	r3, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00da      	lsls	r2, r3, #3
 8003c14:	4b67      	ldr	r3, [pc, #412]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003c16:	430a      	orrs	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	e041      	b.n	8003ca0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d024      	beq.n	8003c6e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c24:	4b63      	ldr	r3, [pc, #396]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b62      	ldr	r3, [pc, #392]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fe ff1e 	bl	8002a70 <HAL_GetTick>
 8003c34:	0003      	movs	r3, r0
 8003c36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c3a:	f7fe ff19 	bl	8002a70 <HAL_GetTick>
 8003c3e:	0002      	movs	r2, r0
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e297      	b.n	800417c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4c:	4b59      	ldr	r3, [pc, #356]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2202      	movs	r2, #2
 8003c52:	4013      	ands	r3, r2
 8003c54:	d0f1      	beq.n	8003c3a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c56:	4b57      	ldr	r3, [pc, #348]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	22f8      	movs	r2, #248	; 0xf8
 8003c5c:	4393      	bics	r3, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	00da      	lsls	r2, r3, #3
 8003c66:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e018      	b.n	8003ca0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6e:	4b51      	ldr	r3, [pc, #324]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b50      	ldr	r3, [pc, #320]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003c74:	2101      	movs	r1, #1
 8003c76:	438a      	bics	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7a:	f7fe fef9 	bl	8002a70 <HAL_GetTick>
 8003c7e:	0003      	movs	r3, r0
 8003c80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c84:	f7fe fef4 	bl	8002a70 <HAL_GetTick>
 8003c88:	0002      	movs	r2, r0
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e272      	b.n	800417c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d1f1      	bne.n	8003c84 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d036      	beq.n	8003d18 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d019      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb2:	4b40      	ldr	r3, [pc, #256]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cb6:	4b3f      	ldr	r3, [pc, #252]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbe:	f7fe fed7 	bl	8002a70 <HAL_GetTick>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc8:	f7fe fed2 	bl	8002a70 <HAL_GetTick>
 8003ccc:	0002      	movs	r2, r0
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e250      	b.n	800417c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cda:	4b36      	ldr	r3, [pc, #216]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2202      	movs	r2, #2
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d0f1      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x24c>
 8003ce4:	e018      	b.n	8003d18 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce6:	4b33      	ldr	r3, [pc, #204]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cea:	4b32      	ldr	r3, [pc, #200]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003cec:	2101      	movs	r1, #1
 8003cee:	438a      	bics	r2, r1
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf2:	f7fe febd 	bl	8002a70 <HAL_GetTick>
 8003cf6:	0003      	movs	r3, r0
 8003cf8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fe feb8 	bl	8002a70 <HAL_GetTick>
 8003d00:	0002      	movs	r2, r0
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e236      	b.n	800417c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0e:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	2202      	movs	r2, #2
 8003d14:	4013      	ands	r3, r2
 8003d16:	d1f1      	bne.n	8003cfc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d100      	bne.n	8003d24 <HAL_RCC_OscConfig+0x2a8>
 8003d22:	e0b5      	b.n	8003e90 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d24:	201f      	movs	r0, #31
 8003d26:	183b      	adds	r3, r7, r0
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2c:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	055b      	lsls	r3, r3, #21
 8003d34:	4013      	ands	r3, r2
 8003d36:	d110      	bne.n	8003d5a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	0549      	lsls	r1, r1, #21
 8003d42:	430a      	orrs	r2, r1
 8003d44:	61da      	str	r2, [r3, #28]
 8003d46:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	055b      	lsls	r3, r3, #21
 8003d4e:	4013      	ands	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d54:	183b      	adds	r3, r7, r0
 8003d56:	2201      	movs	r2, #1
 8003d58:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5a:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <HAL_RCC_OscConfig+0x344>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4013      	ands	r3, r2
 8003d64:	d11a      	bne.n	8003d9c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d66:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <HAL_RCC_OscConfig+0x344>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <HAL_RCC_OscConfig+0x344>)
 8003d6c:	2180      	movs	r1, #128	; 0x80
 8003d6e:	0049      	lsls	r1, r1, #1
 8003d70:	430a      	orrs	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d74:	f7fe fe7c 	bl	8002a70 <HAL_GetTick>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7e:	f7fe fe77 	bl	8002a70 <HAL_GetTick>
 8003d82:	0002      	movs	r2, r0
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b64      	cmp	r3, #100	; 0x64
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e1f5      	b.n	800417c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_RCC_OscConfig+0x344>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d10f      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x348>
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003da6:	6a1a      	ldr	r2, [r3, #32]
 8003da8:	4b02      	ldr	r3, [pc, #8]	; (8003db4 <HAL_RCC_OscConfig+0x338>)
 8003daa:	2101      	movs	r1, #1
 8003dac:	430a      	orrs	r2, r1
 8003dae:	621a      	str	r2, [r3, #32]
 8003db0:	e036      	b.n	8003e20 <HAL_RCC_OscConfig+0x3a4>
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	40021000 	.word	0x40021000
 8003db8:	fffeffff 	.word	0xfffeffff
 8003dbc:	fffbffff 	.word	0xfffbffff
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10c      	bne.n	8003de6 <HAL_RCC_OscConfig+0x36a>
 8003dcc:	4bca      	ldr	r3, [pc, #808]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003dce:	6a1a      	ldr	r2, [r3, #32]
 8003dd0:	4bc9      	ldr	r3, [pc, #804]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	438a      	bics	r2, r1
 8003dd6:	621a      	str	r2, [r3, #32]
 8003dd8:	4bc7      	ldr	r3, [pc, #796]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003dda:	6a1a      	ldr	r2, [r3, #32]
 8003ddc:	4bc6      	ldr	r3, [pc, #792]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003dde:	2104      	movs	r1, #4
 8003de0:	438a      	bics	r2, r1
 8003de2:	621a      	str	r2, [r3, #32]
 8003de4:	e01c      	b.n	8003e20 <HAL_RCC_OscConfig+0x3a4>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b05      	cmp	r3, #5
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x38c>
 8003dee:	4bc2      	ldr	r3, [pc, #776]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003df0:	6a1a      	ldr	r2, [r3, #32]
 8003df2:	4bc1      	ldr	r3, [pc, #772]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003df4:	2104      	movs	r1, #4
 8003df6:	430a      	orrs	r2, r1
 8003df8:	621a      	str	r2, [r3, #32]
 8003dfa:	4bbf      	ldr	r3, [pc, #764]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003dfc:	6a1a      	ldr	r2, [r3, #32]
 8003dfe:	4bbe      	ldr	r3, [pc, #760]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003e00:	2101      	movs	r1, #1
 8003e02:	430a      	orrs	r2, r1
 8003e04:	621a      	str	r2, [r3, #32]
 8003e06:	e00b      	b.n	8003e20 <HAL_RCC_OscConfig+0x3a4>
 8003e08:	4bbb      	ldr	r3, [pc, #748]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003e0a:	6a1a      	ldr	r2, [r3, #32]
 8003e0c:	4bba      	ldr	r3, [pc, #744]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003e0e:	2101      	movs	r1, #1
 8003e10:	438a      	bics	r2, r1
 8003e12:	621a      	str	r2, [r3, #32]
 8003e14:	4bb8      	ldr	r3, [pc, #736]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003e16:	6a1a      	ldr	r2, [r3, #32]
 8003e18:	4bb7      	ldr	r3, [pc, #732]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003e1a:	2104      	movs	r1, #4
 8003e1c:	438a      	bics	r2, r1
 8003e1e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d014      	beq.n	8003e52 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e28:	f7fe fe22 	bl	8002a70 <HAL_GetTick>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e30:	e009      	b.n	8003e46 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fe fe1d 	bl	8002a70 <HAL_GetTick>
 8003e36:	0002      	movs	r2, r0
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	4aaf      	ldr	r2, [pc, #700]	; (80040fc <HAL_RCC_OscConfig+0x680>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e19a      	b.n	800417c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	4bac      	ldr	r3, [pc, #688]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x3b6>
 8003e50:	e013      	b.n	8003e7a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e52:	f7fe fe0d 	bl	8002a70 <HAL_GetTick>
 8003e56:	0003      	movs	r3, r0
 8003e58:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5a:	e009      	b.n	8003e70 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e5c:	f7fe fe08 	bl	8002a70 <HAL_GetTick>
 8003e60:	0002      	movs	r2, r0
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	4aa5      	ldr	r2, [pc, #660]	; (80040fc <HAL_RCC_OscConfig+0x680>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e185      	b.n	800417c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e70:	4ba1      	ldr	r3, [pc, #644]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	2202      	movs	r2, #2
 8003e76:	4013      	ands	r3, r2
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e7a:	231f      	movs	r3, #31
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e84:	4b9c      	ldr	r3, [pc, #624]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003e86:	69da      	ldr	r2, [r3, #28]
 8003e88:	4b9b      	ldr	r3, [pc, #620]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003e8a:	499d      	ldr	r1, [pc, #628]	; (8004100 <HAL_RCC_OscConfig+0x684>)
 8003e8c:	400a      	ands	r2, r1
 8003e8e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2210      	movs	r2, #16
 8003e96:	4013      	ands	r3, r2
 8003e98:	d063      	beq.n	8003f62 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d12a      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ea2:	4b95      	ldr	r3, [pc, #596]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea6:	4b94      	ldr	r3, [pc, #592]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003eae:	4b92      	ldr	r3, [pc, #584]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb2:	4b91      	ldr	r3, [pc, #580]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eba:	f7fe fdd9 	bl	8002a70 <HAL_GetTick>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ec4:	f7fe fdd4 	bl	8002a70 <HAL_GetTick>
 8003ec8:	0002      	movs	r2, r0
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e152      	b.n	800417c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ed6:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	2202      	movs	r2, #2
 8003edc:	4013      	ands	r3, r2
 8003ede:	d0f1      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ee0:	4b85      	ldr	r3, [pc, #532]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee4:	22f8      	movs	r2, #248	; 0xf8
 8003ee6:	4393      	bics	r3, r2
 8003ee8:	0019      	movs	r1, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	00da      	lsls	r2, r3, #3
 8003ef0:	4b81      	ldr	r3, [pc, #516]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ef6:	e034      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	3305      	adds	r3, #5
 8003efe:	d111      	bne.n	8003f24 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003f00:	4b7d      	ldr	r3, [pc, #500]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f04:	4b7c      	ldr	r3, [pc, #496]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003f06:	2104      	movs	r1, #4
 8003f08:	438a      	bics	r2, r1
 8003f0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f0c:	4b7a      	ldr	r3, [pc, #488]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	22f8      	movs	r2, #248	; 0xf8
 8003f12:	4393      	bics	r3, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	00da      	lsls	r2, r3, #3
 8003f1c:	4b76      	ldr	r3, [pc, #472]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	635a      	str	r2, [r3, #52]	; 0x34
 8003f22:	e01e      	b.n	8003f62 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f24:	4b74      	ldr	r3, [pc, #464]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f28:	4b73      	ldr	r3, [pc, #460]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003f2a:	2104      	movs	r1, #4
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003f30:	4b71      	ldr	r3, [pc, #452]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f34:	4b70      	ldr	r3, [pc, #448]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003f36:	2101      	movs	r1, #1
 8003f38:	438a      	bics	r2, r1
 8003f3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3c:	f7fe fd98 	bl	8002a70 <HAL_GetTick>
 8003f40:	0003      	movs	r3, r0
 8003f42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f46:	f7fe fd93 	bl	8002a70 <HAL_GetTick>
 8003f4a:	0002      	movs	r2, r0
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e111      	b.n	800417c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f58:	4b67      	ldr	r3, [pc, #412]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d1f1      	bne.n	8003f46 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2220      	movs	r2, #32
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d05c      	beq.n	8004026 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003f6c:	4b62      	ldr	r3, [pc, #392]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	220c      	movs	r2, #12
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b0c      	cmp	r3, #12
 8003f76:	d00e      	beq.n	8003f96 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003f78:	4b5f      	ldr	r3, [pc, #380]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	220c      	movs	r2, #12
 8003f7e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d114      	bne.n	8003fae <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003f84:	4b5c      	ldr	r3, [pc, #368]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	23c0      	movs	r3, #192	; 0xc0
 8003f8a:	025b      	lsls	r3, r3, #9
 8003f8c:	401a      	ands	r2, r3
 8003f8e:	23c0      	movs	r3, #192	; 0xc0
 8003f90:	025b      	lsls	r3, r3, #9
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d10b      	bne.n	8003fae <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003f96:	4b58      	ldr	r3, [pc, #352]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	025b      	lsls	r3, r3, #9
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d040      	beq.n	8004024 <HAL_RCC_OscConfig+0x5a8>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d03c      	beq.n	8004024 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e0e6      	b.n	800417c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01b      	beq.n	8003fee <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003fb6:	4b50      	ldr	r3, [pc, #320]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fba:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003fbc:	2180      	movs	r1, #128	; 0x80
 8003fbe:	0249      	lsls	r1, r1, #9
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fd54 	bl	8002a70 <HAL_GetTick>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fce:	f7fe fd4f 	bl	8002a70 <HAL_GetTick>
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0cd      	b.n	800417c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003fe0:	4b45      	ldr	r3, [pc, #276]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	025b      	lsls	r3, r3, #9
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x552>
 8003fec:	e01b      	b.n	8004026 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003fee:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff2:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8003ff4:	4943      	ldr	r1, [pc, #268]	; (8004104 <HAL_RCC_OscConfig+0x688>)
 8003ff6:	400a      	ands	r2, r1
 8003ff8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7fe fd39 	bl	8002a70 <HAL_GetTick>
 8003ffe:	0003      	movs	r3, r0
 8004000:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004004:	f7fe fd34 	bl	8002a70 <HAL_GetTick>
 8004008:	0002      	movs	r2, r0
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e0b2      	b.n	800417c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004016:	4b38      	ldr	r3, [pc, #224]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8004018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	025b      	lsls	r3, r3, #9
 800401e:	4013      	ands	r3, r2
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x588>
 8004022:	e000      	b.n	8004026 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004024:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b00      	cmp	r3, #0
 800402c:	d100      	bne.n	8004030 <HAL_RCC_OscConfig+0x5b4>
 800402e:	e0a4      	b.n	800417a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004030:	4b31      	ldr	r3, [pc, #196]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	220c      	movs	r2, #12
 8004036:	4013      	ands	r3, r2
 8004038:	2b08      	cmp	r3, #8
 800403a:	d100      	bne.n	800403e <HAL_RCC_OscConfig+0x5c2>
 800403c:	e078      	b.n	8004130 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	2b02      	cmp	r3, #2
 8004044:	d14c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004046:	4b2c      	ldr	r3, [pc, #176]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 800404c:	492e      	ldr	r1, [pc, #184]	; (8004108 <HAL_RCC_OscConfig+0x68c>)
 800404e:	400a      	ands	r2, r1
 8004050:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fe fd0d 	bl	8002a70 <HAL_GetTick>
 8004056:	0003      	movs	r3, r0
 8004058:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405c:	f7fe fd08 	bl	8002a70 <HAL_GetTick>
 8004060:	0002      	movs	r2, r0
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e086      	b.n	800417c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800406e:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	049b      	lsls	r3, r3, #18
 8004076:	4013      	ands	r3, r2
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800407a:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	220f      	movs	r2, #15
 8004080:	4393      	bics	r3, r2
 8004082:	0019      	movs	r1, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004088:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 800408a:	430a      	orrs	r2, r1
 800408c:	62da      	str	r2, [r3, #44]	; 0x2c
 800408e:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4a1e      	ldr	r2, [pc, #120]	; (800410c <HAL_RCC_OscConfig+0x690>)
 8004094:	4013      	ands	r3, r2
 8004096:	0019      	movs	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	431a      	orrs	r2, r3
 80040a2:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 80040ae:	2180      	movs	r1, #128	; 0x80
 80040b0:	0449      	lsls	r1, r1, #17
 80040b2:	430a      	orrs	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b6:	f7fe fcdb 	bl	8002a70 <HAL_GetTick>
 80040ba:	0003      	movs	r3, r0
 80040bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fe fcd6 	bl	8002a70 <HAL_GetTick>
 80040c4:	0002      	movs	r2, r0
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e054      	b.n	800417c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	049b      	lsls	r3, r3, #18
 80040da:	4013      	ands	r3, r2
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x644>
 80040de:	e04c      	b.n	800417a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <HAL_RCC_OscConfig+0x67c>)
 80040e6:	4908      	ldr	r1, [pc, #32]	; (8004108 <HAL_RCC_OscConfig+0x68c>)
 80040e8:	400a      	ands	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fe fcc0 	bl	8002a70 <HAL_GetTick>
 80040f0:	0003      	movs	r3, r0
 80040f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f4:	e015      	b.n	8004122 <HAL_RCC_OscConfig+0x6a6>
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	40021000 	.word	0x40021000
 80040fc:	00001388 	.word	0x00001388
 8004100:	efffffff 	.word	0xefffffff
 8004104:	fffeffff 	.word	0xfffeffff
 8004108:	feffffff 	.word	0xfeffffff
 800410c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004110:	f7fe fcae 	bl	8002a70 <HAL_GetTick>
 8004114:	0002      	movs	r2, r0
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e02c      	b.n	800417c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004122:	4b18      	ldr	r3, [pc, #96]	; (8004184 <HAL_RCC_OscConfig+0x708>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	049b      	lsls	r3, r3, #18
 800412a:	4013      	ands	r3, r2
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x694>
 800412e:	e024      	b.n	800417a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e01f      	b.n	800417c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <HAL_RCC_OscConfig+0x708>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004142:	4b10      	ldr	r3, [pc, #64]	; (8004184 <HAL_RCC_OscConfig+0x708>)
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	23c0      	movs	r3, #192	; 0xc0
 800414c:	025b      	lsls	r3, r3, #9
 800414e:	401a      	ands	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	429a      	cmp	r2, r3
 8004156:	d10e      	bne.n	8004176 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	220f      	movs	r2, #15
 800415c:	401a      	ands	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004162:	429a      	cmp	r2, r3
 8004164:	d107      	bne.n	8004176 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	23f0      	movs	r3, #240	; 0xf0
 800416a:	039b      	lsls	r3, r3, #14
 800416c:	401a      	ands	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d001      	beq.n	800417a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	0018      	movs	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	b008      	add	sp, #32
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40021000 	.word	0x40021000

08004188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0bf      	b.n	800431c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800419c:	4b61      	ldr	r3, [pc, #388]	; (8004324 <HAL_RCC_ClockConfig+0x19c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2201      	movs	r2, #1
 80041a2:	4013      	ands	r3, r2
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d911      	bls.n	80041ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <HAL_RCC_ClockConfig+0x19c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2201      	movs	r2, #1
 80041b0:	4393      	bics	r3, r2
 80041b2:	0019      	movs	r1, r3
 80041b4:	4b5b      	ldr	r3, [pc, #364]	; (8004324 <HAL_RCC_ClockConfig+0x19c>)
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041bc:	4b59      	ldr	r3, [pc, #356]	; (8004324 <HAL_RCC_ClockConfig+0x19c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2201      	movs	r2, #1
 80041c2:	4013      	ands	r3, r2
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e0a6      	b.n	800431c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2202      	movs	r2, #2
 80041d4:	4013      	ands	r3, r2
 80041d6:	d015      	beq.n	8004204 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2204      	movs	r2, #4
 80041de:	4013      	ands	r3, r2
 80041e0:	d006      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80041e2:	4b51      	ldr	r3, [pc, #324]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	4b50      	ldr	r3, [pc, #320]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 80041e8:	21e0      	movs	r1, #224	; 0xe0
 80041ea:	00c9      	lsls	r1, r1, #3
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f0:	4b4d      	ldr	r3, [pc, #308]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	22f0      	movs	r2, #240	; 0xf0
 80041f6:	4393      	bics	r3, r2
 80041f8:	0019      	movs	r1, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	4b4a      	ldr	r3, [pc, #296]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 8004200:	430a      	orrs	r2, r1
 8004202:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2201      	movs	r2, #1
 800420a:	4013      	ands	r3, r2
 800420c:	d04c      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	4b44      	ldr	r3, [pc, #272]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	029b      	lsls	r3, r3, #10
 800421e:	4013      	ands	r3, r2
 8004220:	d120      	bne.n	8004264 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e07a      	b.n	800431c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d107      	bne.n	800423e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422e:	4b3e      	ldr	r3, [pc, #248]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	049b      	lsls	r3, r3, #18
 8004236:	4013      	ands	r3, r2
 8004238:	d114      	bne.n	8004264 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e06e      	b.n	800431c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b03      	cmp	r3, #3
 8004244:	d107      	bne.n	8004256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004246:	4b38      	ldr	r3, [pc, #224]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 8004248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	025b      	lsls	r3, r3, #9
 800424e:	4013      	ands	r3, r2
 8004250:	d108      	bne.n	8004264 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e062      	b.n	800431c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004256:	4b34      	ldr	r3, [pc, #208]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2202      	movs	r2, #2
 800425c:	4013      	ands	r3, r2
 800425e:	d101      	bne.n	8004264 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e05b      	b.n	800431c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004264:	4b30      	ldr	r3, [pc, #192]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2203      	movs	r2, #3
 800426a:	4393      	bics	r3, r2
 800426c:	0019      	movs	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	4b2d      	ldr	r3, [pc, #180]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 8004274:	430a      	orrs	r2, r1
 8004276:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004278:	f7fe fbfa 	bl	8002a70 <HAL_GetTick>
 800427c:	0003      	movs	r3, r0
 800427e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004280:	e009      	b.n	8004296 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004282:	f7fe fbf5 	bl	8002a70 <HAL_GetTick>
 8004286:	0002      	movs	r2, r0
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	4a27      	ldr	r2, [pc, #156]	; (800432c <HAL_RCC_ClockConfig+0x1a4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e042      	b.n	800431c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	4b24      	ldr	r3, [pc, #144]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	220c      	movs	r2, #12
 800429c:	401a      	ands	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1ec      	bne.n	8004282 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a8:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <HAL_RCC_ClockConfig+0x19c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2201      	movs	r2, #1
 80042ae:	4013      	ands	r3, r2
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d211      	bcs.n	80042da <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_RCC_ClockConfig+0x19c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2201      	movs	r2, #1
 80042bc:	4393      	bics	r3, r2
 80042be:	0019      	movs	r1, r3
 80042c0:	4b18      	ldr	r3, [pc, #96]	; (8004324 <HAL_RCC_ClockConfig+0x19c>)
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <HAL_RCC_ClockConfig+0x19c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2201      	movs	r2, #1
 80042ce:	4013      	ands	r3, r2
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d001      	beq.n	80042da <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e020      	b.n	800431c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2204      	movs	r2, #4
 80042e0:	4013      	ands	r3, r2
 80042e2:	d009      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80042e4:	4b10      	ldr	r3, [pc, #64]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4a11      	ldr	r2, [pc, #68]	; (8004330 <HAL_RCC_ClockConfig+0x1a8>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	0019      	movs	r1, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042f8:	f000 f820 	bl	800433c <HAL_RCC_GetSysClockFreq>
 80042fc:	0001      	movs	r1, r0
 80042fe:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <HAL_RCC_ClockConfig+0x1a0>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	220f      	movs	r2, #15
 8004306:	4013      	ands	r3, r2
 8004308:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <HAL_RCC_ClockConfig+0x1ac>)
 800430a:	5cd3      	ldrb	r3, [r2, r3]
 800430c:	000a      	movs	r2, r1
 800430e:	40da      	lsrs	r2, r3
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <HAL_RCC_ClockConfig+0x1b0>)
 8004312:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004314:	2000      	movs	r0, #0
 8004316:	f7fe fb65 	bl	80029e4 <HAL_InitTick>
  
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	0018      	movs	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	b004      	add	sp, #16
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40022000 	.word	0x40022000
 8004328:	40021000 	.word	0x40021000
 800432c:	00001388 	.word	0x00001388
 8004330:	fffff8ff 	.word	0xfffff8ff
 8004334:	08007770 	.word	0x08007770
 8004338:	20000000 	.word	0x20000000

0800433c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800433c:	b590      	push	{r4, r7, lr}
 800433e:	b08f      	sub	sp, #60	; 0x3c
 8004340:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004342:	2314      	movs	r3, #20
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	4a38      	ldr	r2, [pc, #224]	; (8004428 <HAL_RCC_GetSysClockFreq+0xec>)
 8004348:	ca13      	ldmia	r2!, {r0, r1, r4}
 800434a:	c313      	stmia	r3!, {r0, r1, r4}
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004350:	1d3b      	adds	r3, r7, #4
 8004352:	4a36      	ldr	r2, [pc, #216]	; (800442c <HAL_RCC_GetSysClockFreq+0xf0>)
 8004354:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004356:	c313      	stmia	r3!, {r0, r1, r4}
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004360:	2300      	movs	r3, #0
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
 8004364:	2300      	movs	r3, #0
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
 8004368:	2300      	movs	r3, #0
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004370:	4b2f      	ldr	r3, [pc, #188]	; (8004430 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	220c      	movs	r2, #12
 800437a:	4013      	ands	r3, r2
 800437c:	2b0c      	cmp	r3, #12
 800437e:	d047      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0xd4>
 8004380:	d849      	bhi.n	8004416 <HAL_RCC_GetSysClockFreq+0xda>
 8004382:	2b04      	cmp	r3, #4
 8004384:	d002      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x50>
 8004386:	2b08      	cmp	r3, #8
 8004388:	d003      	beq.n	8004392 <HAL_RCC_GetSysClockFreq+0x56>
 800438a:	e044      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800438c:	4b29      	ldr	r3, [pc, #164]	; (8004434 <HAL_RCC_GetSysClockFreq+0xf8>)
 800438e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004390:	e044      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	0c9b      	lsrs	r3, r3, #18
 8004396:	220f      	movs	r2, #15
 8004398:	4013      	ands	r3, r2
 800439a:	2214      	movs	r2, #20
 800439c:	18ba      	adds	r2, r7, r2
 800439e:	5cd3      	ldrb	r3, [r2, r3]
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80043a2:	4b23      	ldr	r3, [pc, #140]	; (8004430 <HAL_RCC_GetSysClockFreq+0xf4>)
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	220f      	movs	r2, #15
 80043a8:	4013      	ands	r3, r2
 80043aa:	1d3a      	adds	r2, r7, #4
 80043ac:	5cd3      	ldrb	r3, [r2, r3]
 80043ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b2:	23c0      	movs	r3, #192	; 0xc0
 80043b4:	025b      	lsls	r3, r3, #9
 80043b6:	401a      	ands	r2, r3
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	025b      	lsls	r3, r3, #9
 80043bc:	429a      	cmp	r2, r3
 80043be:	d109      	bne.n	80043d4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043c2:	481c      	ldr	r0, [pc, #112]	; (8004434 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043c4:	f7fb feaa 	bl	800011c <__udivsi3>
 80043c8:	0003      	movs	r3, r0
 80043ca:	001a      	movs	r2, r3
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	4353      	muls	r3, r2
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
 80043d2:	e01a      	b.n	800440a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80043d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d6:	23c0      	movs	r3, #192	; 0xc0
 80043d8:	025b      	lsls	r3, r3, #9
 80043da:	401a      	ands	r2, r3
 80043dc:	23c0      	movs	r3, #192	; 0xc0
 80043de:	025b      	lsls	r3, r3, #9
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d109      	bne.n	80043f8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043e6:	4814      	ldr	r0, [pc, #80]	; (8004438 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043e8:	f7fb fe98 	bl	800011c <__udivsi3>
 80043ec:	0003      	movs	r3, r0
 80043ee:	001a      	movs	r2, r3
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	4353      	muls	r3, r2
 80043f4:	637b      	str	r3, [r7, #52]	; 0x34
 80043f6:	e008      	b.n	800440a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043fa:	480e      	ldr	r0, [pc, #56]	; (8004434 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043fc:	f7fb fe8e 	bl	800011c <__udivsi3>
 8004400:	0003      	movs	r3, r0
 8004402:	001a      	movs	r2, r3
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	4353      	muls	r3, r2
 8004408:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800440a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800440e:	e005      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004412:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004414:	e002      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004416:	4b07      	ldr	r3, [pc, #28]	; (8004434 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004418:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800441a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800441e:	0018      	movs	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	b00f      	add	sp, #60	; 0x3c
 8004424:	bd90      	pop	{r4, r7, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	080076d0 	.word	0x080076d0
 800442c:	080076e0 	.word	0x080076e0
 8004430:	40021000 	.word	0x40021000
 8004434:	007a1200 	.word	0x007a1200
 8004438:	02dc6c00 	.word	0x02dc6c00

0800443c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004440:	4b02      	ldr	r3, [pc, #8]	; (800444c <HAL_RCC_GetHCLKFreq+0x10>)
 8004442:	681b      	ldr	r3, [r3, #0]
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	20000000 	.word	0x20000000

08004450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004454:	f7ff fff2 	bl	800443c <HAL_RCC_GetHCLKFreq>
 8004458:	0001      	movs	r1, r0
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	2207      	movs	r2, #7
 8004462:	4013      	ands	r3, r2
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004466:	5cd3      	ldrb	r3, [r2, r3]
 8004468:	40d9      	lsrs	r1, r3
 800446a:	000b      	movs	r3, r1
}    
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	40021000 	.word	0x40021000
 8004478:	08007780 	.word	0x08007780

0800447c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	025b      	lsls	r3, r3, #9
 8004494:	4013      	ands	r3, r2
 8004496:	d100      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004498:	e08e      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800449a:	2017      	movs	r0, #23
 800449c:	183b      	adds	r3, r7, r0
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a2:	4b6e      	ldr	r3, [pc, #440]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	2380      	movs	r3, #128	; 0x80
 80044a8:	055b      	lsls	r3, r3, #21
 80044aa:	4013      	ands	r3, r2
 80044ac:	d110      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ae:	4b6b      	ldr	r3, [pc, #428]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	4b6a      	ldr	r3, [pc, #424]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044b4:	2180      	movs	r1, #128	; 0x80
 80044b6:	0549      	lsls	r1, r1, #21
 80044b8:	430a      	orrs	r2, r1
 80044ba:	61da      	str	r2, [r3, #28]
 80044bc:	4b67      	ldr	r3, [pc, #412]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	055b      	lsls	r3, r3, #21
 80044c4:	4013      	ands	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ca:	183b      	adds	r3, r7, r0
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	4b63      	ldr	r3, [pc, #396]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4013      	ands	r3, r2
 80044da:	d11a      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044dc:	4b60      	ldr	r3, [pc, #384]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b5f      	ldr	r3, [pc, #380]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044e2:	2180      	movs	r1, #128	; 0x80
 80044e4:	0049      	lsls	r1, r1, #1
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ea:	f7fe fac1 	bl	8002a70 <HAL_GetTick>
 80044ee:	0003      	movs	r3, r0
 80044f0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f2:	e008      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f4:	f7fe fabc 	bl	8002a70 <HAL_GetTick>
 80044f8:	0002      	movs	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e0a6      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004506:	4b56      	ldr	r3, [pc, #344]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4013      	ands	r3, r2
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004512:	4b52      	ldr	r3, [pc, #328]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004514:	6a1a      	ldr	r2, [r3, #32]
 8004516:	23c0      	movs	r3, #192	; 0xc0
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4013      	ands	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d034      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	23c0      	movs	r3, #192	; 0xc0
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4013      	ands	r3, r2
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	429a      	cmp	r2, r3
 8004532:	d02c      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004534:	4b49      	ldr	r3, [pc, #292]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4a4a      	ldr	r2, [pc, #296]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800453a:	4013      	ands	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800453e:	4b47      	ldr	r3, [pc, #284]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004540:	6a1a      	ldr	r2, [r3, #32]
 8004542:	4b46      	ldr	r3, [pc, #280]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	0249      	lsls	r1, r1, #9
 8004548:	430a      	orrs	r2, r1
 800454a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800454c:	4b43      	ldr	r3, [pc, #268]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800454e:	6a1a      	ldr	r2, [r3, #32]
 8004550:	4b42      	ldr	r3, [pc, #264]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004552:	4945      	ldr	r1, [pc, #276]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004554:	400a      	ands	r2, r1
 8004556:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004558:	4b40      	ldr	r3, [pc, #256]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	4013      	ands	r3, r2
 8004564:	d013      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004566:	f7fe fa83 	bl	8002a70 <HAL_GetTick>
 800456a:	0003      	movs	r3, r0
 800456c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456e:	e009      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004570:	f7fe fa7e 	bl	8002a70 <HAL_GetTick>
 8004574:	0002      	movs	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	4a3c      	ldr	r2, [pc, #240]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d901      	bls.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e067      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004584:	4b35      	ldr	r3, [pc, #212]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	2202      	movs	r2, #2
 800458a:	4013      	ands	r3, r2
 800458c:	d0f0      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800458e:	4b33      	ldr	r3, [pc, #204]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4a34      	ldr	r2, [pc, #208]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004594:	4013      	ands	r3, r2
 8004596:	0019      	movs	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	4b2f      	ldr	r3, [pc, #188]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800459e:	430a      	orrs	r2, r1
 80045a0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045a2:	2317      	movs	r3, #23
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d105      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ac:	4b2b      	ldr	r3, [pc, #172]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	4b2a      	ldr	r3, [pc, #168]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045b2:	492f      	ldr	r1, [pc, #188]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80045b4:	400a      	ands	r2, r1
 80045b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2201      	movs	r2, #1
 80045be:	4013      	ands	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045c2:	4b26      	ldr	r3, [pc, #152]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	2203      	movs	r2, #3
 80045c8:	4393      	bics	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	4b22      	ldr	r3, [pc, #136]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045d2:	430a      	orrs	r2, r1
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2202      	movs	r2, #2
 80045dc:	4013      	ands	r3, r2
 80045de:	d009      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045e0:	4b1e      	ldr	r3, [pc, #120]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	4a23      	ldr	r2, [pc, #140]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	0019      	movs	r1, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045f0:	430a      	orrs	r2, r1
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2220      	movs	r2, #32
 80045fa:	4013      	ands	r3, r2
 80045fc:	d009      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045fe:	4b17      	ldr	r3, [pc, #92]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	2210      	movs	r2, #16
 8004604:	4393      	bics	r3, r2
 8004606:	0019      	movs	r1, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	4b13      	ldr	r3, [pc, #76]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800460e:	430a      	orrs	r2, r1
 8004610:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	2380      	movs	r3, #128	; 0x80
 8004618:	029b      	lsls	r3, r3, #10
 800461a:	4013      	ands	r3, r2
 800461c:	d009      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	4393      	bics	r3, r2
 8004626:	0019      	movs	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699a      	ldr	r2, [r3, #24]
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800462e:	430a      	orrs	r2, r1
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	2380      	movs	r3, #128	; 0x80
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4013      	ands	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800463e:	4b07      	ldr	r3, [pc, #28]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	2240      	movs	r2, #64	; 0x40
 8004644:	4393      	bics	r3, r2
 8004646:	0019      	movs	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695a      	ldr	r2, [r3, #20]
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800464e:	430a      	orrs	r2, r1
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	0018      	movs	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	b006      	add	sp, #24
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40021000 	.word	0x40021000
 8004660:	40007000 	.word	0x40007000
 8004664:	fffffcff 	.word	0xfffffcff
 8004668:	fffeffff 	.word	0xfffeffff
 800466c:	00001388 	.word	0x00001388
 8004670:	efffffff 	.word	0xefffffff
 8004674:	fffcffff 	.word	0xfffcffff

08004678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e042      	b.n	8004710 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	223d      	movs	r2, #61	; 0x3d
 800468e:	5c9b      	ldrb	r3, [r3, r2]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d107      	bne.n	80046a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	223c      	movs	r2, #60	; 0x3c
 800469a:	2100      	movs	r1, #0
 800469c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7fe f853 	bl	800274c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	223d      	movs	r2, #61	; 0x3d
 80046aa:	2102      	movs	r1, #2
 80046ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3304      	adds	r3, #4
 80046b6:	0019      	movs	r1, r3
 80046b8:	0010      	movs	r0, r2
 80046ba:	f000 fa91 	bl	8004be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2246      	movs	r2, #70	; 0x46
 80046c2:	2101      	movs	r1, #1
 80046c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	223e      	movs	r2, #62	; 0x3e
 80046ca:	2101      	movs	r1, #1
 80046cc:	5499      	strb	r1, [r3, r2]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	223f      	movs	r2, #63	; 0x3f
 80046d2:	2101      	movs	r1, #1
 80046d4:	5499      	strb	r1, [r3, r2]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2240      	movs	r2, #64	; 0x40
 80046da:	2101      	movs	r1, #1
 80046dc:	5499      	strb	r1, [r3, r2]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2241      	movs	r2, #65	; 0x41
 80046e2:	2101      	movs	r1, #1
 80046e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2242      	movs	r2, #66	; 0x42
 80046ea:	2101      	movs	r1, #1
 80046ec:	5499      	strb	r1, [r3, r2]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2243      	movs	r2, #67	; 0x43
 80046f2:	2101      	movs	r1, #1
 80046f4:	5499      	strb	r1, [r3, r2]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2244      	movs	r2, #68	; 0x44
 80046fa:	2101      	movs	r1, #1
 80046fc:	5499      	strb	r1, [r3, r2]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2245      	movs	r2, #69	; 0x45
 8004702:	2101      	movs	r1, #1
 8004704:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	223d      	movs	r2, #61	; 0x3d
 800470a:	2101      	movs	r1, #1
 800470c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	0018      	movs	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	b002      	add	sp, #8
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	223d      	movs	r2, #61	; 0x3d
 8004724:	5c9b      	ldrb	r3, [r3, r2]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	d001      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e03b      	b.n	80047a8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	223d      	movs	r2, #61	; 0x3d
 8004734:	2102      	movs	r1, #2
 8004736:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2101      	movs	r1, #1
 8004744:	430a      	orrs	r2, r1
 8004746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <HAL_TIM_Base_Start_IT+0x98>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00f      	beq.n	8004772 <HAL_TIM_Base_Start_IT+0x5a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	05db      	lsls	r3, r3, #23
 800475a:	429a      	cmp	r2, r3
 800475c:	d009      	beq.n	8004772 <HAL_TIM_Base_Start_IT+0x5a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d004      	beq.n	8004772 <HAL_TIM_Base_Start_IT+0x5a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d111      	bne.n	8004796 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2207      	movs	r2, #7
 800477a:	4013      	ands	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b06      	cmp	r3, #6
 8004782:	d010      	beq.n	80047a6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2101      	movs	r1, #1
 8004790:	430a      	orrs	r2, r1
 8004792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004794:	e007      	b.n	80047a6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2101      	movs	r1, #1
 80047a2:	430a      	orrs	r2, r1
 80047a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	0018      	movs	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b004      	add	sp, #16
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	40000400 	.word	0x40000400
 80047b8:	40014000 	.word	0x40014000

080047bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2202      	movs	r2, #2
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d124      	bne.n	800481c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2202      	movs	r2, #2
 80047da:	4013      	ands	r3, r2
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d11d      	bne.n	800481c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2203      	movs	r2, #3
 80047e6:	4252      	negs	r2, r2
 80047e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2203      	movs	r2, #3
 80047f8:	4013      	ands	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	0018      	movs	r0, r3
 8004800:	f000 f9d6 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 8004804:	e007      	b.n	8004816 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	0018      	movs	r0, r3
 800480a:	f000 f9c9 	bl	8004ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0018      	movs	r0, r3
 8004812:	f000 f9d5 	bl	8004bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2204      	movs	r2, #4
 8004824:	4013      	ands	r3, r2
 8004826:	2b04      	cmp	r3, #4
 8004828:	d125      	bne.n	8004876 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2204      	movs	r2, #4
 8004832:	4013      	ands	r3, r2
 8004834:	2b04      	cmp	r3, #4
 8004836:	d11e      	bne.n	8004876 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2205      	movs	r2, #5
 800483e:	4252      	negs	r2, r2
 8004840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	23c0      	movs	r3, #192	; 0xc0
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4013      	ands	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f000 f9a9 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 800485e:	e007      	b.n	8004870 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	0018      	movs	r0, r3
 8004864:	f000 f99c 	bl	8004ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	0018      	movs	r0, r3
 800486c:	f000 f9a8 	bl	8004bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2208      	movs	r2, #8
 800487e:	4013      	ands	r3, r2
 8004880:	2b08      	cmp	r3, #8
 8004882:	d124      	bne.n	80048ce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2208      	movs	r2, #8
 800488c:	4013      	ands	r3, r2
 800488e:	2b08      	cmp	r3, #8
 8004890:	d11d      	bne.n	80048ce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2209      	movs	r2, #9
 8004898:	4252      	negs	r2, r2
 800489a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2204      	movs	r2, #4
 80048a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	2203      	movs	r2, #3
 80048aa:	4013      	ands	r3, r2
 80048ac:	d004      	beq.n	80048b8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f000 f97d 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 80048b6:	e007      	b.n	80048c8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	0018      	movs	r0, r3
 80048bc:	f000 f970 	bl	8004ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	0018      	movs	r0, r3
 80048c4:	f000 f97c 	bl	8004bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2210      	movs	r2, #16
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d125      	bne.n	8004928 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	2210      	movs	r2, #16
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d11e      	bne.n	8004928 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2211      	movs	r2, #17
 80048f0:	4252      	negs	r2, r2
 80048f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2208      	movs	r2, #8
 80048f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	23c0      	movs	r3, #192	; 0xc0
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4013      	ands	r3, r2
 8004906:	d004      	beq.n	8004912 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	0018      	movs	r0, r3
 800490c:	f000 f950 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 8004910:	e007      	b.n	8004922 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	0018      	movs	r0, r3
 8004916:	f000 f943 	bl	8004ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	0018      	movs	r0, r3
 800491e:	f000 f94f 	bl	8004bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2201      	movs	r2, #1
 8004930:	4013      	ands	r3, r2
 8004932:	2b01      	cmp	r3, #1
 8004934:	d10f      	bne.n	8004956 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	4013      	ands	r3, r2
 8004940:	2b01      	cmp	r3, #1
 8004942:	d108      	bne.n	8004956 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2202      	movs	r2, #2
 800494a:	4252      	negs	r2, r2
 800494c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0018      	movs	r0, r3
 8004952:	f000 f91d 	bl	8004b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2280      	movs	r2, #128	; 0x80
 800495e:	4013      	ands	r3, r2
 8004960:	2b80      	cmp	r3, #128	; 0x80
 8004962:	d10f      	bne.n	8004984 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2280      	movs	r2, #128	; 0x80
 800496c:	4013      	ands	r3, r2
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d108      	bne.n	8004984 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2281      	movs	r2, #129	; 0x81
 8004978:	4252      	negs	r2, r2
 800497a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	0018      	movs	r0, r3
 8004980:	f000 faae 	bl	8004ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2240      	movs	r2, #64	; 0x40
 800498c:	4013      	ands	r3, r2
 800498e:	2b40      	cmp	r3, #64	; 0x40
 8004990:	d10f      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	2240      	movs	r2, #64	; 0x40
 800499a:	4013      	ands	r3, r2
 800499c:	2b40      	cmp	r3, #64	; 0x40
 800499e:	d108      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2241      	movs	r2, #65	; 0x41
 80049a6:	4252      	negs	r2, r2
 80049a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f000 f90f 	bl	8004bd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	2220      	movs	r2, #32
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d10f      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d108      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2221      	movs	r2, #33	; 0x21
 80049d4:	4252      	negs	r2, r2
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	0018      	movs	r0, r3
 80049dc:	f000 fa78 	bl	8004ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b002      	add	sp, #8
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049f2:	230f      	movs	r3, #15
 80049f4:	18fb      	adds	r3, r7, r3
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	223c      	movs	r2, #60	; 0x3c
 80049fe:	5c9b      	ldrb	r3, [r3, r2]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_TIM_ConfigClockSource+0x20>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e0bc      	b.n	8004b82 <HAL_TIM_ConfigClockSource+0x19a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	223c      	movs	r2, #60	; 0x3c
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	223d      	movs	r2, #61	; 0x3d
 8004a14:	2102      	movs	r1, #2
 8004a16:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2277      	movs	r2, #119	; 0x77
 8004a24:	4393      	bics	r3, r2
 8004a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4a58      	ldr	r2, [pc, #352]	; (8004b8c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2280      	movs	r2, #128	; 0x80
 8004a3e:	0192      	lsls	r2, r2, #6
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d040      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0xde>
 8004a44:	2280      	movs	r2, #128	; 0x80
 8004a46:	0192      	lsls	r2, r2, #6
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d900      	bls.n	8004a4e <HAL_TIM_ConfigClockSource+0x66>
 8004a4c:	e088      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x178>
 8004a4e:	2280      	movs	r2, #128	; 0x80
 8004a50:	0152      	lsls	r2, r2, #5
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d100      	bne.n	8004a58 <HAL_TIM_ConfigClockSource+0x70>
 8004a56:	e088      	b.n	8004b6a <HAL_TIM_ConfigClockSource+0x182>
 8004a58:	2280      	movs	r2, #128	; 0x80
 8004a5a:	0152      	lsls	r2, r2, #5
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d900      	bls.n	8004a62 <HAL_TIM_ConfigClockSource+0x7a>
 8004a60:	e07e      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x178>
 8004a62:	2b70      	cmp	r3, #112	; 0x70
 8004a64:	d018      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0xb0>
 8004a66:	d900      	bls.n	8004a6a <HAL_TIM_ConfigClockSource+0x82>
 8004a68:	e07a      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x178>
 8004a6a:	2b60      	cmp	r3, #96	; 0x60
 8004a6c:	d04f      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x126>
 8004a6e:	d900      	bls.n	8004a72 <HAL_TIM_ConfigClockSource+0x8a>
 8004a70:	e076      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x178>
 8004a72:	2b50      	cmp	r3, #80	; 0x50
 8004a74:	d03b      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x106>
 8004a76:	d900      	bls.n	8004a7a <HAL_TIM_ConfigClockSource+0x92>
 8004a78:	e072      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x178>
 8004a7a:	2b40      	cmp	r3, #64	; 0x40
 8004a7c:	d057      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x146>
 8004a7e:	d900      	bls.n	8004a82 <HAL_TIM_ConfigClockSource+0x9a>
 8004a80:	e06e      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x178>
 8004a82:	2b30      	cmp	r3, #48	; 0x30
 8004a84:	d063      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x166>
 8004a86:	d86b      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x178>
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d060      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x166>
 8004a8c:	d868      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x178>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d05d      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x166>
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d05b      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x166>
 8004a96:	e063      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	6899      	ldr	r1, [r3, #8]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f000 f994 	bl	8004dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2277      	movs	r2, #119	; 0x77
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	609a      	str	r2, [r3, #8]
      break;
 8004ac4:	e052      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6899      	ldr	r1, [r3, #8]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f000 f97d 	bl	8004dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2180      	movs	r1, #128	; 0x80
 8004ae6:	01c9      	lsls	r1, r1, #7
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	609a      	str	r2, [r3, #8]
      break;
 8004aec:	e03e      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	001a      	movs	r2, r3
 8004afc:	f000 f8f0 	bl	8004ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2150      	movs	r1, #80	; 0x50
 8004b06:	0018      	movs	r0, r3
 8004b08:	f000 f94a 	bl	8004da0 <TIM_ITRx_SetConfig>
      break;
 8004b0c:	e02e      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6859      	ldr	r1, [r3, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	001a      	movs	r2, r3
 8004b1c:	f000 f90e 	bl	8004d3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2160      	movs	r1, #96	; 0x60
 8004b26:	0018      	movs	r0, r3
 8004b28:	f000 f93a 	bl	8004da0 <TIM_ITRx_SetConfig>
      break;
 8004b2c:	e01e      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6859      	ldr	r1, [r3, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	001a      	movs	r2, r3
 8004b3c:	f000 f8d0 	bl	8004ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2140      	movs	r1, #64	; 0x40
 8004b46:	0018      	movs	r0, r3
 8004b48:	f000 f92a 	bl	8004da0 <TIM_ITRx_SetConfig>
      break;
 8004b4c:	e00e      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	0019      	movs	r1, r3
 8004b58:	0010      	movs	r0, r2
 8004b5a:	f000 f921 	bl	8004da0 <TIM_ITRx_SetConfig>
      break;
 8004b5e:	e005      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004b60:	230f      	movs	r3, #15
 8004b62:	18fb      	adds	r3, r7, r3
 8004b64:	2201      	movs	r2, #1
 8004b66:	701a      	strb	r2, [r3, #0]
      break;
 8004b68:	e000      	b.n	8004b6c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004b6a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	223d      	movs	r2, #61	; 0x3d
 8004b70:	2101      	movs	r1, #1
 8004b72:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	223c      	movs	r2, #60	; 0x3c
 8004b78:	2100      	movs	r1, #0
 8004b7a:	5499      	strb	r1, [r3, r2]

  return status;
 8004b7c:	230f      	movs	r3, #15
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	781b      	ldrb	r3, [r3, #0]
}
 8004b82:	0018      	movs	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b004      	add	sp, #16
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	ffff00ff 	.word	0xffff00ff

08004b90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b002      	add	sp, #8
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bb8:	46c0      	nop			; (mov r8, r8)
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b002      	add	sp, #8
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bc8:	46c0      	nop			; (mov r8, r8)
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b002      	add	sp, #8
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b002      	add	sp, #8
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a34      	ldr	r2, [pc, #208]	; (8004cc4 <TIM_Base_SetConfig+0xe4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d008      	beq.n	8004c0a <TIM_Base_SetConfig+0x2a>
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	05db      	lsls	r3, r3, #23
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d003      	beq.n	8004c0a <TIM_Base_SetConfig+0x2a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a30      	ldr	r2, [pc, #192]	; (8004cc8 <TIM_Base_SetConfig+0xe8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d108      	bne.n	8004c1c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2270      	movs	r2, #112	; 0x70
 8004c0e:	4393      	bics	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a29      	ldr	r2, [pc, #164]	; (8004cc4 <TIM_Base_SetConfig+0xe4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d018      	beq.n	8004c56 <TIM_Base_SetConfig+0x76>
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	2380      	movs	r3, #128	; 0x80
 8004c28:	05db      	lsls	r3, r3, #23
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d013      	beq.n	8004c56 <TIM_Base_SetConfig+0x76>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a25      	ldr	r2, [pc, #148]	; (8004cc8 <TIM_Base_SetConfig+0xe8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00f      	beq.n	8004c56 <TIM_Base_SetConfig+0x76>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <TIM_Base_SetConfig+0xec>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00b      	beq.n	8004c56 <TIM_Base_SetConfig+0x76>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a23      	ldr	r2, [pc, #140]	; (8004cd0 <TIM_Base_SetConfig+0xf0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <TIM_Base_SetConfig+0x76>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <TIM_Base_SetConfig+0xf4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <TIM_Base_SetConfig+0x76>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a21      	ldr	r2, [pc, #132]	; (8004cd8 <TIM_Base_SetConfig+0xf8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d108      	bne.n	8004c68 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a20      	ldr	r2, [pc, #128]	; (8004cdc <TIM_Base_SetConfig+0xfc>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2280      	movs	r2, #128	; 0x80
 8004c6c:	4393      	bics	r3, r2
 8004c6e:	001a      	movs	r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a0c      	ldr	r2, [pc, #48]	; (8004cc4 <TIM_Base_SetConfig+0xe4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00b      	beq.n	8004cae <TIM_Base_SetConfig+0xce>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a0d      	ldr	r2, [pc, #52]	; (8004cd0 <TIM_Base_SetConfig+0xf0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_Base_SetConfig+0xce>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a0c      	ldr	r2, [pc, #48]	; (8004cd4 <TIM_Base_SetConfig+0xf4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_Base_SetConfig+0xce>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a0b      	ldr	r2, [pc, #44]	; (8004cd8 <TIM_Base_SetConfig+0xf8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d103      	bne.n	8004cb6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	615a      	str	r2, [r3, #20]
}
 8004cbc:	46c0      	nop			; (mov r8, r8)
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b004      	add	sp, #16
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40012c00 	.word	0x40012c00
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40002000 	.word	0x40002000
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800
 8004cdc:	fffffcff 	.word	0xfffffcff

08004ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	4393      	bics	r3, r2
 8004cfa:	001a      	movs	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	22f0      	movs	r2, #240	; 0xf0
 8004d0a:	4393      	bics	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	220a      	movs	r2, #10
 8004d1c:	4393      	bics	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b006      	add	sp, #24
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	4393      	bics	r3, r2
 8004d50:	001a      	movs	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	4a0d      	ldr	r2, [pc, #52]	; (8004d9c <TIM_TI2_ConfigInputStage+0x60>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	031b      	lsls	r3, r3, #12
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	22a0      	movs	r2, #160	; 0xa0
 8004d78:	4393      	bics	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b006      	add	sp, #24
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	ffff0fff 	.word	0xffff0fff

08004da0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2270      	movs	r2, #112	; 0x70
 8004db4:	4393      	bics	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	2207      	movs	r2, #7
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	609a      	str	r2, [r3, #8]
}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b004      	add	sp, #16
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <TIM_ETR_SetConfig+0x3c>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	021a      	lsls	r2, r3, #8
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	609a      	str	r2, [r3, #8]
}
 8004e08:	46c0      	nop			; (mov r8, r8)
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b006      	add	sp, #24
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	ffff00ff 	.word	0xffff00ff

08004e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	223c      	movs	r2, #60	; 0x3c
 8004e22:	5c9b      	ldrb	r3, [r3, r2]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e047      	b.n	8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	223c      	movs	r2, #60	; 0x3c
 8004e30:	2101      	movs	r1, #1
 8004e32:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	223d      	movs	r2, #61	; 0x3d
 8004e38:	2102      	movs	r1, #2
 8004e3a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2270      	movs	r2, #112	; 0x70
 8004e50:	4393      	bics	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a16      	ldr	r2, [pc, #88]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00f      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	05db      	lsls	r3, r3, #23
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d009      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d004      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10c      	bne.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2280      	movs	r2, #128	; 0x80
 8004e94:	4393      	bics	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	223d      	movs	r2, #61	; 0x3d
 8004eae:	2101      	movs	r1, #1
 8004eb0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	223c      	movs	r2, #60	; 0x3c
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b004      	add	sp, #16
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40014000 	.word	0x40014000

08004ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	b002      	add	sp, #8
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b002      	add	sp, #8
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e044      	b.n	8004f8c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d107      	bne.n	8004f1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2274      	movs	r2, #116	; 0x74
 8004f0e:	2100      	movs	r1, #0
 8004f10:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	0018      	movs	r0, r3
 8004f16:	f7fd fc5b 	bl	80027d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2224      	movs	r2, #36	; 0x24
 8004f1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	438a      	bics	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	0018      	movs	r0, r3
 8004f34:	f000 f8da 	bl	80050ec <UART_SetConfig>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e024      	b.n	8004f8c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f000 fa55 	bl	80053fc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	490d      	ldr	r1, [pc, #52]	; (8004f94 <HAL_UART_Init+0xa4>)
 8004f5e:	400a      	ands	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	212a      	movs	r1, #42	; 0x2a
 8004f6e:	438a      	bics	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	0018      	movs	r0, r3
 8004f86:	f000 faed 	bl	8005564 <UART_CheckIdleState>
 8004f8a:	0003      	movs	r3, r0
}
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b002      	add	sp, #8
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	ffffb7ff 	.word	0xffffb7ff

08004f98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	; 0x28
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	1dbb      	adds	r3, r7, #6
 8004fa6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d000      	beq.n	8004fb2 <HAL_UART_Transmit+0x1a>
 8004fb0:	e096      	b.n	80050e0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_UART_Transmit+0x28>
 8004fb8:	1dbb      	adds	r3, r7, #6
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e08e      	b.n	80050e2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	015b      	lsls	r3, r3, #5
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d109      	bne.n	8004fe4 <HAL_UART_Transmit+0x4c>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d001      	beq.n	8004fe4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e07e      	b.n	80050e2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2274      	movs	r2, #116	; 0x74
 8004fe8:	5c9b      	ldrb	r3, [r3, r2]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Transmit+0x5a>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e077      	b.n	80050e2 <HAL_UART_Transmit+0x14a>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2274      	movs	r2, #116	; 0x74
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2280      	movs	r2, #128	; 0x80
 8004ffe:	2100      	movs	r1, #0
 8005000:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2221      	movs	r2, #33	; 0x21
 8005006:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005008:	f7fd fd32 	bl	8002a70 <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1dba      	adds	r2, r7, #6
 8005014:	2150      	movs	r1, #80	; 0x50
 8005016:	8812      	ldrh	r2, [r2, #0]
 8005018:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1dba      	adds	r2, r7, #6
 800501e:	2152      	movs	r1, #82	; 0x52
 8005020:	8812      	ldrh	r2, [r2, #0]
 8005022:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	015b      	lsls	r3, r3, #5
 800502c:	429a      	cmp	r2, r3
 800502e:	d108      	bne.n	8005042 <HAL_UART_Transmit+0xaa>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d104      	bne.n	8005042 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005038:	2300      	movs	r3, #0
 800503a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	61bb      	str	r3, [r7, #24]
 8005040:	e003      	b.n	800504a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2274      	movs	r2, #116	; 0x74
 800504e:	2100      	movs	r1, #0
 8005050:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005052:	e02d      	b.n	80050b0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	0013      	movs	r3, r2
 800505e:	2200      	movs	r2, #0
 8005060:	2180      	movs	r1, #128	; 0x80
 8005062:	f000 fac7 	bl	80055f4 <UART_WaitOnFlagUntilTimeout>
 8005066:	1e03      	subs	r3, r0, #0
 8005068:	d001      	beq.n	800506e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e039      	b.n	80050e2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	881a      	ldrh	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	05d2      	lsls	r2, r2, #23
 800507e:	0dd2      	lsrs	r2, r2, #23
 8005080:	b292      	uxth	r2, r2
 8005082:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	3302      	adds	r3, #2
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	e008      	b.n	800509e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	781a      	ldrb	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	b292      	uxth	r2, r2
 8005096:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	3301      	adds	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2252      	movs	r2, #82	; 0x52
 80050a2:	5a9b      	ldrh	r3, [r3, r2]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b299      	uxth	r1, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2252      	movs	r2, #82	; 0x52
 80050ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2252      	movs	r2, #82	; 0x52
 80050b4:	5a9b      	ldrh	r3, [r3, r2]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1cb      	bne.n	8005054 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	0013      	movs	r3, r2
 80050c6:	2200      	movs	r2, #0
 80050c8:	2140      	movs	r1, #64	; 0x40
 80050ca:	f000 fa93 	bl	80055f4 <UART_WaitOnFlagUntilTimeout>
 80050ce:	1e03      	subs	r3, r0, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e005      	b.n	80050e2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	e000      	b.n	80050e2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80050e0:	2302      	movs	r3, #2
  }
}
 80050e2:	0018      	movs	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	b008      	add	sp, #32
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050f4:	231e      	movs	r3, #30
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4aaf      	ldr	r2, [pc, #700]	; (80053d8 <UART_SetConfig+0x2ec>)
 800511c:	4013      	ands	r3, r2
 800511e:	0019      	movs	r1, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	430a      	orrs	r2, r1
 8005128:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	4aaa      	ldr	r2, [pc, #680]	; (80053dc <UART_SetConfig+0x2f0>)
 8005132:	4013      	ands	r3, r2
 8005134:	0019      	movs	r1, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	4aa1      	ldr	r2, [pc, #644]	; (80053e0 <UART_SetConfig+0x2f4>)
 800515a:	4013      	ands	r3, r2
 800515c:	0019      	movs	r1, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	430a      	orrs	r2, r1
 8005166:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a9d      	ldr	r2, [pc, #628]	; (80053e4 <UART_SetConfig+0x2f8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d127      	bne.n	80051c2 <UART_SetConfig+0xd6>
 8005172:	4b9d      	ldr	r3, [pc, #628]	; (80053e8 <UART_SetConfig+0x2fc>)
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	2203      	movs	r2, #3
 8005178:	4013      	ands	r3, r2
 800517a:	2b03      	cmp	r3, #3
 800517c:	d00d      	beq.n	800519a <UART_SetConfig+0xae>
 800517e:	d81b      	bhi.n	80051b8 <UART_SetConfig+0xcc>
 8005180:	2b02      	cmp	r3, #2
 8005182:	d014      	beq.n	80051ae <UART_SetConfig+0xc2>
 8005184:	d818      	bhi.n	80051b8 <UART_SetConfig+0xcc>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <UART_SetConfig+0xa4>
 800518a:	2b01      	cmp	r3, #1
 800518c:	d00a      	beq.n	80051a4 <UART_SetConfig+0xb8>
 800518e:	e013      	b.n	80051b8 <UART_SetConfig+0xcc>
 8005190:	231f      	movs	r3, #31
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	2200      	movs	r2, #0
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e065      	b.n	8005266 <UART_SetConfig+0x17a>
 800519a:	231f      	movs	r3, #31
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	2202      	movs	r2, #2
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e060      	b.n	8005266 <UART_SetConfig+0x17a>
 80051a4:	231f      	movs	r3, #31
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	2204      	movs	r2, #4
 80051aa:	701a      	strb	r2, [r3, #0]
 80051ac:	e05b      	b.n	8005266 <UART_SetConfig+0x17a>
 80051ae:	231f      	movs	r3, #31
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	2208      	movs	r2, #8
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	e056      	b.n	8005266 <UART_SetConfig+0x17a>
 80051b8:	231f      	movs	r3, #31
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	2210      	movs	r2, #16
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	e051      	b.n	8005266 <UART_SetConfig+0x17a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a89      	ldr	r2, [pc, #548]	; (80053ec <UART_SetConfig+0x300>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d134      	bne.n	8005236 <UART_SetConfig+0x14a>
 80051cc:	4b86      	ldr	r3, [pc, #536]	; (80053e8 <UART_SetConfig+0x2fc>)
 80051ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d0:	23c0      	movs	r3, #192	; 0xc0
 80051d2:	029b      	lsls	r3, r3, #10
 80051d4:	4013      	ands	r3, r2
 80051d6:	22c0      	movs	r2, #192	; 0xc0
 80051d8:	0292      	lsls	r2, r2, #10
 80051da:	4293      	cmp	r3, r2
 80051dc:	d017      	beq.n	800520e <UART_SetConfig+0x122>
 80051de:	22c0      	movs	r2, #192	; 0xc0
 80051e0:	0292      	lsls	r2, r2, #10
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d822      	bhi.n	800522c <UART_SetConfig+0x140>
 80051e6:	2280      	movs	r2, #128	; 0x80
 80051e8:	0292      	lsls	r2, r2, #10
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d019      	beq.n	8005222 <UART_SetConfig+0x136>
 80051ee:	2280      	movs	r2, #128	; 0x80
 80051f0:	0292      	lsls	r2, r2, #10
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d81a      	bhi.n	800522c <UART_SetConfig+0x140>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d004      	beq.n	8005204 <UART_SetConfig+0x118>
 80051fa:	2280      	movs	r2, #128	; 0x80
 80051fc:	0252      	lsls	r2, r2, #9
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00a      	beq.n	8005218 <UART_SetConfig+0x12c>
 8005202:	e013      	b.n	800522c <UART_SetConfig+0x140>
 8005204:	231f      	movs	r3, #31
 8005206:	18fb      	adds	r3, r7, r3
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	e02b      	b.n	8005266 <UART_SetConfig+0x17a>
 800520e:	231f      	movs	r3, #31
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	2202      	movs	r2, #2
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	e026      	b.n	8005266 <UART_SetConfig+0x17a>
 8005218:	231f      	movs	r3, #31
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	2204      	movs	r2, #4
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	e021      	b.n	8005266 <UART_SetConfig+0x17a>
 8005222:	231f      	movs	r3, #31
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	2208      	movs	r2, #8
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	e01c      	b.n	8005266 <UART_SetConfig+0x17a>
 800522c:	231f      	movs	r3, #31
 800522e:	18fb      	adds	r3, r7, r3
 8005230:	2210      	movs	r2, #16
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	e017      	b.n	8005266 <UART_SetConfig+0x17a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a6d      	ldr	r2, [pc, #436]	; (80053f0 <UART_SetConfig+0x304>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d104      	bne.n	800524a <UART_SetConfig+0x15e>
 8005240:	231f      	movs	r3, #31
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e00d      	b.n	8005266 <UART_SetConfig+0x17a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a69      	ldr	r2, [pc, #420]	; (80053f4 <UART_SetConfig+0x308>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d104      	bne.n	800525e <UART_SetConfig+0x172>
 8005254:	231f      	movs	r3, #31
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e003      	b.n	8005266 <UART_SetConfig+0x17a>
 800525e:	231f      	movs	r3, #31
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	2210      	movs	r2, #16
 8005264:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	021b      	lsls	r3, r3, #8
 800526e:	429a      	cmp	r2, r3
 8005270:	d15d      	bne.n	800532e <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8005272:	231f      	movs	r3, #31
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d015      	beq.n	80052a8 <UART_SetConfig+0x1bc>
 800527c:	dc18      	bgt.n	80052b0 <UART_SetConfig+0x1c4>
 800527e:	2b04      	cmp	r3, #4
 8005280:	d00d      	beq.n	800529e <UART_SetConfig+0x1b2>
 8005282:	dc15      	bgt.n	80052b0 <UART_SetConfig+0x1c4>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <UART_SetConfig+0x1a2>
 8005288:	2b02      	cmp	r3, #2
 800528a:	d005      	beq.n	8005298 <UART_SetConfig+0x1ac>
 800528c:	e010      	b.n	80052b0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800528e:	f7ff f8df 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 8005292:	0003      	movs	r3, r0
 8005294:	61bb      	str	r3, [r7, #24]
        break;
 8005296:	e012      	b.n	80052be <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005298:	4b57      	ldr	r3, [pc, #348]	; (80053f8 <UART_SetConfig+0x30c>)
 800529a:	61bb      	str	r3, [r7, #24]
        break;
 800529c:	e00f      	b.n	80052be <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800529e:	f7ff f84d 	bl	800433c <HAL_RCC_GetSysClockFreq>
 80052a2:	0003      	movs	r3, r0
 80052a4:	61bb      	str	r3, [r7, #24]
        break;
 80052a6:	e00a      	b.n	80052be <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a8:	2380      	movs	r3, #128	; 0x80
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	61bb      	str	r3, [r7, #24]
        break;
 80052ae:	e006      	b.n	80052be <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052b4:	231e      	movs	r3, #30
 80052b6:	18fb      	adds	r3, r7, r3
 80052b8:	2201      	movs	r2, #1
 80052ba:	701a      	strb	r2, [r3, #0]
        break;
 80052bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d100      	bne.n	80052c6 <UART_SetConfig+0x1da>
 80052c4:	e07b      	b.n	80053be <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	005a      	lsls	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	18d2      	adds	r2, r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	0019      	movs	r1, r3
 80052d8:	0010      	movs	r0, r2
 80052da:	f7fa ff1f 	bl	800011c <__udivsi3>
 80052de:	0003      	movs	r3, r0
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b0f      	cmp	r3, #15
 80052e8:	d91c      	bls.n	8005324 <UART_SetConfig+0x238>
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	2380      	movs	r3, #128	; 0x80
 80052ee:	025b      	lsls	r3, r3, #9
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d217      	bcs.n	8005324 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	200e      	movs	r0, #14
 80052fa:	183b      	adds	r3, r7, r0
 80052fc:	210f      	movs	r1, #15
 80052fe:	438a      	bics	r2, r1
 8005300:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	b29b      	uxth	r3, r3
 8005308:	2207      	movs	r2, #7
 800530a:	4013      	ands	r3, r2
 800530c:	b299      	uxth	r1, r3
 800530e:	183b      	adds	r3, r7, r0
 8005310:	183a      	adds	r2, r7, r0
 8005312:	8812      	ldrh	r2, [r2, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	183a      	adds	r2, r7, r0
 800531e:	8812      	ldrh	r2, [r2, #0]
 8005320:	60da      	str	r2, [r3, #12]
 8005322:	e04c      	b.n	80053be <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8005324:	231e      	movs	r3, #30
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	e047      	b.n	80053be <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800532e:	231f      	movs	r3, #31
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d015      	beq.n	8005364 <UART_SetConfig+0x278>
 8005338:	dc18      	bgt.n	800536c <UART_SetConfig+0x280>
 800533a:	2b04      	cmp	r3, #4
 800533c:	d00d      	beq.n	800535a <UART_SetConfig+0x26e>
 800533e:	dc15      	bgt.n	800536c <UART_SetConfig+0x280>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <UART_SetConfig+0x25e>
 8005344:	2b02      	cmp	r3, #2
 8005346:	d005      	beq.n	8005354 <UART_SetConfig+0x268>
 8005348:	e010      	b.n	800536c <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800534a:	f7ff f881 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 800534e:	0003      	movs	r3, r0
 8005350:	61bb      	str	r3, [r7, #24]
        break;
 8005352:	e012      	b.n	800537a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005354:	4b28      	ldr	r3, [pc, #160]	; (80053f8 <UART_SetConfig+0x30c>)
 8005356:	61bb      	str	r3, [r7, #24]
        break;
 8005358:	e00f      	b.n	800537a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535a:	f7fe ffef 	bl	800433c <HAL_RCC_GetSysClockFreq>
 800535e:	0003      	movs	r3, r0
 8005360:	61bb      	str	r3, [r7, #24]
        break;
 8005362:	e00a      	b.n	800537a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	021b      	lsls	r3, r3, #8
 8005368:	61bb      	str	r3, [r7, #24]
        break;
 800536a:	e006      	b.n	800537a <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005370:	231e      	movs	r3, #30
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	2201      	movs	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
        break;
 8005378:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01e      	beq.n	80053be <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	085a      	lsrs	r2, r3, #1
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	18d2      	adds	r2, r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	0019      	movs	r1, r3
 8005390:	0010      	movs	r0, r2
 8005392:	f7fa fec3 	bl	800011c <__udivsi3>
 8005396:	0003      	movs	r3, r0
 8005398:	b29b      	uxth	r3, r3
 800539a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	d909      	bls.n	80053b6 <UART_SetConfig+0x2ca>
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	2380      	movs	r3, #128	; 0x80
 80053a6:	025b      	lsls	r3, r3, #9
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d204      	bcs.n	80053b6 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	60da      	str	r2, [r3, #12]
 80053b4:	e003      	b.n	80053be <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80053b6:	231e      	movs	r3, #30
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	2201      	movs	r2, #1
 80053bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053ca:	231e      	movs	r3, #30
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	781b      	ldrb	r3, [r3, #0]
}
 80053d0:	0018      	movs	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b008      	add	sp, #32
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	efff69f3 	.word	0xefff69f3
 80053dc:	ffffcfff 	.word	0xffffcfff
 80053e0:	fffff4ff 	.word	0xfffff4ff
 80053e4:	40013800 	.word	0x40013800
 80053e8:	40021000 	.word	0x40021000
 80053ec:	40004400 	.word	0x40004400
 80053f0:	40004800 	.word	0x40004800
 80053f4:	40004c00 	.word	0x40004c00
 80053f8:	007a1200 	.word	0x007a1200

080053fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	2201      	movs	r2, #1
 800540a:	4013      	ands	r3, r2
 800540c:	d00b      	beq.n	8005426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4a4a      	ldr	r2, [pc, #296]	; (8005540 <UART_AdvFeatureConfig+0x144>)
 8005416:	4013      	ands	r3, r2
 8005418:	0019      	movs	r1, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	2202      	movs	r2, #2
 800542c:	4013      	ands	r3, r2
 800542e:	d00b      	beq.n	8005448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4a43      	ldr	r2, [pc, #268]	; (8005544 <UART_AdvFeatureConfig+0x148>)
 8005438:	4013      	ands	r3, r2
 800543a:	0019      	movs	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	2204      	movs	r2, #4
 800544e:	4013      	ands	r3, r2
 8005450:	d00b      	beq.n	800546a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a3b      	ldr	r2, [pc, #236]	; (8005548 <UART_AdvFeatureConfig+0x14c>)
 800545a:	4013      	ands	r3, r2
 800545c:	0019      	movs	r1, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2208      	movs	r2, #8
 8005470:	4013      	ands	r3, r2
 8005472:	d00b      	beq.n	800548c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	4a34      	ldr	r2, [pc, #208]	; (800554c <UART_AdvFeatureConfig+0x150>)
 800547c:	4013      	ands	r3, r2
 800547e:	0019      	movs	r1, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2210      	movs	r2, #16
 8005492:	4013      	ands	r3, r2
 8005494:	d00b      	beq.n	80054ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	4a2c      	ldr	r2, [pc, #176]	; (8005550 <UART_AdvFeatureConfig+0x154>)
 800549e:	4013      	ands	r3, r2
 80054a0:	0019      	movs	r1, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	2220      	movs	r2, #32
 80054b4:	4013      	ands	r3, r2
 80054b6:	d00b      	beq.n	80054d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	4a25      	ldr	r2, [pc, #148]	; (8005554 <UART_AdvFeatureConfig+0x158>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	0019      	movs	r1, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	2240      	movs	r2, #64	; 0x40
 80054d6:	4013      	ands	r3, r2
 80054d8:	d01d      	beq.n	8005516 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <UART_AdvFeatureConfig+0x15c>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	0019      	movs	r1, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054f6:	2380      	movs	r3, #128	; 0x80
 80054f8:	035b      	lsls	r3, r3, #13
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d10b      	bne.n	8005516 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4a15      	ldr	r2, [pc, #84]	; (800555c <UART_AdvFeatureConfig+0x160>)
 8005506:	4013      	ands	r3, r2
 8005508:	0019      	movs	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2280      	movs	r2, #128	; 0x80
 800551c:	4013      	ands	r3, r2
 800551e:	d00b      	beq.n	8005538 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	4a0e      	ldr	r2, [pc, #56]	; (8005560 <UART_AdvFeatureConfig+0x164>)
 8005528:	4013      	ands	r3, r2
 800552a:	0019      	movs	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }
}
 8005538:	46c0      	nop			; (mov r8, r8)
 800553a:	46bd      	mov	sp, r7
 800553c:	b002      	add	sp, #8
 800553e:	bd80      	pop	{r7, pc}
 8005540:	fffdffff 	.word	0xfffdffff
 8005544:	fffeffff 	.word	0xfffeffff
 8005548:	fffbffff 	.word	0xfffbffff
 800554c:	ffff7fff 	.word	0xffff7fff
 8005550:	ffffefff 	.word	0xffffefff
 8005554:	ffffdfff 	.word	0xffffdfff
 8005558:	ffefffff 	.word	0xffefffff
 800555c:	ff9fffff 	.word	0xff9fffff
 8005560:	fff7ffff 	.word	0xfff7ffff

08005564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af02      	add	r7, sp, #8
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2280      	movs	r2, #128	; 0x80
 8005570:	2100      	movs	r1, #0
 8005572:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005574:	f7fd fa7c 	bl	8002a70 <HAL_GetTick>
 8005578:	0003      	movs	r3, r0
 800557a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2208      	movs	r2, #8
 8005584:	4013      	ands	r3, r2
 8005586:	2b08      	cmp	r3, #8
 8005588:	d10c      	bne.n	80055a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2280      	movs	r2, #128	; 0x80
 800558e:	0391      	lsls	r1, r2, #14
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <UART_CheckIdleState+0x8c>)
 8005594:	9200      	str	r2, [sp, #0]
 8005596:	2200      	movs	r2, #0
 8005598:	f000 f82c 	bl	80055f4 <UART_WaitOnFlagUntilTimeout>
 800559c:	1e03      	subs	r3, r0, #0
 800559e:	d001      	beq.n	80055a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e021      	b.n	80055e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2204      	movs	r2, #4
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d10c      	bne.n	80055cc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2280      	movs	r2, #128	; 0x80
 80055b6:	03d1      	lsls	r1, r2, #15
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	4a0d      	ldr	r2, [pc, #52]	; (80055f0 <UART_CheckIdleState+0x8c>)
 80055bc:	9200      	str	r2, [sp, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	f000 f818 	bl	80055f4 <UART_WaitOnFlagUntilTimeout>
 80055c4:	1e03      	subs	r3, r0, #0
 80055c6:	d001      	beq.n	80055cc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e00d      	b.n	80055e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2274      	movs	r2, #116	; 0x74
 80055e2:	2100      	movs	r1, #0
 80055e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	0018      	movs	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b004      	add	sp, #16
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	01ffffff 	.word	0x01ffffff

080055f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b094      	sub	sp, #80	; 0x50
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	1dfb      	adds	r3, r7, #7
 8005602:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005604:	e0a3      	b.n	800574e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005608:	3301      	adds	r3, #1
 800560a:	d100      	bne.n	800560e <UART_WaitOnFlagUntilTimeout+0x1a>
 800560c:	e09f      	b.n	800574e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560e:	f7fd fa2f 	bl	8002a70 <HAL_GetTick>
 8005612:	0002      	movs	r2, r0
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <UART_WaitOnFlagUntilTimeout+0x30>
 800561e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005620:	2b00      	cmp	r3, #0
 8005622:	d13d      	bne.n	80056a0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005624:	f3ef 8310 	mrs	r3, PRIMASK
 8005628:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800562c:	647b      	str	r3, [r7, #68]	; 0x44
 800562e:	2301      	movs	r3, #1
 8005630:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	f383 8810 	msr	PRIMASK, r3
}
 8005638:	46c0      	nop			; (mov r8, r8)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	494c      	ldr	r1, [pc, #304]	; (8005778 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005646:	400a      	ands	r2, r1
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	f383 8810 	msr	PRIMASK, r3
}
 8005654:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005656:	f3ef 8310 	mrs	r3, PRIMASK
 800565a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565e:	643b      	str	r3, [r7, #64]	; 0x40
 8005660:	2301      	movs	r3, #1
 8005662:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	f383 8810 	msr	PRIMASK, r3
}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2101      	movs	r1, #1
 8005678:	438a      	bics	r2, r1
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005682:	f383 8810 	msr	PRIMASK, r3
}
 8005686:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2274      	movs	r2, #116	; 0x74
 8005698:	2100      	movs	r1, #0
 800569a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e067      	b.n	8005770 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2204      	movs	r2, #4
 80056a8:	4013      	ands	r3, r2
 80056aa:	d050      	beq.n	800574e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69da      	ldr	r2, [r3, #28]
 80056b2:	2380      	movs	r3, #128	; 0x80
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	401a      	ands	r2, r3
 80056b8:	2380      	movs	r3, #128	; 0x80
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	429a      	cmp	r2, r3
 80056be:	d146      	bne.n	800574e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2280      	movs	r2, #128	; 0x80
 80056c6:	0112      	lsls	r2, r2, #4
 80056c8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ca:	f3ef 8310 	mrs	r3, PRIMASK
 80056ce:	613b      	str	r3, [r7, #16]
  return(result);
 80056d0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f383 8810 	msr	PRIMASK, r3
}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4923      	ldr	r1, [pc, #140]	; (8005778 <UART_WaitOnFlagUntilTimeout+0x184>)
 80056ec:	400a      	ands	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f383 8810 	msr	PRIMASK, r3
}
 80056fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005700:	61fb      	str	r3, [r7, #28]
  return(result);
 8005702:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005704:	64bb      	str	r3, [r7, #72]	; 0x48
 8005706:	2301      	movs	r3, #1
 8005708:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	f383 8810 	msr	PRIMASK, r3
}
 8005710:	46c0      	nop			; (mov r8, r8)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2101      	movs	r1, #1
 800571e:	438a      	bics	r2, r1
 8005720:	609a      	str	r2, [r3, #8]
 8005722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	f383 8810 	msr	PRIMASK, r3
}
 800572c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2280      	movs	r2, #128	; 0x80
 800573e:	2120      	movs	r1, #32
 8005740:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2274      	movs	r2, #116	; 0x74
 8005746:	2100      	movs	r1, #0
 8005748:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e010      	b.n	8005770 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	4013      	ands	r3, r2
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	425a      	negs	r2, r3
 800575e:	4153      	adcs	r3, r2
 8005760:	b2db      	uxtb	r3, r3
 8005762:	001a      	movs	r2, r3
 8005764:	1dfb      	adds	r3, r7, #7
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d100      	bne.n	800576e <UART_WaitOnFlagUntilTimeout+0x17a>
 800576c:	e74b      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	0018      	movs	r0, r3
 8005772:	46bd      	mov	sp, r7
 8005774:	b014      	add	sp, #80	; 0x50
 8005776:	bd80      	pop	{r7, pc}
 8005778:	fffffe5f 	.word	0xfffffe5f

0800577c <__errno>:
 800577c:	4b01      	ldr	r3, [pc, #4]	; (8005784 <__errno+0x8>)
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	4770      	bx	lr
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	2000000c 	.word	0x2000000c

08005788 <__libc_init_array>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	2600      	movs	r6, #0
 800578c:	4d0c      	ldr	r5, [pc, #48]	; (80057c0 <__libc_init_array+0x38>)
 800578e:	4c0d      	ldr	r4, [pc, #52]	; (80057c4 <__libc_init_array+0x3c>)
 8005790:	1b64      	subs	r4, r4, r5
 8005792:	10a4      	asrs	r4, r4, #2
 8005794:	42a6      	cmp	r6, r4
 8005796:	d109      	bne.n	80057ac <__libc_init_array+0x24>
 8005798:	2600      	movs	r6, #0
 800579a:	f001 ff89 	bl	80076b0 <_init>
 800579e:	4d0a      	ldr	r5, [pc, #40]	; (80057c8 <__libc_init_array+0x40>)
 80057a0:	4c0a      	ldr	r4, [pc, #40]	; (80057cc <__libc_init_array+0x44>)
 80057a2:	1b64      	subs	r4, r4, r5
 80057a4:	10a4      	asrs	r4, r4, #2
 80057a6:	42a6      	cmp	r6, r4
 80057a8:	d105      	bne.n	80057b6 <__libc_init_array+0x2e>
 80057aa:	bd70      	pop	{r4, r5, r6, pc}
 80057ac:	00b3      	lsls	r3, r6, #2
 80057ae:	58eb      	ldr	r3, [r5, r3]
 80057b0:	4798      	blx	r3
 80057b2:	3601      	adds	r6, #1
 80057b4:	e7ee      	b.n	8005794 <__libc_init_array+0xc>
 80057b6:	00b3      	lsls	r3, r6, #2
 80057b8:	58eb      	ldr	r3, [r5, r3]
 80057ba:	4798      	blx	r3
 80057bc:	3601      	adds	r6, #1
 80057be:	e7f2      	b.n	80057a6 <__libc_init_array+0x1e>
 80057c0:	08007998 	.word	0x08007998
 80057c4:	08007998 	.word	0x08007998
 80057c8:	08007998 	.word	0x08007998
 80057cc:	0800799c 	.word	0x0800799c

080057d0 <memset>:
 80057d0:	0003      	movs	r3, r0
 80057d2:	1882      	adds	r2, r0, r2
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d100      	bne.n	80057da <memset+0xa>
 80057d8:	4770      	bx	lr
 80057da:	7019      	strb	r1, [r3, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	e7f9      	b.n	80057d4 <memset+0x4>

080057e0 <sniprintf>:
 80057e0:	b40c      	push	{r2, r3}
 80057e2:	b530      	push	{r4, r5, lr}
 80057e4:	4b17      	ldr	r3, [pc, #92]	; (8005844 <sniprintf+0x64>)
 80057e6:	000c      	movs	r4, r1
 80057e8:	681d      	ldr	r5, [r3, #0]
 80057ea:	b09d      	sub	sp, #116	; 0x74
 80057ec:	2900      	cmp	r1, #0
 80057ee:	da08      	bge.n	8005802 <sniprintf+0x22>
 80057f0:	238b      	movs	r3, #139	; 0x8b
 80057f2:	2001      	movs	r0, #1
 80057f4:	602b      	str	r3, [r5, #0]
 80057f6:	4240      	negs	r0, r0
 80057f8:	b01d      	add	sp, #116	; 0x74
 80057fa:	bc30      	pop	{r4, r5}
 80057fc:	bc08      	pop	{r3}
 80057fe:	b002      	add	sp, #8
 8005800:	4718      	bx	r3
 8005802:	2382      	movs	r3, #130	; 0x82
 8005804:	466a      	mov	r2, sp
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	8293      	strh	r3, [r2, #20]
 800580a:	2300      	movs	r3, #0
 800580c:	9002      	str	r0, [sp, #8]
 800580e:	9006      	str	r0, [sp, #24]
 8005810:	4299      	cmp	r1, r3
 8005812:	d000      	beq.n	8005816 <sniprintf+0x36>
 8005814:	1e4b      	subs	r3, r1, #1
 8005816:	9304      	str	r3, [sp, #16]
 8005818:	9307      	str	r3, [sp, #28]
 800581a:	2301      	movs	r3, #1
 800581c:	466a      	mov	r2, sp
 800581e:	425b      	negs	r3, r3
 8005820:	82d3      	strh	r3, [r2, #22]
 8005822:	0028      	movs	r0, r5
 8005824:	ab21      	add	r3, sp, #132	; 0x84
 8005826:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005828:	a902      	add	r1, sp, #8
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	f000 f86e 	bl	800590c <_svfiprintf_r>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	da01      	bge.n	8005838 <sniprintf+0x58>
 8005834:	238b      	movs	r3, #139	; 0x8b
 8005836:	602b      	str	r3, [r5, #0]
 8005838:	2c00      	cmp	r4, #0
 800583a:	d0dd      	beq.n	80057f8 <sniprintf+0x18>
 800583c:	2300      	movs	r3, #0
 800583e:	9a02      	ldr	r2, [sp, #8]
 8005840:	7013      	strb	r3, [r2, #0]
 8005842:	e7d9      	b.n	80057f8 <sniprintf+0x18>
 8005844:	2000000c 	.word	0x2000000c

08005848 <__ssputs_r>:
 8005848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800584a:	688e      	ldr	r6, [r1, #8]
 800584c:	b085      	sub	sp, #20
 800584e:	0007      	movs	r7, r0
 8005850:	000c      	movs	r4, r1
 8005852:	9203      	str	r2, [sp, #12]
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	429e      	cmp	r6, r3
 8005858:	d83c      	bhi.n	80058d4 <__ssputs_r+0x8c>
 800585a:	2390      	movs	r3, #144	; 0x90
 800585c:	898a      	ldrh	r2, [r1, #12]
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	421a      	tst	r2, r3
 8005862:	d034      	beq.n	80058ce <__ssputs_r+0x86>
 8005864:	6909      	ldr	r1, [r1, #16]
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	6960      	ldr	r0, [r4, #20]
 800586a:	1a5b      	subs	r3, r3, r1
 800586c:	9302      	str	r3, [sp, #8]
 800586e:	2303      	movs	r3, #3
 8005870:	4343      	muls	r3, r0
 8005872:	0fdd      	lsrs	r5, r3, #31
 8005874:	18ed      	adds	r5, r5, r3
 8005876:	9b01      	ldr	r3, [sp, #4]
 8005878:	9802      	ldr	r0, [sp, #8]
 800587a:	3301      	adds	r3, #1
 800587c:	181b      	adds	r3, r3, r0
 800587e:	106d      	asrs	r5, r5, #1
 8005880:	42ab      	cmp	r3, r5
 8005882:	d900      	bls.n	8005886 <__ssputs_r+0x3e>
 8005884:	001d      	movs	r5, r3
 8005886:	0553      	lsls	r3, r2, #21
 8005888:	d532      	bpl.n	80058f0 <__ssputs_r+0xa8>
 800588a:	0029      	movs	r1, r5
 800588c:	0038      	movs	r0, r7
 800588e:	f000 fb53 	bl	8005f38 <_malloc_r>
 8005892:	1e06      	subs	r6, r0, #0
 8005894:	d109      	bne.n	80058aa <__ssputs_r+0x62>
 8005896:	230c      	movs	r3, #12
 8005898:	603b      	str	r3, [r7, #0]
 800589a:	2340      	movs	r3, #64	; 0x40
 800589c:	2001      	movs	r0, #1
 800589e:	89a2      	ldrh	r2, [r4, #12]
 80058a0:	4240      	negs	r0, r0
 80058a2:	4313      	orrs	r3, r2
 80058a4:	81a3      	strh	r3, [r4, #12]
 80058a6:	b005      	add	sp, #20
 80058a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058aa:	9a02      	ldr	r2, [sp, #8]
 80058ac:	6921      	ldr	r1, [r4, #16]
 80058ae:	f000 faba 	bl	8005e26 <memcpy>
 80058b2:	89a3      	ldrh	r3, [r4, #12]
 80058b4:	4a14      	ldr	r2, [pc, #80]	; (8005908 <__ssputs_r+0xc0>)
 80058b6:	401a      	ands	r2, r3
 80058b8:	2380      	movs	r3, #128	; 0x80
 80058ba:	4313      	orrs	r3, r2
 80058bc:	81a3      	strh	r3, [r4, #12]
 80058be:	9b02      	ldr	r3, [sp, #8]
 80058c0:	6126      	str	r6, [r4, #16]
 80058c2:	18f6      	adds	r6, r6, r3
 80058c4:	6026      	str	r6, [r4, #0]
 80058c6:	6165      	str	r5, [r4, #20]
 80058c8:	9e01      	ldr	r6, [sp, #4]
 80058ca:	1aed      	subs	r5, r5, r3
 80058cc:	60a5      	str	r5, [r4, #8]
 80058ce:	9b01      	ldr	r3, [sp, #4]
 80058d0:	429e      	cmp	r6, r3
 80058d2:	d900      	bls.n	80058d6 <__ssputs_r+0x8e>
 80058d4:	9e01      	ldr	r6, [sp, #4]
 80058d6:	0032      	movs	r2, r6
 80058d8:	9903      	ldr	r1, [sp, #12]
 80058da:	6820      	ldr	r0, [r4, #0]
 80058dc:	f000 faac 	bl	8005e38 <memmove>
 80058e0:	68a3      	ldr	r3, [r4, #8]
 80058e2:	2000      	movs	r0, #0
 80058e4:	1b9b      	subs	r3, r3, r6
 80058e6:	60a3      	str	r3, [r4, #8]
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	199e      	adds	r6, r3, r6
 80058ec:	6026      	str	r6, [r4, #0]
 80058ee:	e7da      	b.n	80058a6 <__ssputs_r+0x5e>
 80058f0:	002a      	movs	r2, r5
 80058f2:	0038      	movs	r0, r7
 80058f4:	f000 fb96 	bl	8006024 <_realloc_r>
 80058f8:	1e06      	subs	r6, r0, #0
 80058fa:	d1e0      	bne.n	80058be <__ssputs_r+0x76>
 80058fc:	0038      	movs	r0, r7
 80058fe:	6921      	ldr	r1, [r4, #16]
 8005900:	f000 faae 	bl	8005e60 <_free_r>
 8005904:	e7c7      	b.n	8005896 <__ssputs_r+0x4e>
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	fffffb7f 	.word	0xfffffb7f

0800590c <_svfiprintf_r>:
 800590c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800590e:	b0a1      	sub	sp, #132	; 0x84
 8005910:	9003      	str	r0, [sp, #12]
 8005912:	001d      	movs	r5, r3
 8005914:	898b      	ldrh	r3, [r1, #12]
 8005916:	000f      	movs	r7, r1
 8005918:	0016      	movs	r6, r2
 800591a:	061b      	lsls	r3, r3, #24
 800591c:	d511      	bpl.n	8005942 <_svfiprintf_r+0x36>
 800591e:	690b      	ldr	r3, [r1, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10e      	bne.n	8005942 <_svfiprintf_r+0x36>
 8005924:	2140      	movs	r1, #64	; 0x40
 8005926:	f000 fb07 	bl	8005f38 <_malloc_r>
 800592a:	6038      	str	r0, [r7, #0]
 800592c:	6138      	str	r0, [r7, #16]
 800592e:	2800      	cmp	r0, #0
 8005930:	d105      	bne.n	800593e <_svfiprintf_r+0x32>
 8005932:	230c      	movs	r3, #12
 8005934:	9a03      	ldr	r2, [sp, #12]
 8005936:	3801      	subs	r0, #1
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	b021      	add	sp, #132	; 0x84
 800593c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800593e:	2340      	movs	r3, #64	; 0x40
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	2300      	movs	r3, #0
 8005944:	ac08      	add	r4, sp, #32
 8005946:	6163      	str	r3, [r4, #20]
 8005948:	3320      	adds	r3, #32
 800594a:	7663      	strb	r3, [r4, #25]
 800594c:	3310      	adds	r3, #16
 800594e:	76a3      	strb	r3, [r4, #26]
 8005950:	9507      	str	r5, [sp, #28]
 8005952:	0035      	movs	r5, r6
 8005954:	782b      	ldrb	r3, [r5, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <_svfiprintf_r+0x52>
 800595a:	2b25      	cmp	r3, #37	; 0x25
 800595c:	d147      	bne.n	80059ee <_svfiprintf_r+0xe2>
 800595e:	1bab      	subs	r3, r5, r6
 8005960:	9305      	str	r3, [sp, #20]
 8005962:	42b5      	cmp	r5, r6
 8005964:	d00c      	beq.n	8005980 <_svfiprintf_r+0x74>
 8005966:	0032      	movs	r2, r6
 8005968:	0039      	movs	r1, r7
 800596a:	9803      	ldr	r0, [sp, #12]
 800596c:	f7ff ff6c 	bl	8005848 <__ssputs_r>
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d100      	bne.n	8005976 <_svfiprintf_r+0x6a>
 8005974:	e0ae      	b.n	8005ad4 <_svfiprintf_r+0x1c8>
 8005976:	6962      	ldr	r2, [r4, #20]
 8005978:	9b05      	ldr	r3, [sp, #20]
 800597a:	4694      	mov	ip, r2
 800597c:	4463      	add	r3, ip
 800597e:	6163      	str	r3, [r4, #20]
 8005980:	782b      	ldrb	r3, [r5, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d100      	bne.n	8005988 <_svfiprintf_r+0x7c>
 8005986:	e0a5      	b.n	8005ad4 <_svfiprintf_r+0x1c8>
 8005988:	2201      	movs	r2, #1
 800598a:	2300      	movs	r3, #0
 800598c:	4252      	negs	r2, r2
 800598e:	6062      	str	r2, [r4, #4]
 8005990:	a904      	add	r1, sp, #16
 8005992:	3254      	adds	r2, #84	; 0x54
 8005994:	1852      	adds	r2, r2, r1
 8005996:	1c6e      	adds	r6, r5, #1
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	60e3      	str	r3, [r4, #12]
 800599c:	60a3      	str	r3, [r4, #8]
 800599e:	7013      	strb	r3, [r2, #0]
 80059a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80059a2:	2205      	movs	r2, #5
 80059a4:	7831      	ldrb	r1, [r6, #0]
 80059a6:	4854      	ldr	r0, [pc, #336]	; (8005af8 <_svfiprintf_r+0x1ec>)
 80059a8:	f000 fa32 	bl	8005e10 <memchr>
 80059ac:	1c75      	adds	r5, r6, #1
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d11f      	bne.n	80059f2 <_svfiprintf_r+0xe6>
 80059b2:	6822      	ldr	r2, [r4, #0]
 80059b4:	06d3      	lsls	r3, r2, #27
 80059b6:	d504      	bpl.n	80059c2 <_svfiprintf_r+0xb6>
 80059b8:	2353      	movs	r3, #83	; 0x53
 80059ba:	a904      	add	r1, sp, #16
 80059bc:	185b      	adds	r3, r3, r1
 80059be:	2120      	movs	r1, #32
 80059c0:	7019      	strb	r1, [r3, #0]
 80059c2:	0713      	lsls	r3, r2, #28
 80059c4:	d504      	bpl.n	80059d0 <_svfiprintf_r+0xc4>
 80059c6:	2353      	movs	r3, #83	; 0x53
 80059c8:	a904      	add	r1, sp, #16
 80059ca:	185b      	adds	r3, r3, r1
 80059cc:	212b      	movs	r1, #43	; 0x2b
 80059ce:	7019      	strb	r1, [r3, #0]
 80059d0:	7833      	ldrb	r3, [r6, #0]
 80059d2:	2b2a      	cmp	r3, #42	; 0x2a
 80059d4:	d016      	beq.n	8005a04 <_svfiprintf_r+0xf8>
 80059d6:	0035      	movs	r5, r6
 80059d8:	2100      	movs	r1, #0
 80059da:	200a      	movs	r0, #10
 80059dc:	68e3      	ldr	r3, [r4, #12]
 80059de:	782a      	ldrb	r2, [r5, #0]
 80059e0:	1c6e      	adds	r6, r5, #1
 80059e2:	3a30      	subs	r2, #48	; 0x30
 80059e4:	2a09      	cmp	r2, #9
 80059e6:	d94e      	bls.n	8005a86 <_svfiprintf_r+0x17a>
 80059e8:	2900      	cmp	r1, #0
 80059ea:	d111      	bne.n	8005a10 <_svfiprintf_r+0x104>
 80059ec:	e017      	b.n	8005a1e <_svfiprintf_r+0x112>
 80059ee:	3501      	adds	r5, #1
 80059f0:	e7b0      	b.n	8005954 <_svfiprintf_r+0x48>
 80059f2:	4b41      	ldr	r3, [pc, #260]	; (8005af8 <_svfiprintf_r+0x1ec>)
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	1ac0      	subs	r0, r0, r3
 80059f8:	2301      	movs	r3, #1
 80059fa:	4083      	lsls	r3, r0
 80059fc:	4313      	orrs	r3, r2
 80059fe:	002e      	movs	r6, r5
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	e7ce      	b.n	80059a2 <_svfiprintf_r+0x96>
 8005a04:	9b07      	ldr	r3, [sp, #28]
 8005a06:	1d19      	adds	r1, r3, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	9107      	str	r1, [sp, #28]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	db01      	blt.n	8005a14 <_svfiprintf_r+0x108>
 8005a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a12:	e004      	b.n	8005a1e <_svfiprintf_r+0x112>
 8005a14:	425b      	negs	r3, r3
 8005a16:	60e3      	str	r3, [r4, #12]
 8005a18:	2302      	movs	r3, #2
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	782b      	ldrb	r3, [r5, #0]
 8005a20:	2b2e      	cmp	r3, #46	; 0x2e
 8005a22:	d10a      	bne.n	8005a3a <_svfiprintf_r+0x12e>
 8005a24:	786b      	ldrb	r3, [r5, #1]
 8005a26:	2b2a      	cmp	r3, #42	; 0x2a
 8005a28:	d135      	bne.n	8005a96 <_svfiprintf_r+0x18a>
 8005a2a:	9b07      	ldr	r3, [sp, #28]
 8005a2c:	3502      	adds	r5, #2
 8005a2e:	1d1a      	adds	r2, r3, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	9207      	str	r2, [sp, #28]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	db2b      	blt.n	8005a90 <_svfiprintf_r+0x184>
 8005a38:	9309      	str	r3, [sp, #36]	; 0x24
 8005a3a:	4e30      	ldr	r6, [pc, #192]	; (8005afc <_svfiprintf_r+0x1f0>)
 8005a3c:	2203      	movs	r2, #3
 8005a3e:	0030      	movs	r0, r6
 8005a40:	7829      	ldrb	r1, [r5, #0]
 8005a42:	f000 f9e5 	bl	8005e10 <memchr>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d006      	beq.n	8005a58 <_svfiprintf_r+0x14c>
 8005a4a:	2340      	movs	r3, #64	; 0x40
 8005a4c:	1b80      	subs	r0, r0, r6
 8005a4e:	4083      	lsls	r3, r0
 8005a50:	6822      	ldr	r2, [r4, #0]
 8005a52:	3501      	adds	r5, #1
 8005a54:	4313      	orrs	r3, r2
 8005a56:	6023      	str	r3, [r4, #0]
 8005a58:	7829      	ldrb	r1, [r5, #0]
 8005a5a:	2206      	movs	r2, #6
 8005a5c:	4828      	ldr	r0, [pc, #160]	; (8005b00 <_svfiprintf_r+0x1f4>)
 8005a5e:	1c6e      	adds	r6, r5, #1
 8005a60:	7621      	strb	r1, [r4, #24]
 8005a62:	f000 f9d5 	bl	8005e10 <memchr>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d03c      	beq.n	8005ae4 <_svfiprintf_r+0x1d8>
 8005a6a:	4b26      	ldr	r3, [pc, #152]	; (8005b04 <_svfiprintf_r+0x1f8>)
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d125      	bne.n	8005abc <_svfiprintf_r+0x1b0>
 8005a70:	2207      	movs	r2, #7
 8005a72:	9b07      	ldr	r3, [sp, #28]
 8005a74:	3307      	adds	r3, #7
 8005a76:	4393      	bics	r3, r2
 8005a78:	3308      	adds	r3, #8
 8005a7a:	9307      	str	r3, [sp, #28]
 8005a7c:	6963      	ldr	r3, [r4, #20]
 8005a7e:	9a04      	ldr	r2, [sp, #16]
 8005a80:	189b      	adds	r3, r3, r2
 8005a82:	6163      	str	r3, [r4, #20]
 8005a84:	e765      	b.n	8005952 <_svfiprintf_r+0x46>
 8005a86:	4343      	muls	r3, r0
 8005a88:	0035      	movs	r5, r6
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	189b      	adds	r3, r3, r2
 8005a8e:	e7a6      	b.n	80059de <_svfiprintf_r+0xd2>
 8005a90:	2301      	movs	r3, #1
 8005a92:	425b      	negs	r3, r3
 8005a94:	e7d0      	b.n	8005a38 <_svfiprintf_r+0x12c>
 8005a96:	2300      	movs	r3, #0
 8005a98:	200a      	movs	r0, #10
 8005a9a:	001a      	movs	r2, r3
 8005a9c:	3501      	adds	r5, #1
 8005a9e:	6063      	str	r3, [r4, #4]
 8005aa0:	7829      	ldrb	r1, [r5, #0]
 8005aa2:	1c6e      	adds	r6, r5, #1
 8005aa4:	3930      	subs	r1, #48	; 0x30
 8005aa6:	2909      	cmp	r1, #9
 8005aa8:	d903      	bls.n	8005ab2 <_svfiprintf_r+0x1a6>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0c5      	beq.n	8005a3a <_svfiprintf_r+0x12e>
 8005aae:	9209      	str	r2, [sp, #36]	; 0x24
 8005ab0:	e7c3      	b.n	8005a3a <_svfiprintf_r+0x12e>
 8005ab2:	4342      	muls	r2, r0
 8005ab4:	0035      	movs	r5, r6
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	1852      	adds	r2, r2, r1
 8005aba:	e7f1      	b.n	8005aa0 <_svfiprintf_r+0x194>
 8005abc:	ab07      	add	r3, sp, #28
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	003a      	movs	r2, r7
 8005ac2:	0021      	movs	r1, r4
 8005ac4:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <_svfiprintf_r+0x1fc>)
 8005ac6:	9803      	ldr	r0, [sp, #12]
 8005ac8:	e000      	b.n	8005acc <_svfiprintf_r+0x1c0>
 8005aca:	bf00      	nop
 8005acc:	9004      	str	r0, [sp, #16]
 8005ace:	9b04      	ldr	r3, [sp, #16]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	d1d3      	bne.n	8005a7c <_svfiprintf_r+0x170>
 8005ad4:	89bb      	ldrh	r3, [r7, #12]
 8005ad6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005ad8:	065b      	lsls	r3, r3, #25
 8005ada:	d400      	bmi.n	8005ade <_svfiprintf_r+0x1d2>
 8005adc:	e72d      	b.n	800593a <_svfiprintf_r+0x2e>
 8005ade:	2001      	movs	r0, #1
 8005ae0:	4240      	negs	r0, r0
 8005ae2:	e72a      	b.n	800593a <_svfiprintf_r+0x2e>
 8005ae4:	ab07      	add	r3, sp, #28
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	003a      	movs	r2, r7
 8005aea:	0021      	movs	r1, r4
 8005aec:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <_svfiprintf_r+0x1fc>)
 8005aee:	9803      	ldr	r0, [sp, #12]
 8005af0:	f000 f87c 	bl	8005bec <_printf_i>
 8005af4:	e7ea      	b.n	8005acc <_svfiprintf_r+0x1c0>
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	08007788 	.word	0x08007788
 8005afc:	0800778e 	.word	0x0800778e
 8005b00:	08007792 	.word	0x08007792
 8005b04:	00000000 	.word	0x00000000
 8005b08:	08005849 	.word	0x08005849

08005b0c <_printf_common>:
 8005b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b0e:	0015      	movs	r5, r2
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	688a      	ldr	r2, [r1, #8]
 8005b14:	690b      	ldr	r3, [r1, #16]
 8005b16:	000c      	movs	r4, r1
 8005b18:	9000      	str	r0, [sp, #0]
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	da00      	bge.n	8005b20 <_printf_common+0x14>
 8005b1e:	0013      	movs	r3, r2
 8005b20:	0022      	movs	r2, r4
 8005b22:	602b      	str	r3, [r5, #0]
 8005b24:	3243      	adds	r2, #67	; 0x43
 8005b26:	7812      	ldrb	r2, [r2, #0]
 8005b28:	2a00      	cmp	r2, #0
 8005b2a:	d001      	beq.n	8005b30 <_printf_common+0x24>
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	602b      	str	r3, [r5, #0]
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	069b      	lsls	r3, r3, #26
 8005b34:	d502      	bpl.n	8005b3c <_printf_common+0x30>
 8005b36:	682b      	ldr	r3, [r5, #0]
 8005b38:	3302      	adds	r3, #2
 8005b3a:	602b      	str	r3, [r5, #0]
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	2306      	movs	r3, #6
 8005b40:	0017      	movs	r7, r2
 8005b42:	401f      	ands	r7, r3
 8005b44:	421a      	tst	r2, r3
 8005b46:	d027      	beq.n	8005b98 <_printf_common+0x8c>
 8005b48:	0023      	movs	r3, r4
 8005b4a:	3343      	adds	r3, #67	; 0x43
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	1e5a      	subs	r2, r3, #1
 8005b50:	4193      	sbcs	r3, r2
 8005b52:	6822      	ldr	r2, [r4, #0]
 8005b54:	0692      	lsls	r2, r2, #26
 8005b56:	d430      	bmi.n	8005bba <_printf_common+0xae>
 8005b58:	0022      	movs	r2, r4
 8005b5a:	9901      	ldr	r1, [sp, #4]
 8005b5c:	9800      	ldr	r0, [sp, #0]
 8005b5e:	9e08      	ldr	r6, [sp, #32]
 8005b60:	3243      	adds	r2, #67	; 0x43
 8005b62:	47b0      	blx	r6
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d025      	beq.n	8005bb4 <_printf_common+0xa8>
 8005b68:	2306      	movs	r3, #6
 8005b6a:	6820      	ldr	r0, [r4, #0]
 8005b6c:	682a      	ldr	r2, [r5, #0]
 8005b6e:	68e1      	ldr	r1, [r4, #12]
 8005b70:	2500      	movs	r5, #0
 8005b72:	4003      	ands	r3, r0
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d103      	bne.n	8005b80 <_printf_common+0x74>
 8005b78:	1a8d      	subs	r5, r1, r2
 8005b7a:	43eb      	mvns	r3, r5
 8005b7c:	17db      	asrs	r3, r3, #31
 8005b7e:	401d      	ands	r5, r3
 8005b80:	68a3      	ldr	r3, [r4, #8]
 8005b82:	6922      	ldr	r2, [r4, #16]
 8005b84:	4293      	cmp	r3, r2
 8005b86:	dd01      	ble.n	8005b8c <_printf_common+0x80>
 8005b88:	1a9b      	subs	r3, r3, r2
 8005b8a:	18ed      	adds	r5, r5, r3
 8005b8c:	2700      	movs	r7, #0
 8005b8e:	42bd      	cmp	r5, r7
 8005b90:	d120      	bne.n	8005bd4 <_printf_common+0xc8>
 8005b92:	2000      	movs	r0, #0
 8005b94:	e010      	b.n	8005bb8 <_printf_common+0xac>
 8005b96:	3701      	adds	r7, #1
 8005b98:	68e3      	ldr	r3, [r4, #12]
 8005b9a:	682a      	ldr	r2, [r5, #0]
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	42bb      	cmp	r3, r7
 8005ba0:	ddd2      	ble.n	8005b48 <_printf_common+0x3c>
 8005ba2:	0022      	movs	r2, r4
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	9901      	ldr	r1, [sp, #4]
 8005ba8:	9800      	ldr	r0, [sp, #0]
 8005baa:	9e08      	ldr	r6, [sp, #32]
 8005bac:	3219      	adds	r2, #25
 8005bae:	47b0      	blx	r6
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d1f0      	bne.n	8005b96 <_printf_common+0x8a>
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	4240      	negs	r0, r0
 8005bb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bba:	2030      	movs	r0, #48	; 0x30
 8005bbc:	18e1      	adds	r1, r4, r3
 8005bbe:	3143      	adds	r1, #67	; 0x43
 8005bc0:	7008      	strb	r0, [r1, #0]
 8005bc2:	0021      	movs	r1, r4
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	3145      	adds	r1, #69	; 0x45
 8005bc8:	7809      	ldrb	r1, [r1, #0]
 8005bca:	18a2      	adds	r2, r4, r2
 8005bcc:	3243      	adds	r2, #67	; 0x43
 8005bce:	3302      	adds	r3, #2
 8005bd0:	7011      	strb	r1, [r2, #0]
 8005bd2:	e7c1      	b.n	8005b58 <_printf_common+0x4c>
 8005bd4:	0022      	movs	r2, r4
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	9901      	ldr	r1, [sp, #4]
 8005bda:	9800      	ldr	r0, [sp, #0]
 8005bdc:	9e08      	ldr	r6, [sp, #32]
 8005bde:	321a      	adds	r2, #26
 8005be0:	47b0      	blx	r6
 8005be2:	1c43      	adds	r3, r0, #1
 8005be4:	d0e6      	beq.n	8005bb4 <_printf_common+0xa8>
 8005be6:	3701      	adds	r7, #1
 8005be8:	e7d1      	b.n	8005b8e <_printf_common+0x82>
	...

08005bec <_printf_i>:
 8005bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bee:	b08b      	sub	sp, #44	; 0x2c
 8005bf0:	9206      	str	r2, [sp, #24]
 8005bf2:	000a      	movs	r2, r1
 8005bf4:	3243      	adds	r2, #67	; 0x43
 8005bf6:	9307      	str	r3, [sp, #28]
 8005bf8:	9005      	str	r0, [sp, #20]
 8005bfa:	9204      	str	r2, [sp, #16]
 8005bfc:	7e0a      	ldrb	r2, [r1, #24]
 8005bfe:	000c      	movs	r4, r1
 8005c00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c02:	2a78      	cmp	r2, #120	; 0x78
 8005c04:	d807      	bhi.n	8005c16 <_printf_i+0x2a>
 8005c06:	2a62      	cmp	r2, #98	; 0x62
 8005c08:	d809      	bhi.n	8005c1e <_printf_i+0x32>
 8005c0a:	2a00      	cmp	r2, #0
 8005c0c:	d100      	bne.n	8005c10 <_printf_i+0x24>
 8005c0e:	e0c1      	b.n	8005d94 <_printf_i+0x1a8>
 8005c10:	2a58      	cmp	r2, #88	; 0x58
 8005c12:	d100      	bne.n	8005c16 <_printf_i+0x2a>
 8005c14:	e08c      	b.n	8005d30 <_printf_i+0x144>
 8005c16:	0026      	movs	r6, r4
 8005c18:	3642      	adds	r6, #66	; 0x42
 8005c1a:	7032      	strb	r2, [r6, #0]
 8005c1c:	e022      	b.n	8005c64 <_printf_i+0x78>
 8005c1e:	0010      	movs	r0, r2
 8005c20:	3863      	subs	r0, #99	; 0x63
 8005c22:	2815      	cmp	r0, #21
 8005c24:	d8f7      	bhi.n	8005c16 <_printf_i+0x2a>
 8005c26:	f7fa fa6f 	bl	8000108 <__gnu_thumb1_case_shi>
 8005c2a:	0016      	.short	0x0016
 8005c2c:	fff6001f 	.word	0xfff6001f
 8005c30:	fff6fff6 	.word	0xfff6fff6
 8005c34:	001ffff6 	.word	0x001ffff6
 8005c38:	fff6fff6 	.word	0xfff6fff6
 8005c3c:	fff6fff6 	.word	0xfff6fff6
 8005c40:	003600a8 	.word	0x003600a8
 8005c44:	fff6009a 	.word	0xfff6009a
 8005c48:	00b9fff6 	.word	0x00b9fff6
 8005c4c:	0036fff6 	.word	0x0036fff6
 8005c50:	fff6fff6 	.word	0xfff6fff6
 8005c54:	009e      	.short	0x009e
 8005c56:	0026      	movs	r6, r4
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	3642      	adds	r6, #66	; 0x42
 8005c5c:	1d11      	adds	r1, r2, #4
 8005c5e:	6019      	str	r1, [r3, #0]
 8005c60:	6813      	ldr	r3, [r2, #0]
 8005c62:	7033      	strb	r3, [r6, #0]
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0a7      	b.n	8005db8 <_printf_i+0x1cc>
 8005c68:	6808      	ldr	r0, [r1, #0]
 8005c6a:	6819      	ldr	r1, [r3, #0]
 8005c6c:	1d0a      	adds	r2, r1, #4
 8005c6e:	0605      	lsls	r5, r0, #24
 8005c70:	d50b      	bpl.n	8005c8a <_printf_i+0x9e>
 8005c72:	680d      	ldr	r5, [r1, #0]
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	2d00      	cmp	r5, #0
 8005c78:	da03      	bge.n	8005c82 <_printf_i+0x96>
 8005c7a:	232d      	movs	r3, #45	; 0x2d
 8005c7c:	9a04      	ldr	r2, [sp, #16]
 8005c7e:	426d      	negs	r5, r5
 8005c80:	7013      	strb	r3, [r2, #0]
 8005c82:	4b61      	ldr	r3, [pc, #388]	; (8005e08 <_printf_i+0x21c>)
 8005c84:	270a      	movs	r7, #10
 8005c86:	9303      	str	r3, [sp, #12]
 8005c88:	e01b      	b.n	8005cc2 <_printf_i+0xd6>
 8005c8a:	680d      	ldr	r5, [r1, #0]
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	0641      	lsls	r1, r0, #25
 8005c90:	d5f1      	bpl.n	8005c76 <_printf_i+0x8a>
 8005c92:	b22d      	sxth	r5, r5
 8005c94:	e7ef      	b.n	8005c76 <_printf_i+0x8a>
 8005c96:	680d      	ldr	r5, [r1, #0]
 8005c98:	6819      	ldr	r1, [r3, #0]
 8005c9a:	1d08      	adds	r0, r1, #4
 8005c9c:	6018      	str	r0, [r3, #0]
 8005c9e:	062e      	lsls	r6, r5, #24
 8005ca0:	d501      	bpl.n	8005ca6 <_printf_i+0xba>
 8005ca2:	680d      	ldr	r5, [r1, #0]
 8005ca4:	e003      	b.n	8005cae <_printf_i+0xc2>
 8005ca6:	066d      	lsls	r5, r5, #25
 8005ca8:	d5fb      	bpl.n	8005ca2 <_printf_i+0xb6>
 8005caa:	680d      	ldr	r5, [r1, #0]
 8005cac:	b2ad      	uxth	r5, r5
 8005cae:	4b56      	ldr	r3, [pc, #344]	; (8005e08 <_printf_i+0x21c>)
 8005cb0:	2708      	movs	r7, #8
 8005cb2:	9303      	str	r3, [sp, #12]
 8005cb4:	2a6f      	cmp	r2, #111	; 0x6f
 8005cb6:	d000      	beq.n	8005cba <_printf_i+0xce>
 8005cb8:	3702      	adds	r7, #2
 8005cba:	0023      	movs	r3, r4
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	3343      	adds	r3, #67	; 0x43
 8005cc0:	701a      	strb	r2, [r3, #0]
 8005cc2:	6863      	ldr	r3, [r4, #4]
 8005cc4:	60a3      	str	r3, [r4, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	db03      	blt.n	8005cd2 <_printf_i+0xe6>
 8005cca:	2204      	movs	r2, #4
 8005ccc:	6821      	ldr	r1, [r4, #0]
 8005cce:	4391      	bics	r1, r2
 8005cd0:	6021      	str	r1, [r4, #0]
 8005cd2:	2d00      	cmp	r5, #0
 8005cd4:	d102      	bne.n	8005cdc <_printf_i+0xf0>
 8005cd6:	9e04      	ldr	r6, [sp, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00c      	beq.n	8005cf6 <_printf_i+0x10a>
 8005cdc:	9e04      	ldr	r6, [sp, #16]
 8005cde:	0028      	movs	r0, r5
 8005ce0:	0039      	movs	r1, r7
 8005ce2:	f7fa faa1 	bl	8000228 <__aeabi_uidivmod>
 8005ce6:	9b03      	ldr	r3, [sp, #12]
 8005ce8:	3e01      	subs	r6, #1
 8005cea:	5c5b      	ldrb	r3, [r3, r1]
 8005cec:	7033      	strb	r3, [r6, #0]
 8005cee:	002b      	movs	r3, r5
 8005cf0:	0005      	movs	r5, r0
 8005cf2:	429f      	cmp	r7, r3
 8005cf4:	d9f3      	bls.n	8005cde <_printf_i+0xf2>
 8005cf6:	2f08      	cmp	r7, #8
 8005cf8:	d109      	bne.n	8005d0e <_printf_i+0x122>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	07db      	lsls	r3, r3, #31
 8005cfe:	d506      	bpl.n	8005d0e <_printf_i+0x122>
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	6922      	ldr	r2, [r4, #16]
 8005d04:	4293      	cmp	r3, r2
 8005d06:	dc02      	bgt.n	8005d0e <_printf_i+0x122>
 8005d08:	2330      	movs	r3, #48	; 0x30
 8005d0a:	3e01      	subs	r6, #1
 8005d0c:	7033      	strb	r3, [r6, #0]
 8005d0e:	9b04      	ldr	r3, [sp, #16]
 8005d10:	1b9b      	subs	r3, r3, r6
 8005d12:	6123      	str	r3, [r4, #16]
 8005d14:	9b07      	ldr	r3, [sp, #28]
 8005d16:	0021      	movs	r1, r4
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	9805      	ldr	r0, [sp, #20]
 8005d1c:	9b06      	ldr	r3, [sp, #24]
 8005d1e:	aa09      	add	r2, sp, #36	; 0x24
 8005d20:	f7ff fef4 	bl	8005b0c <_printf_common>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d14c      	bne.n	8005dc2 <_printf_i+0x1d6>
 8005d28:	2001      	movs	r0, #1
 8005d2a:	4240      	negs	r0, r0
 8005d2c:	b00b      	add	sp, #44	; 0x2c
 8005d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d30:	3145      	adds	r1, #69	; 0x45
 8005d32:	700a      	strb	r2, [r1, #0]
 8005d34:	4a34      	ldr	r2, [pc, #208]	; (8005e08 <_printf_i+0x21c>)
 8005d36:	9203      	str	r2, [sp, #12]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	6821      	ldr	r1, [r4, #0]
 8005d3c:	ca20      	ldmia	r2!, {r5}
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	0608      	lsls	r0, r1, #24
 8005d42:	d516      	bpl.n	8005d72 <_printf_i+0x186>
 8005d44:	07cb      	lsls	r3, r1, #31
 8005d46:	d502      	bpl.n	8005d4e <_printf_i+0x162>
 8005d48:	2320      	movs	r3, #32
 8005d4a:	4319      	orrs	r1, r3
 8005d4c:	6021      	str	r1, [r4, #0]
 8005d4e:	2710      	movs	r7, #16
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	d1b2      	bne.n	8005cba <_printf_i+0xce>
 8005d54:	2320      	movs	r3, #32
 8005d56:	6822      	ldr	r2, [r4, #0]
 8005d58:	439a      	bics	r2, r3
 8005d5a:	6022      	str	r2, [r4, #0]
 8005d5c:	e7ad      	b.n	8005cba <_printf_i+0xce>
 8005d5e:	2220      	movs	r2, #32
 8005d60:	6809      	ldr	r1, [r1, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	6022      	str	r2, [r4, #0]
 8005d66:	0022      	movs	r2, r4
 8005d68:	2178      	movs	r1, #120	; 0x78
 8005d6a:	3245      	adds	r2, #69	; 0x45
 8005d6c:	7011      	strb	r1, [r2, #0]
 8005d6e:	4a27      	ldr	r2, [pc, #156]	; (8005e0c <_printf_i+0x220>)
 8005d70:	e7e1      	b.n	8005d36 <_printf_i+0x14a>
 8005d72:	0648      	lsls	r0, r1, #25
 8005d74:	d5e6      	bpl.n	8005d44 <_printf_i+0x158>
 8005d76:	b2ad      	uxth	r5, r5
 8005d78:	e7e4      	b.n	8005d44 <_printf_i+0x158>
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	680d      	ldr	r5, [r1, #0]
 8005d7e:	1d10      	adds	r0, r2, #4
 8005d80:	6949      	ldr	r1, [r1, #20]
 8005d82:	6018      	str	r0, [r3, #0]
 8005d84:	6813      	ldr	r3, [r2, #0]
 8005d86:	062e      	lsls	r6, r5, #24
 8005d88:	d501      	bpl.n	8005d8e <_printf_i+0x1a2>
 8005d8a:	6019      	str	r1, [r3, #0]
 8005d8c:	e002      	b.n	8005d94 <_printf_i+0x1a8>
 8005d8e:	066d      	lsls	r5, r5, #25
 8005d90:	d5fb      	bpl.n	8005d8a <_printf_i+0x19e>
 8005d92:	8019      	strh	r1, [r3, #0]
 8005d94:	2300      	movs	r3, #0
 8005d96:	9e04      	ldr	r6, [sp, #16]
 8005d98:	6123      	str	r3, [r4, #16]
 8005d9a:	e7bb      	b.n	8005d14 <_printf_i+0x128>
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	1d11      	adds	r1, r2, #4
 8005da0:	6019      	str	r1, [r3, #0]
 8005da2:	6816      	ldr	r6, [r2, #0]
 8005da4:	2100      	movs	r1, #0
 8005da6:	0030      	movs	r0, r6
 8005da8:	6862      	ldr	r2, [r4, #4]
 8005daa:	f000 f831 	bl	8005e10 <memchr>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d001      	beq.n	8005db6 <_printf_i+0x1ca>
 8005db2:	1b80      	subs	r0, r0, r6
 8005db4:	6060      	str	r0, [r4, #4]
 8005db6:	6863      	ldr	r3, [r4, #4]
 8005db8:	6123      	str	r3, [r4, #16]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	9a04      	ldr	r2, [sp, #16]
 8005dbe:	7013      	strb	r3, [r2, #0]
 8005dc0:	e7a8      	b.n	8005d14 <_printf_i+0x128>
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	0032      	movs	r2, r6
 8005dc6:	9906      	ldr	r1, [sp, #24]
 8005dc8:	9805      	ldr	r0, [sp, #20]
 8005dca:	9d07      	ldr	r5, [sp, #28]
 8005dcc:	47a8      	blx	r5
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	d0aa      	beq.n	8005d28 <_printf_i+0x13c>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	079b      	lsls	r3, r3, #30
 8005dd6:	d415      	bmi.n	8005e04 <_printf_i+0x218>
 8005dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dda:	68e0      	ldr	r0, [r4, #12]
 8005ddc:	4298      	cmp	r0, r3
 8005dde:	daa5      	bge.n	8005d2c <_printf_i+0x140>
 8005de0:	0018      	movs	r0, r3
 8005de2:	e7a3      	b.n	8005d2c <_printf_i+0x140>
 8005de4:	0022      	movs	r2, r4
 8005de6:	2301      	movs	r3, #1
 8005de8:	9906      	ldr	r1, [sp, #24]
 8005dea:	9805      	ldr	r0, [sp, #20]
 8005dec:	9e07      	ldr	r6, [sp, #28]
 8005dee:	3219      	adds	r2, #25
 8005df0:	47b0      	blx	r6
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	d098      	beq.n	8005d28 <_printf_i+0x13c>
 8005df6:	3501      	adds	r5, #1
 8005df8:	68e3      	ldr	r3, [r4, #12]
 8005dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	42ab      	cmp	r3, r5
 8005e00:	dcf0      	bgt.n	8005de4 <_printf_i+0x1f8>
 8005e02:	e7e9      	b.n	8005dd8 <_printf_i+0x1ec>
 8005e04:	2500      	movs	r5, #0
 8005e06:	e7f7      	b.n	8005df8 <_printf_i+0x20c>
 8005e08:	08007799 	.word	0x08007799
 8005e0c:	080077aa 	.word	0x080077aa

08005e10 <memchr>:
 8005e10:	b2c9      	uxtb	r1, r1
 8005e12:	1882      	adds	r2, r0, r2
 8005e14:	4290      	cmp	r0, r2
 8005e16:	d101      	bne.n	8005e1c <memchr+0xc>
 8005e18:	2000      	movs	r0, #0
 8005e1a:	4770      	bx	lr
 8005e1c:	7803      	ldrb	r3, [r0, #0]
 8005e1e:	428b      	cmp	r3, r1
 8005e20:	d0fb      	beq.n	8005e1a <memchr+0xa>
 8005e22:	3001      	adds	r0, #1
 8005e24:	e7f6      	b.n	8005e14 <memchr+0x4>

08005e26 <memcpy>:
 8005e26:	2300      	movs	r3, #0
 8005e28:	b510      	push	{r4, lr}
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d100      	bne.n	8005e30 <memcpy+0xa>
 8005e2e:	bd10      	pop	{r4, pc}
 8005e30:	5ccc      	ldrb	r4, [r1, r3]
 8005e32:	54c4      	strb	r4, [r0, r3]
 8005e34:	3301      	adds	r3, #1
 8005e36:	e7f8      	b.n	8005e2a <memcpy+0x4>

08005e38 <memmove>:
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	4288      	cmp	r0, r1
 8005e3c:	d902      	bls.n	8005e44 <memmove+0xc>
 8005e3e:	188b      	adds	r3, r1, r2
 8005e40:	4298      	cmp	r0, r3
 8005e42:	d303      	bcc.n	8005e4c <memmove+0x14>
 8005e44:	2300      	movs	r3, #0
 8005e46:	e007      	b.n	8005e58 <memmove+0x20>
 8005e48:	5c8b      	ldrb	r3, [r1, r2]
 8005e4a:	5483      	strb	r3, [r0, r2]
 8005e4c:	3a01      	subs	r2, #1
 8005e4e:	d2fb      	bcs.n	8005e48 <memmove+0x10>
 8005e50:	bd10      	pop	{r4, pc}
 8005e52:	5ccc      	ldrb	r4, [r1, r3]
 8005e54:	54c4      	strb	r4, [r0, r3]
 8005e56:	3301      	adds	r3, #1
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d1fa      	bne.n	8005e52 <memmove+0x1a>
 8005e5c:	e7f8      	b.n	8005e50 <memmove+0x18>
	...

08005e60 <_free_r>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	0005      	movs	r5, r0
 8005e64:	2900      	cmp	r1, #0
 8005e66:	d010      	beq.n	8005e8a <_free_r+0x2a>
 8005e68:	1f0c      	subs	r4, r1, #4
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	da00      	bge.n	8005e72 <_free_r+0x12>
 8005e70:	18e4      	adds	r4, r4, r3
 8005e72:	0028      	movs	r0, r5
 8005e74:	f000 f918 	bl	80060a8 <__malloc_lock>
 8005e78:	4a1d      	ldr	r2, [pc, #116]	; (8005ef0 <_free_r+0x90>)
 8005e7a:	6813      	ldr	r3, [r2, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d105      	bne.n	8005e8c <_free_r+0x2c>
 8005e80:	6063      	str	r3, [r4, #4]
 8005e82:	6014      	str	r4, [r2, #0]
 8005e84:	0028      	movs	r0, r5
 8005e86:	f000 f917 	bl	80060b8 <__malloc_unlock>
 8005e8a:	bd70      	pop	{r4, r5, r6, pc}
 8005e8c:	42a3      	cmp	r3, r4
 8005e8e:	d908      	bls.n	8005ea2 <_free_r+0x42>
 8005e90:	6821      	ldr	r1, [r4, #0]
 8005e92:	1860      	adds	r0, r4, r1
 8005e94:	4283      	cmp	r3, r0
 8005e96:	d1f3      	bne.n	8005e80 <_free_r+0x20>
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	1841      	adds	r1, r0, r1
 8005e9e:	6021      	str	r1, [r4, #0]
 8005ea0:	e7ee      	b.n	8005e80 <_free_r+0x20>
 8005ea2:	001a      	movs	r2, r3
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <_free_r+0x4e>
 8005eaa:	42a3      	cmp	r3, r4
 8005eac:	d9f9      	bls.n	8005ea2 <_free_r+0x42>
 8005eae:	6811      	ldr	r1, [r2, #0]
 8005eb0:	1850      	adds	r0, r2, r1
 8005eb2:	42a0      	cmp	r0, r4
 8005eb4:	d10b      	bne.n	8005ece <_free_r+0x6e>
 8005eb6:	6820      	ldr	r0, [r4, #0]
 8005eb8:	1809      	adds	r1, r1, r0
 8005eba:	1850      	adds	r0, r2, r1
 8005ebc:	6011      	str	r1, [r2, #0]
 8005ebe:	4283      	cmp	r3, r0
 8005ec0:	d1e0      	bne.n	8005e84 <_free_r+0x24>
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	1841      	adds	r1, r0, r1
 8005ec8:	6011      	str	r1, [r2, #0]
 8005eca:	6053      	str	r3, [r2, #4]
 8005ecc:	e7da      	b.n	8005e84 <_free_r+0x24>
 8005ece:	42a0      	cmp	r0, r4
 8005ed0:	d902      	bls.n	8005ed8 <_free_r+0x78>
 8005ed2:	230c      	movs	r3, #12
 8005ed4:	602b      	str	r3, [r5, #0]
 8005ed6:	e7d5      	b.n	8005e84 <_free_r+0x24>
 8005ed8:	6821      	ldr	r1, [r4, #0]
 8005eda:	1860      	adds	r0, r4, r1
 8005edc:	4283      	cmp	r3, r0
 8005ede:	d103      	bne.n	8005ee8 <_free_r+0x88>
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	1841      	adds	r1, r0, r1
 8005ee6:	6021      	str	r1, [r4, #0]
 8005ee8:	6063      	str	r3, [r4, #4]
 8005eea:	6054      	str	r4, [r2, #4]
 8005eec:	e7ca      	b.n	8005e84 <_free_r+0x24>
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	20000240 	.word	0x20000240

08005ef4 <sbrk_aligned>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	4e0f      	ldr	r6, [pc, #60]	; (8005f34 <sbrk_aligned+0x40>)
 8005ef8:	000d      	movs	r5, r1
 8005efa:	6831      	ldr	r1, [r6, #0]
 8005efc:	0004      	movs	r4, r0
 8005efe:	2900      	cmp	r1, #0
 8005f00:	d102      	bne.n	8005f08 <sbrk_aligned+0x14>
 8005f02:	f000 f8bf 	bl	8006084 <_sbrk_r>
 8005f06:	6030      	str	r0, [r6, #0]
 8005f08:	0029      	movs	r1, r5
 8005f0a:	0020      	movs	r0, r4
 8005f0c:	f000 f8ba 	bl	8006084 <_sbrk_r>
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	d00a      	beq.n	8005f2a <sbrk_aligned+0x36>
 8005f14:	2303      	movs	r3, #3
 8005f16:	1cc5      	adds	r5, r0, #3
 8005f18:	439d      	bics	r5, r3
 8005f1a:	42a8      	cmp	r0, r5
 8005f1c:	d007      	beq.n	8005f2e <sbrk_aligned+0x3a>
 8005f1e:	1a29      	subs	r1, r5, r0
 8005f20:	0020      	movs	r0, r4
 8005f22:	f000 f8af 	bl	8006084 <_sbrk_r>
 8005f26:	1c43      	adds	r3, r0, #1
 8005f28:	d101      	bne.n	8005f2e <sbrk_aligned+0x3a>
 8005f2a:	2501      	movs	r5, #1
 8005f2c:	426d      	negs	r5, r5
 8005f2e:	0028      	movs	r0, r5
 8005f30:	bd70      	pop	{r4, r5, r6, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	20000244 	.word	0x20000244

08005f38 <_malloc_r>:
 8005f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	1ccb      	adds	r3, r1, #3
 8005f3e:	4393      	bics	r3, r2
 8005f40:	3308      	adds	r3, #8
 8005f42:	0006      	movs	r6, r0
 8005f44:	001f      	movs	r7, r3
 8005f46:	2b0c      	cmp	r3, #12
 8005f48:	d232      	bcs.n	8005fb0 <_malloc_r+0x78>
 8005f4a:	270c      	movs	r7, #12
 8005f4c:	42b9      	cmp	r1, r7
 8005f4e:	d831      	bhi.n	8005fb4 <_malloc_r+0x7c>
 8005f50:	0030      	movs	r0, r6
 8005f52:	f000 f8a9 	bl	80060a8 <__malloc_lock>
 8005f56:	4d32      	ldr	r5, [pc, #200]	; (8006020 <_malloc_r+0xe8>)
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	001c      	movs	r4, r3
 8005f5c:	2c00      	cmp	r4, #0
 8005f5e:	d12e      	bne.n	8005fbe <_malloc_r+0x86>
 8005f60:	0039      	movs	r1, r7
 8005f62:	0030      	movs	r0, r6
 8005f64:	f7ff ffc6 	bl	8005ef4 <sbrk_aligned>
 8005f68:	0004      	movs	r4, r0
 8005f6a:	1c43      	adds	r3, r0, #1
 8005f6c:	d11e      	bne.n	8005fac <_malloc_r+0x74>
 8005f6e:	682c      	ldr	r4, [r5, #0]
 8005f70:	0025      	movs	r5, r4
 8005f72:	2d00      	cmp	r5, #0
 8005f74:	d14a      	bne.n	800600c <_malloc_r+0xd4>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	0029      	movs	r1, r5
 8005f7a:	18e3      	adds	r3, r4, r3
 8005f7c:	0030      	movs	r0, r6
 8005f7e:	9301      	str	r3, [sp, #4]
 8005f80:	f000 f880 	bl	8006084 <_sbrk_r>
 8005f84:	9b01      	ldr	r3, [sp, #4]
 8005f86:	4283      	cmp	r3, r0
 8005f88:	d143      	bne.n	8006012 <_malloc_r+0xda>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	3703      	adds	r7, #3
 8005f8e:	1aff      	subs	r7, r7, r3
 8005f90:	2303      	movs	r3, #3
 8005f92:	439f      	bics	r7, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	2f0c      	cmp	r7, #12
 8005f98:	d200      	bcs.n	8005f9c <_malloc_r+0x64>
 8005f9a:	270c      	movs	r7, #12
 8005f9c:	0039      	movs	r1, r7
 8005f9e:	0030      	movs	r0, r6
 8005fa0:	f7ff ffa8 	bl	8005ef4 <sbrk_aligned>
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d034      	beq.n	8006012 <_malloc_r+0xda>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	19df      	adds	r7, r3, r7
 8005fac:	6027      	str	r7, [r4, #0]
 8005fae:	e013      	b.n	8005fd8 <_malloc_r+0xa0>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	dacb      	bge.n	8005f4c <_malloc_r+0x14>
 8005fb4:	230c      	movs	r3, #12
 8005fb6:	2500      	movs	r5, #0
 8005fb8:	6033      	str	r3, [r6, #0]
 8005fba:	0028      	movs	r0, r5
 8005fbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005fbe:	6822      	ldr	r2, [r4, #0]
 8005fc0:	1bd1      	subs	r1, r2, r7
 8005fc2:	d420      	bmi.n	8006006 <_malloc_r+0xce>
 8005fc4:	290b      	cmp	r1, #11
 8005fc6:	d917      	bls.n	8005ff8 <_malloc_r+0xc0>
 8005fc8:	19e2      	adds	r2, r4, r7
 8005fca:	6027      	str	r7, [r4, #0]
 8005fcc:	42a3      	cmp	r3, r4
 8005fce:	d111      	bne.n	8005ff4 <_malloc_r+0xbc>
 8005fd0:	602a      	str	r2, [r5, #0]
 8005fd2:	6863      	ldr	r3, [r4, #4]
 8005fd4:	6011      	str	r1, [r2, #0]
 8005fd6:	6053      	str	r3, [r2, #4]
 8005fd8:	0030      	movs	r0, r6
 8005fda:	0025      	movs	r5, r4
 8005fdc:	f000 f86c 	bl	80060b8 <__malloc_unlock>
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	350b      	adds	r5, #11
 8005fe4:	1d23      	adds	r3, r4, #4
 8005fe6:	4395      	bics	r5, r2
 8005fe8:	1aea      	subs	r2, r5, r3
 8005fea:	429d      	cmp	r5, r3
 8005fec:	d0e5      	beq.n	8005fba <_malloc_r+0x82>
 8005fee:	1b5b      	subs	r3, r3, r5
 8005ff0:	50a3      	str	r3, [r4, r2]
 8005ff2:	e7e2      	b.n	8005fba <_malloc_r+0x82>
 8005ff4:	605a      	str	r2, [r3, #4]
 8005ff6:	e7ec      	b.n	8005fd2 <_malloc_r+0x9a>
 8005ff8:	6862      	ldr	r2, [r4, #4]
 8005ffa:	42a3      	cmp	r3, r4
 8005ffc:	d101      	bne.n	8006002 <_malloc_r+0xca>
 8005ffe:	602a      	str	r2, [r5, #0]
 8006000:	e7ea      	b.n	8005fd8 <_malloc_r+0xa0>
 8006002:	605a      	str	r2, [r3, #4]
 8006004:	e7e8      	b.n	8005fd8 <_malloc_r+0xa0>
 8006006:	0023      	movs	r3, r4
 8006008:	6864      	ldr	r4, [r4, #4]
 800600a:	e7a7      	b.n	8005f5c <_malloc_r+0x24>
 800600c:	002c      	movs	r4, r5
 800600e:	686d      	ldr	r5, [r5, #4]
 8006010:	e7af      	b.n	8005f72 <_malloc_r+0x3a>
 8006012:	230c      	movs	r3, #12
 8006014:	0030      	movs	r0, r6
 8006016:	6033      	str	r3, [r6, #0]
 8006018:	f000 f84e 	bl	80060b8 <__malloc_unlock>
 800601c:	e7cd      	b.n	8005fba <_malloc_r+0x82>
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	20000240 	.word	0x20000240

08006024 <_realloc_r>:
 8006024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006026:	0007      	movs	r7, r0
 8006028:	000e      	movs	r6, r1
 800602a:	0014      	movs	r4, r2
 800602c:	2900      	cmp	r1, #0
 800602e:	d105      	bne.n	800603c <_realloc_r+0x18>
 8006030:	0011      	movs	r1, r2
 8006032:	f7ff ff81 	bl	8005f38 <_malloc_r>
 8006036:	0005      	movs	r5, r0
 8006038:	0028      	movs	r0, r5
 800603a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800603c:	2a00      	cmp	r2, #0
 800603e:	d103      	bne.n	8006048 <_realloc_r+0x24>
 8006040:	f7ff ff0e 	bl	8005e60 <_free_r>
 8006044:	0025      	movs	r5, r4
 8006046:	e7f7      	b.n	8006038 <_realloc_r+0x14>
 8006048:	f000 f83e 	bl	80060c8 <_malloc_usable_size_r>
 800604c:	9001      	str	r0, [sp, #4]
 800604e:	4284      	cmp	r4, r0
 8006050:	d803      	bhi.n	800605a <_realloc_r+0x36>
 8006052:	0035      	movs	r5, r6
 8006054:	0843      	lsrs	r3, r0, #1
 8006056:	42a3      	cmp	r3, r4
 8006058:	d3ee      	bcc.n	8006038 <_realloc_r+0x14>
 800605a:	0021      	movs	r1, r4
 800605c:	0038      	movs	r0, r7
 800605e:	f7ff ff6b 	bl	8005f38 <_malloc_r>
 8006062:	1e05      	subs	r5, r0, #0
 8006064:	d0e8      	beq.n	8006038 <_realloc_r+0x14>
 8006066:	9b01      	ldr	r3, [sp, #4]
 8006068:	0022      	movs	r2, r4
 800606a:	429c      	cmp	r4, r3
 800606c:	d900      	bls.n	8006070 <_realloc_r+0x4c>
 800606e:	001a      	movs	r2, r3
 8006070:	0031      	movs	r1, r6
 8006072:	0028      	movs	r0, r5
 8006074:	f7ff fed7 	bl	8005e26 <memcpy>
 8006078:	0031      	movs	r1, r6
 800607a:	0038      	movs	r0, r7
 800607c:	f7ff fef0 	bl	8005e60 <_free_r>
 8006080:	e7da      	b.n	8006038 <_realloc_r+0x14>
	...

08006084 <_sbrk_r>:
 8006084:	2300      	movs	r3, #0
 8006086:	b570      	push	{r4, r5, r6, lr}
 8006088:	4d06      	ldr	r5, [pc, #24]	; (80060a4 <_sbrk_r+0x20>)
 800608a:	0004      	movs	r4, r0
 800608c:	0008      	movs	r0, r1
 800608e:	602b      	str	r3, [r5, #0]
 8006090:	f7fc fc2e 	bl	80028f0 <_sbrk>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d103      	bne.n	80060a0 <_sbrk_r+0x1c>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d000      	beq.n	80060a0 <_sbrk_r+0x1c>
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	bd70      	pop	{r4, r5, r6, pc}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	20000248 	.word	0x20000248

080060a8 <__malloc_lock>:
 80060a8:	b510      	push	{r4, lr}
 80060aa:	4802      	ldr	r0, [pc, #8]	; (80060b4 <__malloc_lock+0xc>)
 80060ac:	f000 f814 	bl	80060d8 <__retarget_lock_acquire_recursive>
 80060b0:	bd10      	pop	{r4, pc}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	2000024c 	.word	0x2000024c

080060b8 <__malloc_unlock>:
 80060b8:	b510      	push	{r4, lr}
 80060ba:	4802      	ldr	r0, [pc, #8]	; (80060c4 <__malloc_unlock+0xc>)
 80060bc:	f000 f80d 	bl	80060da <__retarget_lock_release_recursive>
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	2000024c 	.word	0x2000024c

080060c8 <_malloc_usable_size_r>:
 80060c8:	1f0b      	subs	r3, r1, #4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	1f18      	subs	r0, r3, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	da01      	bge.n	80060d6 <_malloc_usable_size_r+0xe>
 80060d2:	580b      	ldr	r3, [r1, r0]
 80060d4:	18c0      	adds	r0, r0, r3
 80060d6:	4770      	bx	lr

080060d8 <__retarget_lock_acquire_recursive>:
 80060d8:	4770      	bx	lr

080060da <__retarget_lock_release_recursive>:
 80060da:	4770      	bx	lr

080060dc <sin>:
 80060dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060de:	4a20      	ldr	r2, [pc, #128]	; (8006160 <sin+0x84>)
 80060e0:	004b      	lsls	r3, r1, #1
 80060e2:	b087      	sub	sp, #28
 80060e4:	085b      	lsrs	r3, r3, #1
 80060e6:	4293      	cmp	r3, r2
 80060e8:	dc06      	bgt.n	80060f8 <sin+0x1c>
 80060ea:	2300      	movs	r3, #0
 80060ec:	2200      	movs	r2, #0
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	2300      	movs	r3, #0
 80060f2:	f001 f929 	bl	8007348 <__kernel_sin>
 80060f6:	e006      	b.n	8006106 <sin+0x2a>
 80060f8:	4a1a      	ldr	r2, [pc, #104]	; (8006164 <sin+0x88>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	dd05      	ble.n	800610a <sin+0x2e>
 80060fe:	0002      	movs	r2, r0
 8006100:	000b      	movs	r3, r1
 8006102:	f7fb fb69 	bl	80017d8 <__aeabi_dsub>
 8006106:	b007      	add	sp, #28
 8006108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800610a:	aa02      	add	r2, sp, #8
 800610c:	f000 fa4c 	bl	80065a8 <__ieee754_rem_pio2>
 8006110:	9c04      	ldr	r4, [sp, #16]
 8006112:	9d05      	ldr	r5, [sp, #20]
 8006114:	2303      	movs	r3, #3
 8006116:	4003      	ands	r3, r0
 8006118:	2b01      	cmp	r3, #1
 800611a:	d00a      	beq.n	8006132 <sin+0x56>
 800611c:	9802      	ldr	r0, [sp, #8]
 800611e:	9903      	ldr	r1, [sp, #12]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d00d      	beq.n	8006140 <sin+0x64>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d115      	bne.n	8006154 <sin+0x78>
 8006128:	3301      	adds	r3, #1
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	0022      	movs	r2, r4
 800612e:	002b      	movs	r3, r5
 8006130:	e7df      	b.n	80060f2 <sin+0x16>
 8006132:	0022      	movs	r2, r4
 8006134:	9802      	ldr	r0, [sp, #8]
 8006136:	9903      	ldr	r1, [sp, #12]
 8006138:	002b      	movs	r3, r5
 800613a:	f000 fcdb 	bl	8006af4 <__kernel_cos>
 800613e:	e7e2      	b.n	8006106 <sin+0x2a>
 8006140:	2301      	movs	r3, #1
 8006142:	0022      	movs	r2, r4
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	002b      	movs	r3, r5
 8006148:	f001 f8fe 	bl	8007348 <__kernel_sin>
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	061b      	lsls	r3, r3, #24
 8006150:	18c9      	adds	r1, r1, r3
 8006152:	e7d8      	b.n	8006106 <sin+0x2a>
 8006154:	0022      	movs	r2, r4
 8006156:	002b      	movs	r3, r5
 8006158:	f000 fccc 	bl	8006af4 <__kernel_cos>
 800615c:	e7f6      	b.n	800614c <sin+0x70>
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	3fe921fb 	.word	0x3fe921fb
 8006164:	7fefffff 	.word	0x7fefffff

08006168 <acos>:
 8006168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616a:	0004      	movs	r4, r0
 800616c:	000d      	movs	r5, r1
 800616e:	f000 f825 	bl	80061bc <__ieee754_acos>
 8006172:	0022      	movs	r2, r4
 8006174:	0006      	movs	r6, r0
 8006176:	000f      	movs	r7, r1
 8006178:	002b      	movs	r3, r5
 800617a:	0020      	movs	r0, r4
 800617c:	0029      	movs	r1, r5
 800617e:	f7fb febd 	bl	8001efc <__aeabi_dcmpun>
 8006182:	2800      	cmp	r0, #0
 8006184:	d112      	bne.n	80061ac <acos+0x44>
 8006186:	0020      	movs	r0, r4
 8006188:	0029      	movs	r1, r5
 800618a:	f001 f989 	bl	80074a0 <fabs>
 800618e:	2200      	movs	r2, #0
 8006190:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <acos+0x4c>)
 8006192:	f7fa f963 	bl	800045c <__aeabi_dcmpgt>
 8006196:	2800      	cmp	r0, #0
 8006198:	d008      	beq.n	80061ac <acos+0x44>
 800619a:	f7ff faef 	bl	800577c <__errno>
 800619e:	2321      	movs	r3, #33	; 0x21
 80061a0:	6003      	str	r3, [r0, #0]
 80061a2:	4805      	ldr	r0, [pc, #20]	; (80061b8 <acos+0x50>)
 80061a4:	f001 fa0a 	bl	80075bc <nan>
 80061a8:	0006      	movs	r6, r0
 80061aa:	000f      	movs	r7, r1
 80061ac:	0030      	movs	r0, r6
 80061ae:	0039      	movs	r1, r7
 80061b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061b2:	46c0      	nop			; (mov r8, r8)
 80061b4:	3ff00000 	.word	0x3ff00000
 80061b8:	0800778d 	.word	0x0800778d

080061bc <__ieee754_acos>:
 80061bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061be:	004b      	lsls	r3, r1, #1
 80061c0:	000e      	movs	r6, r1
 80061c2:	49da      	ldr	r1, [pc, #872]	; (800652c <__ieee754_acos+0x370>)
 80061c4:	0007      	movs	r7, r0
 80061c6:	b085      	sub	sp, #20
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	428b      	cmp	r3, r1
 80061cc:	dd14      	ble.n	80061f8 <__ieee754_acos+0x3c>
 80061ce:	49d8      	ldr	r1, [pc, #864]	; (8006530 <__ieee754_acos+0x374>)
 80061d0:	185b      	adds	r3, r3, r1
 80061d2:	4303      	orrs	r3, r0
 80061d4:	d106      	bne.n	80061e4 <__ieee754_acos+0x28>
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	dd00      	ble.n	80061dc <__ieee754_acos+0x20>
 80061da:	e1a0      	b.n	800651e <__ieee754_acos+0x362>
 80061dc:	48d5      	ldr	r0, [pc, #852]	; (8006534 <__ieee754_acos+0x378>)
 80061de:	49d6      	ldr	r1, [pc, #856]	; (8006538 <__ieee754_acos+0x37c>)
 80061e0:	b005      	add	sp, #20
 80061e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061e4:	0033      	movs	r3, r6
 80061e6:	0002      	movs	r2, r0
 80061e8:	0031      	movs	r1, r6
 80061ea:	f7fb faf5 	bl	80017d8 <__aeabi_dsub>
 80061ee:	0002      	movs	r2, r0
 80061f0:	000b      	movs	r3, r1
 80061f2:	f7fa fc83 	bl	8000afc <__aeabi_ddiv>
 80061f6:	e7f3      	b.n	80061e0 <__ieee754_acos+0x24>
 80061f8:	49d0      	ldr	r1, [pc, #832]	; (800653c <__ieee754_acos+0x380>)
 80061fa:	428b      	cmp	r3, r1
 80061fc:	dc77      	bgt.n	80062ee <__ieee754_acos+0x132>
 80061fe:	4ad0      	ldr	r2, [pc, #832]	; (8006540 <__ieee754_acos+0x384>)
 8006200:	4293      	cmp	r3, r2
 8006202:	dc00      	bgt.n	8006206 <__ieee754_acos+0x4a>
 8006204:	e18e      	b.n	8006524 <__ieee754_acos+0x368>
 8006206:	0002      	movs	r2, r0
 8006208:	0033      	movs	r3, r6
 800620a:	0031      	movs	r1, r6
 800620c:	f7fb f878 	bl	8001300 <__aeabi_dmul>
 8006210:	0004      	movs	r4, r0
 8006212:	000d      	movs	r5, r1
 8006214:	4acb      	ldr	r2, [pc, #812]	; (8006544 <__ieee754_acos+0x388>)
 8006216:	4bcc      	ldr	r3, [pc, #816]	; (8006548 <__ieee754_acos+0x38c>)
 8006218:	f7fb f872 	bl	8001300 <__aeabi_dmul>
 800621c:	4acb      	ldr	r2, [pc, #812]	; (800654c <__ieee754_acos+0x390>)
 800621e:	4bcc      	ldr	r3, [pc, #816]	; (8006550 <__ieee754_acos+0x394>)
 8006220:	f7fa f930 	bl	8000484 <__aeabi_dadd>
 8006224:	0022      	movs	r2, r4
 8006226:	002b      	movs	r3, r5
 8006228:	f7fb f86a 	bl	8001300 <__aeabi_dmul>
 800622c:	4ac9      	ldr	r2, [pc, #804]	; (8006554 <__ieee754_acos+0x398>)
 800622e:	4bca      	ldr	r3, [pc, #808]	; (8006558 <__ieee754_acos+0x39c>)
 8006230:	f7fb fad2 	bl	80017d8 <__aeabi_dsub>
 8006234:	0022      	movs	r2, r4
 8006236:	002b      	movs	r3, r5
 8006238:	f7fb f862 	bl	8001300 <__aeabi_dmul>
 800623c:	4ac7      	ldr	r2, [pc, #796]	; (800655c <__ieee754_acos+0x3a0>)
 800623e:	4bc8      	ldr	r3, [pc, #800]	; (8006560 <__ieee754_acos+0x3a4>)
 8006240:	f7fa f920 	bl	8000484 <__aeabi_dadd>
 8006244:	0022      	movs	r2, r4
 8006246:	002b      	movs	r3, r5
 8006248:	f7fb f85a 	bl	8001300 <__aeabi_dmul>
 800624c:	4ac5      	ldr	r2, [pc, #788]	; (8006564 <__ieee754_acos+0x3a8>)
 800624e:	4bc6      	ldr	r3, [pc, #792]	; (8006568 <__ieee754_acos+0x3ac>)
 8006250:	f7fb fac2 	bl	80017d8 <__aeabi_dsub>
 8006254:	0022      	movs	r2, r4
 8006256:	002b      	movs	r3, r5
 8006258:	f7fb f852 	bl	8001300 <__aeabi_dmul>
 800625c:	4ac3      	ldr	r2, [pc, #780]	; (800656c <__ieee754_acos+0x3b0>)
 800625e:	4bc4      	ldr	r3, [pc, #784]	; (8006570 <__ieee754_acos+0x3b4>)
 8006260:	f7fa f910 	bl	8000484 <__aeabi_dadd>
 8006264:	0022      	movs	r2, r4
 8006266:	002b      	movs	r3, r5
 8006268:	f7fb f84a 	bl	8001300 <__aeabi_dmul>
 800626c:	4ac1      	ldr	r2, [pc, #772]	; (8006574 <__ieee754_acos+0x3b8>)
 800626e:	9000      	str	r0, [sp, #0]
 8006270:	9101      	str	r1, [sp, #4]
 8006272:	4bc1      	ldr	r3, [pc, #772]	; (8006578 <__ieee754_acos+0x3bc>)
 8006274:	0020      	movs	r0, r4
 8006276:	0029      	movs	r1, r5
 8006278:	f7fb f842 	bl	8001300 <__aeabi_dmul>
 800627c:	4abf      	ldr	r2, [pc, #764]	; (800657c <__ieee754_acos+0x3c0>)
 800627e:	4bc0      	ldr	r3, [pc, #768]	; (8006580 <__ieee754_acos+0x3c4>)
 8006280:	f7fb faaa 	bl	80017d8 <__aeabi_dsub>
 8006284:	0022      	movs	r2, r4
 8006286:	002b      	movs	r3, r5
 8006288:	f7fb f83a 	bl	8001300 <__aeabi_dmul>
 800628c:	4abd      	ldr	r2, [pc, #756]	; (8006584 <__ieee754_acos+0x3c8>)
 800628e:	4bbe      	ldr	r3, [pc, #760]	; (8006588 <__ieee754_acos+0x3cc>)
 8006290:	f7fa f8f8 	bl	8000484 <__aeabi_dadd>
 8006294:	0022      	movs	r2, r4
 8006296:	002b      	movs	r3, r5
 8006298:	f7fb f832 	bl	8001300 <__aeabi_dmul>
 800629c:	4abb      	ldr	r2, [pc, #748]	; (800658c <__ieee754_acos+0x3d0>)
 800629e:	4bbc      	ldr	r3, [pc, #752]	; (8006590 <__ieee754_acos+0x3d4>)
 80062a0:	f7fb fa9a 	bl	80017d8 <__aeabi_dsub>
 80062a4:	0022      	movs	r2, r4
 80062a6:	002b      	movs	r3, r5
 80062a8:	f7fb f82a 	bl	8001300 <__aeabi_dmul>
 80062ac:	2200      	movs	r2, #0
 80062ae:	4bb9      	ldr	r3, [pc, #740]	; (8006594 <__ieee754_acos+0x3d8>)
 80062b0:	f7fa f8e8 	bl	8000484 <__aeabi_dadd>
 80062b4:	0002      	movs	r2, r0
 80062b6:	000b      	movs	r3, r1
 80062b8:	9800      	ldr	r0, [sp, #0]
 80062ba:	9901      	ldr	r1, [sp, #4]
 80062bc:	f7fa fc1e 	bl	8000afc <__aeabi_ddiv>
 80062c0:	003a      	movs	r2, r7
 80062c2:	0033      	movs	r3, r6
 80062c4:	f7fb f81c 	bl	8001300 <__aeabi_dmul>
 80062c8:	0002      	movs	r2, r0
 80062ca:	000b      	movs	r3, r1
 80062cc:	48b2      	ldr	r0, [pc, #712]	; (8006598 <__ieee754_acos+0x3dc>)
 80062ce:	49b3      	ldr	r1, [pc, #716]	; (800659c <__ieee754_acos+0x3e0>)
 80062d0:	f7fb fa82 	bl	80017d8 <__aeabi_dsub>
 80062d4:	0002      	movs	r2, r0
 80062d6:	000b      	movs	r3, r1
 80062d8:	0038      	movs	r0, r7
 80062da:	0031      	movs	r1, r6
 80062dc:	f7fb fa7c 	bl	80017d8 <__aeabi_dsub>
 80062e0:	0002      	movs	r2, r0
 80062e2:	000b      	movs	r3, r1
 80062e4:	4893      	ldr	r0, [pc, #588]	; (8006534 <__ieee754_acos+0x378>)
 80062e6:	49ae      	ldr	r1, [pc, #696]	; (80065a0 <__ieee754_acos+0x3e4>)
 80062e8:	f7fb fa76 	bl	80017d8 <__aeabi_dsub>
 80062ec:	e778      	b.n	80061e0 <__ieee754_acos+0x24>
 80062ee:	2e00      	cmp	r6, #0
 80062f0:	da7b      	bge.n	80063ea <__ieee754_acos+0x22e>
 80062f2:	2200      	movs	r2, #0
 80062f4:	0031      	movs	r1, r6
 80062f6:	4ba7      	ldr	r3, [pc, #668]	; (8006594 <__ieee754_acos+0x3d8>)
 80062f8:	f7fa f8c4 	bl	8000484 <__aeabi_dadd>
 80062fc:	2200      	movs	r2, #0
 80062fe:	4ba9      	ldr	r3, [pc, #676]	; (80065a4 <__ieee754_acos+0x3e8>)
 8006300:	f7fa fffe 	bl	8001300 <__aeabi_dmul>
 8006304:	0004      	movs	r4, r0
 8006306:	000d      	movs	r5, r1
 8006308:	4a8e      	ldr	r2, [pc, #568]	; (8006544 <__ieee754_acos+0x388>)
 800630a:	4b8f      	ldr	r3, [pc, #572]	; (8006548 <__ieee754_acos+0x38c>)
 800630c:	f7fa fff8 	bl	8001300 <__aeabi_dmul>
 8006310:	4a8e      	ldr	r2, [pc, #568]	; (800654c <__ieee754_acos+0x390>)
 8006312:	4b8f      	ldr	r3, [pc, #572]	; (8006550 <__ieee754_acos+0x394>)
 8006314:	f7fa f8b6 	bl	8000484 <__aeabi_dadd>
 8006318:	0022      	movs	r2, r4
 800631a:	002b      	movs	r3, r5
 800631c:	f7fa fff0 	bl	8001300 <__aeabi_dmul>
 8006320:	4a8c      	ldr	r2, [pc, #560]	; (8006554 <__ieee754_acos+0x398>)
 8006322:	4b8d      	ldr	r3, [pc, #564]	; (8006558 <__ieee754_acos+0x39c>)
 8006324:	f7fb fa58 	bl	80017d8 <__aeabi_dsub>
 8006328:	0022      	movs	r2, r4
 800632a:	002b      	movs	r3, r5
 800632c:	f7fa ffe8 	bl	8001300 <__aeabi_dmul>
 8006330:	4a8a      	ldr	r2, [pc, #552]	; (800655c <__ieee754_acos+0x3a0>)
 8006332:	4b8b      	ldr	r3, [pc, #556]	; (8006560 <__ieee754_acos+0x3a4>)
 8006334:	f7fa f8a6 	bl	8000484 <__aeabi_dadd>
 8006338:	0022      	movs	r2, r4
 800633a:	002b      	movs	r3, r5
 800633c:	f7fa ffe0 	bl	8001300 <__aeabi_dmul>
 8006340:	4a88      	ldr	r2, [pc, #544]	; (8006564 <__ieee754_acos+0x3a8>)
 8006342:	4b89      	ldr	r3, [pc, #548]	; (8006568 <__ieee754_acos+0x3ac>)
 8006344:	f7fb fa48 	bl	80017d8 <__aeabi_dsub>
 8006348:	0022      	movs	r2, r4
 800634a:	002b      	movs	r3, r5
 800634c:	f7fa ffd8 	bl	8001300 <__aeabi_dmul>
 8006350:	4a86      	ldr	r2, [pc, #536]	; (800656c <__ieee754_acos+0x3b0>)
 8006352:	4b87      	ldr	r3, [pc, #540]	; (8006570 <__ieee754_acos+0x3b4>)
 8006354:	f7fa f896 	bl	8000484 <__aeabi_dadd>
 8006358:	0022      	movs	r2, r4
 800635a:	002b      	movs	r3, r5
 800635c:	f7fa ffd0 	bl	8001300 <__aeabi_dmul>
 8006360:	9000      	str	r0, [sp, #0]
 8006362:	9101      	str	r1, [sp, #4]
 8006364:	0020      	movs	r0, r4
 8006366:	0029      	movs	r1, r5
 8006368:	f000 fb0e 	bl	8006988 <__ieee754_sqrt>
 800636c:	4a81      	ldr	r2, [pc, #516]	; (8006574 <__ieee754_acos+0x3b8>)
 800636e:	0006      	movs	r6, r0
 8006370:	000f      	movs	r7, r1
 8006372:	4b81      	ldr	r3, [pc, #516]	; (8006578 <__ieee754_acos+0x3bc>)
 8006374:	0020      	movs	r0, r4
 8006376:	0029      	movs	r1, r5
 8006378:	f7fa ffc2 	bl	8001300 <__aeabi_dmul>
 800637c:	4a7f      	ldr	r2, [pc, #508]	; (800657c <__ieee754_acos+0x3c0>)
 800637e:	4b80      	ldr	r3, [pc, #512]	; (8006580 <__ieee754_acos+0x3c4>)
 8006380:	f7fb fa2a 	bl	80017d8 <__aeabi_dsub>
 8006384:	0022      	movs	r2, r4
 8006386:	002b      	movs	r3, r5
 8006388:	f7fa ffba 	bl	8001300 <__aeabi_dmul>
 800638c:	4a7d      	ldr	r2, [pc, #500]	; (8006584 <__ieee754_acos+0x3c8>)
 800638e:	4b7e      	ldr	r3, [pc, #504]	; (8006588 <__ieee754_acos+0x3cc>)
 8006390:	f7fa f878 	bl	8000484 <__aeabi_dadd>
 8006394:	0022      	movs	r2, r4
 8006396:	002b      	movs	r3, r5
 8006398:	f7fa ffb2 	bl	8001300 <__aeabi_dmul>
 800639c:	4a7b      	ldr	r2, [pc, #492]	; (800658c <__ieee754_acos+0x3d0>)
 800639e:	4b7c      	ldr	r3, [pc, #496]	; (8006590 <__ieee754_acos+0x3d4>)
 80063a0:	f7fb fa1a 	bl	80017d8 <__aeabi_dsub>
 80063a4:	0022      	movs	r2, r4
 80063a6:	002b      	movs	r3, r5
 80063a8:	f7fa ffaa 	bl	8001300 <__aeabi_dmul>
 80063ac:	2200      	movs	r2, #0
 80063ae:	4b79      	ldr	r3, [pc, #484]	; (8006594 <__ieee754_acos+0x3d8>)
 80063b0:	f7fa f868 	bl	8000484 <__aeabi_dadd>
 80063b4:	0002      	movs	r2, r0
 80063b6:	000b      	movs	r3, r1
 80063b8:	9800      	ldr	r0, [sp, #0]
 80063ba:	9901      	ldr	r1, [sp, #4]
 80063bc:	f7fa fb9e 	bl	8000afc <__aeabi_ddiv>
 80063c0:	0032      	movs	r2, r6
 80063c2:	003b      	movs	r3, r7
 80063c4:	f7fa ff9c 	bl	8001300 <__aeabi_dmul>
 80063c8:	4a73      	ldr	r2, [pc, #460]	; (8006598 <__ieee754_acos+0x3dc>)
 80063ca:	4b74      	ldr	r3, [pc, #464]	; (800659c <__ieee754_acos+0x3e0>)
 80063cc:	f7fb fa04 	bl	80017d8 <__aeabi_dsub>
 80063d0:	0032      	movs	r2, r6
 80063d2:	003b      	movs	r3, r7
 80063d4:	f7fa f856 	bl	8000484 <__aeabi_dadd>
 80063d8:	0002      	movs	r2, r0
 80063da:	000b      	movs	r3, r1
 80063dc:	f7fa f852 	bl	8000484 <__aeabi_dadd>
 80063e0:	0002      	movs	r2, r0
 80063e2:	000b      	movs	r3, r1
 80063e4:	4853      	ldr	r0, [pc, #332]	; (8006534 <__ieee754_acos+0x378>)
 80063e6:	4954      	ldr	r1, [pc, #336]	; (8006538 <__ieee754_acos+0x37c>)
 80063e8:	e77e      	b.n	80062e8 <__ieee754_acos+0x12c>
 80063ea:	0002      	movs	r2, r0
 80063ec:	0033      	movs	r3, r6
 80063ee:	2000      	movs	r0, #0
 80063f0:	4968      	ldr	r1, [pc, #416]	; (8006594 <__ieee754_acos+0x3d8>)
 80063f2:	f7fb f9f1 	bl	80017d8 <__aeabi_dsub>
 80063f6:	2200      	movs	r2, #0
 80063f8:	4b6a      	ldr	r3, [pc, #424]	; (80065a4 <__ieee754_acos+0x3e8>)
 80063fa:	f7fa ff81 	bl	8001300 <__aeabi_dmul>
 80063fe:	0004      	movs	r4, r0
 8006400:	000d      	movs	r5, r1
 8006402:	f000 fac1 	bl	8006988 <__ieee754_sqrt>
 8006406:	4a4f      	ldr	r2, [pc, #316]	; (8006544 <__ieee754_acos+0x388>)
 8006408:	9000      	str	r0, [sp, #0]
 800640a:	9101      	str	r1, [sp, #4]
 800640c:	9e00      	ldr	r6, [sp, #0]
 800640e:	9f01      	ldr	r7, [sp, #4]
 8006410:	0020      	movs	r0, r4
 8006412:	0029      	movs	r1, r5
 8006414:	4b4c      	ldr	r3, [pc, #304]	; (8006548 <__ieee754_acos+0x38c>)
 8006416:	f7fa ff73 	bl	8001300 <__aeabi_dmul>
 800641a:	4a4c      	ldr	r2, [pc, #304]	; (800654c <__ieee754_acos+0x390>)
 800641c:	4b4c      	ldr	r3, [pc, #304]	; (8006550 <__ieee754_acos+0x394>)
 800641e:	f7fa f831 	bl	8000484 <__aeabi_dadd>
 8006422:	0022      	movs	r2, r4
 8006424:	002b      	movs	r3, r5
 8006426:	f7fa ff6b 	bl	8001300 <__aeabi_dmul>
 800642a:	4a4a      	ldr	r2, [pc, #296]	; (8006554 <__ieee754_acos+0x398>)
 800642c:	4b4a      	ldr	r3, [pc, #296]	; (8006558 <__ieee754_acos+0x39c>)
 800642e:	f7fb f9d3 	bl	80017d8 <__aeabi_dsub>
 8006432:	0022      	movs	r2, r4
 8006434:	002b      	movs	r3, r5
 8006436:	f7fa ff63 	bl	8001300 <__aeabi_dmul>
 800643a:	4a48      	ldr	r2, [pc, #288]	; (800655c <__ieee754_acos+0x3a0>)
 800643c:	4b48      	ldr	r3, [pc, #288]	; (8006560 <__ieee754_acos+0x3a4>)
 800643e:	f7fa f821 	bl	8000484 <__aeabi_dadd>
 8006442:	0022      	movs	r2, r4
 8006444:	002b      	movs	r3, r5
 8006446:	f7fa ff5b 	bl	8001300 <__aeabi_dmul>
 800644a:	4a46      	ldr	r2, [pc, #280]	; (8006564 <__ieee754_acos+0x3a8>)
 800644c:	4b46      	ldr	r3, [pc, #280]	; (8006568 <__ieee754_acos+0x3ac>)
 800644e:	f7fb f9c3 	bl	80017d8 <__aeabi_dsub>
 8006452:	0022      	movs	r2, r4
 8006454:	002b      	movs	r3, r5
 8006456:	f7fa ff53 	bl	8001300 <__aeabi_dmul>
 800645a:	4a44      	ldr	r2, [pc, #272]	; (800656c <__ieee754_acos+0x3b0>)
 800645c:	4b44      	ldr	r3, [pc, #272]	; (8006570 <__ieee754_acos+0x3b4>)
 800645e:	f7fa f811 	bl	8000484 <__aeabi_dadd>
 8006462:	0022      	movs	r2, r4
 8006464:	002b      	movs	r3, r5
 8006466:	f7fa ff4b 	bl	8001300 <__aeabi_dmul>
 800646a:	4a42      	ldr	r2, [pc, #264]	; (8006574 <__ieee754_acos+0x3b8>)
 800646c:	9002      	str	r0, [sp, #8]
 800646e:	9103      	str	r1, [sp, #12]
 8006470:	4b41      	ldr	r3, [pc, #260]	; (8006578 <__ieee754_acos+0x3bc>)
 8006472:	0020      	movs	r0, r4
 8006474:	0029      	movs	r1, r5
 8006476:	f7fa ff43 	bl	8001300 <__aeabi_dmul>
 800647a:	4a40      	ldr	r2, [pc, #256]	; (800657c <__ieee754_acos+0x3c0>)
 800647c:	4b40      	ldr	r3, [pc, #256]	; (8006580 <__ieee754_acos+0x3c4>)
 800647e:	f7fb f9ab 	bl	80017d8 <__aeabi_dsub>
 8006482:	0022      	movs	r2, r4
 8006484:	002b      	movs	r3, r5
 8006486:	f7fa ff3b 	bl	8001300 <__aeabi_dmul>
 800648a:	4a3e      	ldr	r2, [pc, #248]	; (8006584 <__ieee754_acos+0x3c8>)
 800648c:	4b3e      	ldr	r3, [pc, #248]	; (8006588 <__ieee754_acos+0x3cc>)
 800648e:	f7f9 fff9 	bl	8000484 <__aeabi_dadd>
 8006492:	0022      	movs	r2, r4
 8006494:	002b      	movs	r3, r5
 8006496:	f7fa ff33 	bl	8001300 <__aeabi_dmul>
 800649a:	4a3c      	ldr	r2, [pc, #240]	; (800658c <__ieee754_acos+0x3d0>)
 800649c:	4b3c      	ldr	r3, [pc, #240]	; (8006590 <__ieee754_acos+0x3d4>)
 800649e:	f7fb f99b 	bl	80017d8 <__aeabi_dsub>
 80064a2:	0022      	movs	r2, r4
 80064a4:	002b      	movs	r3, r5
 80064a6:	f7fa ff2b 	bl	8001300 <__aeabi_dmul>
 80064aa:	2200      	movs	r2, #0
 80064ac:	4b39      	ldr	r3, [pc, #228]	; (8006594 <__ieee754_acos+0x3d8>)
 80064ae:	f7f9 ffe9 	bl	8000484 <__aeabi_dadd>
 80064b2:	0002      	movs	r2, r0
 80064b4:	000b      	movs	r3, r1
 80064b6:	9802      	ldr	r0, [sp, #8]
 80064b8:	9903      	ldr	r1, [sp, #12]
 80064ba:	f7fa fb1f 	bl	8000afc <__aeabi_ddiv>
 80064be:	9a00      	ldr	r2, [sp, #0]
 80064c0:	9b01      	ldr	r3, [sp, #4]
 80064c2:	f7fa ff1d 	bl	8001300 <__aeabi_dmul>
 80064c6:	2600      	movs	r6, #0
 80064c8:	9002      	str	r0, [sp, #8]
 80064ca:	9103      	str	r1, [sp, #12]
 80064cc:	0032      	movs	r2, r6
 80064ce:	003b      	movs	r3, r7
 80064d0:	0030      	movs	r0, r6
 80064d2:	0039      	movs	r1, r7
 80064d4:	f7fa ff14 	bl	8001300 <__aeabi_dmul>
 80064d8:	0002      	movs	r2, r0
 80064da:	000b      	movs	r3, r1
 80064dc:	0020      	movs	r0, r4
 80064de:	0029      	movs	r1, r5
 80064e0:	f7fb f97a 	bl	80017d8 <__aeabi_dsub>
 80064e4:	0032      	movs	r2, r6
 80064e6:	0004      	movs	r4, r0
 80064e8:	000d      	movs	r5, r1
 80064ea:	9800      	ldr	r0, [sp, #0]
 80064ec:	9901      	ldr	r1, [sp, #4]
 80064ee:	003b      	movs	r3, r7
 80064f0:	f7f9 ffc8 	bl	8000484 <__aeabi_dadd>
 80064f4:	0002      	movs	r2, r0
 80064f6:	000b      	movs	r3, r1
 80064f8:	0020      	movs	r0, r4
 80064fa:	0029      	movs	r1, r5
 80064fc:	f7fa fafe 	bl	8000afc <__aeabi_ddiv>
 8006500:	0002      	movs	r2, r0
 8006502:	000b      	movs	r3, r1
 8006504:	9802      	ldr	r0, [sp, #8]
 8006506:	9903      	ldr	r1, [sp, #12]
 8006508:	f7f9 ffbc 	bl	8000484 <__aeabi_dadd>
 800650c:	0032      	movs	r2, r6
 800650e:	003b      	movs	r3, r7
 8006510:	f7f9 ffb8 	bl	8000484 <__aeabi_dadd>
 8006514:	0002      	movs	r2, r0
 8006516:	000b      	movs	r3, r1
 8006518:	f7f9 ffb4 	bl	8000484 <__aeabi_dadd>
 800651c:	e660      	b.n	80061e0 <__ieee754_acos+0x24>
 800651e:	2000      	movs	r0, #0
 8006520:	2100      	movs	r1, #0
 8006522:	e65d      	b.n	80061e0 <__ieee754_acos+0x24>
 8006524:	4803      	ldr	r0, [pc, #12]	; (8006534 <__ieee754_acos+0x378>)
 8006526:	491e      	ldr	r1, [pc, #120]	; (80065a0 <__ieee754_acos+0x3e4>)
 8006528:	e65a      	b.n	80061e0 <__ieee754_acos+0x24>
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	3fefffff 	.word	0x3fefffff
 8006530:	c0100000 	.word	0xc0100000
 8006534:	54442d18 	.word	0x54442d18
 8006538:	400921fb 	.word	0x400921fb
 800653c:	3fdfffff 	.word	0x3fdfffff
 8006540:	3c600000 	.word	0x3c600000
 8006544:	0dfdf709 	.word	0x0dfdf709
 8006548:	3f023de1 	.word	0x3f023de1
 800654c:	7501b288 	.word	0x7501b288
 8006550:	3f49efe0 	.word	0x3f49efe0
 8006554:	b5688f3b 	.word	0xb5688f3b
 8006558:	3fa48228 	.word	0x3fa48228
 800655c:	0e884455 	.word	0x0e884455
 8006560:	3fc9c155 	.word	0x3fc9c155
 8006564:	03eb6f7d 	.word	0x03eb6f7d
 8006568:	3fd4d612 	.word	0x3fd4d612
 800656c:	55555555 	.word	0x55555555
 8006570:	3fc55555 	.word	0x3fc55555
 8006574:	b12e9282 	.word	0xb12e9282
 8006578:	3fb3b8c5 	.word	0x3fb3b8c5
 800657c:	1b8d0159 	.word	0x1b8d0159
 8006580:	3fe6066c 	.word	0x3fe6066c
 8006584:	9c598ac8 	.word	0x9c598ac8
 8006588:	40002ae5 	.word	0x40002ae5
 800658c:	1c8a2d4b 	.word	0x1c8a2d4b
 8006590:	40033a27 	.word	0x40033a27
 8006594:	3ff00000 	.word	0x3ff00000
 8006598:	33145c07 	.word	0x33145c07
 800659c:	3c91a626 	.word	0x3c91a626
 80065a0:	3ff921fb 	.word	0x3ff921fb
 80065a4:	3fe00000 	.word	0x3fe00000

080065a8 <__ieee754_rem_pio2>:
 80065a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065aa:	004b      	lsls	r3, r1, #1
 80065ac:	b091      	sub	sp, #68	; 0x44
 80065ae:	085b      	lsrs	r3, r3, #1
 80065b0:	9302      	str	r3, [sp, #8]
 80065b2:	0017      	movs	r7, r2
 80065b4:	4bb6      	ldr	r3, [pc, #728]	; (8006890 <__ieee754_rem_pio2+0x2e8>)
 80065b6:	9a02      	ldr	r2, [sp, #8]
 80065b8:	0004      	movs	r4, r0
 80065ba:	000d      	movs	r5, r1
 80065bc:	9109      	str	r1, [sp, #36]	; 0x24
 80065be:	429a      	cmp	r2, r3
 80065c0:	dc09      	bgt.n	80065d6 <__ieee754_rem_pio2+0x2e>
 80065c2:	0002      	movs	r2, r0
 80065c4:	000b      	movs	r3, r1
 80065c6:	603a      	str	r2, [r7, #0]
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	2300      	movs	r3, #0
 80065ce:	60ba      	str	r2, [r7, #8]
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	2600      	movs	r6, #0
 80065d4:	e025      	b.n	8006622 <__ieee754_rem_pio2+0x7a>
 80065d6:	4baf      	ldr	r3, [pc, #700]	; (8006894 <__ieee754_rem_pio2+0x2ec>)
 80065d8:	9a02      	ldr	r2, [sp, #8]
 80065da:	429a      	cmp	r2, r3
 80065dc:	dd00      	ble.n	80065e0 <__ieee754_rem_pio2+0x38>
 80065de:	e06e      	b.n	80066be <__ieee754_rem_pio2+0x116>
 80065e0:	4ead      	ldr	r6, [pc, #692]	; (8006898 <__ieee754_rem_pio2+0x2f0>)
 80065e2:	4aae      	ldr	r2, [pc, #696]	; (800689c <__ieee754_rem_pio2+0x2f4>)
 80065e4:	2d00      	cmp	r5, #0
 80065e6:	dd35      	ble.n	8006654 <__ieee754_rem_pio2+0xac>
 80065e8:	0020      	movs	r0, r4
 80065ea:	0029      	movs	r1, r5
 80065ec:	4baa      	ldr	r3, [pc, #680]	; (8006898 <__ieee754_rem_pio2+0x2f0>)
 80065ee:	f7fb f8f3 	bl	80017d8 <__aeabi_dsub>
 80065f2:	9b02      	ldr	r3, [sp, #8]
 80065f4:	0004      	movs	r4, r0
 80065f6:	000d      	movs	r5, r1
 80065f8:	42b3      	cmp	r3, r6
 80065fa:	d015      	beq.n	8006628 <__ieee754_rem_pio2+0x80>
 80065fc:	4aa8      	ldr	r2, [pc, #672]	; (80068a0 <__ieee754_rem_pio2+0x2f8>)
 80065fe:	4ba9      	ldr	r3, [pc, #676]	; (80068a4 <__ieee754_rem_pio2+0x2fc>)
 8006600:	f7fb f8ea 	bl	80017d8 <__aeabi_dsub>
 8006604:	0002      	movs	r2, r0
 8006606:	000b      	movs	r3, r1
 8006608:	0020      	movs	r0, r4
 800660a:	603a      	str	r2, [r7, #0]
 800660c:	607b      	str	r3, [r7, #4]
 800660e:	0029      	movs	r1, r5
 8006610:	f7fb f8e2 	bl	80017d8 <__aeabi_dsub>
 8006614:	4aa2      	ldr	r2, [pc, #648]	; (80068a0 <__ieee754_rem_pio2+0x2f8>)
 8006616:	4ba3      	ldr	r3, [pc, #652]	; (80068a4 <__ieee754_rem_pio2+0x2fc>)
 8006618:	f7fb f8de 	bl	80017d8 <__aeabi_dsub>
 800661c:	2601      	movs	r6, #1
 800661e:	60b8      	str	r0, [r7, #8]
 8006620:	60f9      	str	r1, [r7, #12]
 8006622:	0030      	movs	r0, r6
 8006624:	b011      	add	sp, #68	; 0x44
 8006626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006628:	22d3      	movs	r2, #211	; 0xd3
 800662a:	4b9e      	ldr	r3, [pc, #632]	; (80068a4 <__ieee754_rem_pio2+0x2fc>)
 800662c:	0552      	lsls	r2, r2, #21
 800662e:	f7fb f8d3 	bl	80017d8 <__aeabi_dsub>
 8006632:	4a9d      	ldr	r2, [pc, #628]	; (80068a8 <__ieee754_rem_pio2+0x300>)
 8006634:	4b9d      	ldr	r3, [pc, #628]	; (80068ac <__ieee754_rem_pio2+0x304>)
 8006636:	0004      	movs	r4, r0
 8006638:	000d      	movs	r5, r1
 800663a:	f7fb f8cd 	bl	80017d8 <__aeabi_dsub>
 800663e:	0002      	movs	r2, r0
 8006640:	000b      	movs	r3, r1
 8006642:	0020      	movs	r0, r4
 8006644:	603a      	str	r2, [r7, #0]
 8006646:	607b      	str	r3, [r7, #4]
 8006648:	0029      	movs	r1, r5
 800664a:	f7fb f8c5 	bl	80017d8 <__aeabi_dsub>
 800664e:	4a96      	ldr	r2, [pc, #600]	; (80068a8 <__ieee754_rem_pio2+0x300>)
 8006650:	4b96      	ldr	r3, [pc, #600]	; (80068ac <__ieee754_rem_pio2+0x304>)
 8006652:	e7e1      	b.n	8006618 <__ieee754_rem_pio2+0x70>
 8006654:	0020      	movs	r0, r4
 8006656:	0029      	movs	r1, r5
 8006658:	4b8f      	ldr	r3, [pc, #572]	; (8006898 <__ieee754_rem_pio2+0x2f0>)
 800665a:	f7f9 ff13 	bl	8000484 <__aeabi_dadd>
 800665e:	9b02      	ldr	r3, [sp, #8]
 8006660:	0004      	movs	r4, r0
 8006662:	000d      	movs	r5, r1
 8006664:	42b3      	cmp	r3, r6
 8006666:	d014      	beq.n	8006692 <__ieee754_rem_pio2+0xea>
 8006668:	4a8d      	ldr	r2, [pc, #564]	; (80068a0 <__ieee754_rem_pio2+0x2f8>)
 800666a:	4b8e      	ldr	r3, [pc, #568]	; (80068a4 <__ieee754_rem_pio2+0x2fc>)
 800666c:	f7f9 ff0a 	bl	8000484 <__aeabi_dadd>
 8006670:	0002      	movs	r2, r0
 8006672:	000b      	movs	r3, r1
 8006674:	0020      	movs	r0, r4
 8006676:	603a      	str	r2, [r7, #0]
 8006678:	607b      	str	r3, [r7, #4]
 800667a:	0029      	movs	r1, r5
 800667c:	f7fb f8ac 	bl	80017d8 <__aeabi_dsub>
 8006680:	4a87      	ldr	r2, [pc, #540]	; (80068a0 <__ieee754_rem_pio2+0x2f8>)
 8006682:	4b88      	ldr	r3, [pc, #544]	; (80068a4 <__ieee754_rem_pio2+0x2fc>)
 8006684:	f7f9 fefe 	bl	8000484 <__aeabi_dadd>
 8006688:	2601      	movs	r6, #1
 800668a:	60b8      	str	r0, [r7, #8]
 800668c:	60f9      	str	r1, [r7, #12]
 800668e:	4276      	negs	r6, r6
 8006690:	e7c7      	b.n	8006622 <__ieee754_rem_pio2+0x7a>
 8006692:	22d3      	movs	r2, #211	; 0xd3
 8006694:	4b83      	ldr	r3, [pc, #524]	; (80068a4 <__ieee754_rem_pio2+0x2fc>)
 8006696:	0552      	lsls	r2, r2, #21
 8006698:	f7f9 fef4 	bl	8000484 <__aeabi_dadd>
 800669c:	4a82      	ldr	r2, [pc, #520]	; (80068a8 <__ieee754_rem_pio2+0x300>)
 800669e:	4b83      	ldr	r3, [pc, #524]	; (80068ac <__ieee754_rem_pio2+0x304>)
 80066a0:	0004      	movs	r4, r0
 80066a2:	000d      	movs	r5, r1
 80066a4:	f7f9 feee 	bl	8000484 <__aeabi_dadd>
 80066a8:	0002      	movs	r2, r0
 80066aa:	000b      	movs	r3, r1
 80066ac:	0020      	movs	r0, r4
 80066ae:	603a      	str	r2, [r7, #0]
 80066b0:	607b      	str	r3, [r7, #4]
 80066b2:	0029      	movs	r1, r5
 80066b4:	f7fb f890 	bl	80017d8 <__aeabi_dsub>
 80066b8:	4a7b      	ldr	r2, [pc, #492]	; (80068a8 <__ieee754_rem_pio2+0x300>)
 80066ba:	4b7c      	ldr	r3, [pc, #496]	; (80068ac <__ieee754_rem_pio2+0x304>)
 80066bc:	e7e2      	b.n	8006684 <__ieee754_rem_pio2+0xdc>
 80066be:	4b7c      	ldr	r3, [pc, #496]	; (80068b0 <__ieee754_rem_pio2+0x308>)
 80066c0:	9a02      	ldr	r2, [sp, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	dd00      	ble.n	80066c8 <__ieee754_rem_pio2+0x120>
 80066c6:	e0d3      	b.n	8006870 <__ieee754_rem_pio2+0x2c8>
 80066c8:	0020      	movs	r0, r4
 80066ca:	0029      	movs	r1, r5
 80066cc:	f000 fee8 	bl	80074a0 <fabs>
 80066d0:	4a78      	ldr	r2, [pc, #480]	; (80068b4 <__ieee754_rem_pio2+0x30c>)
 80066d2:	4b79      	ldr	r3, [pc, #484]	; (80068b8 <__ieee754_rem_pio2+0x310>)
 80066d4:	0004      	movs	r4, r0
 80066d6:	000d      	movs	r5, r1
 80066d8:	f7fa fe12 	bl	8001300 <__aeabi_dmul>
 80066dc:	2200      	movs	r2, #0
 80066de:	4b77      	ldr	r3, [pc, #476]	; (80068bc <__ieee754_rem_pio2+0x314>)
 80066e0:	f7f9 fed0 	bl	8000484 <__aeabi_dadd>
 80066e4:	f7fb fc28 	bl	8001f38 <__aeabi_d2iz>
 80066e8:	0006      	movs	r6, r0
 80066ea:	f7fb fc5b 	bl	8001fa4 <__aeabi_i2d>
 80066ee:	4a6b      	ldr	r2, [pc, #428]	; (800689c <__ieee754_rem_pio2+0x2f4>)
 80066f0:	4b69      	ldr	r3, [pc, #420]	; (8006898 <__ieee754_rem_pio2+0x2f0>)
 80066f2:	9006      	str	r0, [sp, #24]
 80066f4:	9107      	str	r1, [sp, #28]
 80066f6:	f7fa fe03 	bl	8001300 <__aeabi_dmul>
 80066fa:	0002      	movs	r2, r0
 80066fc:	000b      	movs	r3, r1
 80066fe:	0020      	movs	r0, r4
 8006700:	0029      	movs	r1, r5
 8006702:	f7fb f869 	bl	80017d8 <__aeabi_dsub>
 8006706:	4a66      	ldr	r2, [pc, #408]	; (80068a0 <__ieee754_rem_pio2+0x2f8>)
 8006708:	9004      	str	r0, [sp, #16]
 800670a:	9105      	str	r1, [sp, #20]
 800670c:	9806      	ldr	r0, [sp, #24]
 800670e:	9907      	ldr	r1, [sp, #28]
 8006710:	4b64      	ldr	r3, [pc, #400]	; (80068a4 <__ieee754_rem_pio2+0x2fc>)
 8006712:	f7fa fdf5 	bl	8001300 <__aeabi_dmul>
 8006716:	0004      	movs	r4, r0
 8006718:	000d      	movs	r5, r1
 800671a:	2e1f      	cmp	r6, #31
 800671c:	dc0f      	bgt.n	800673e <__ieee754_rem_pio2+0x196>
 800671e:	4a68      	ldr	r2, [pc, #416]	; (80068c0 <__ieee754_rem_pio2+0x318>)
 8006720:	1e73      	subs	r3, r6, #1
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	589b      	ldr	r3, [r3, r2]
 8006726:	9a02      	ldr	r2, [sp, #8]
 8006728:	4293      	cmp	r3, r2
 800672a:	d008      	beq.n	800673e <__ieee754_rem_pio2+0x196>
 800672c:	9804      	ldr	r0, [sp, #16]
 800672e:	9905      	ldr	r1, [sp, #20]
 8006730:	0022      	movs	r2, r4
 8006732:	002b      	movs	r3, r5
 8006734:	f7fb f850 	bl	80017d8 <__aeabi_dsub>
 8006738:	6038      	str	r0, [r7, #0]
 800673a:	6079      	str	r1, [r7, #4]
 800673c:	e012      	b.n	8006764 <__ieee754_rem_pio2+0x1bc>
 800673e:	0022      	movs	r2, r4
 8006740:	9804      	ldr	r0, [sp, #16]
 8006742:	9905      	ldr	r1, [sp, #20]
 8006744:	002b      	movs	r3, r5
 8006746:	f7fb f847 	bl	80017d8 <__aeabi_dsub>
 800674a:	9b02      	ldr	r3, [sp, #8]
 800674c:	151b      	asrs	r3, r3, #20
 800674e:	9308      	str	r3, [sp, #32]
 8006750:	9a08      	ldr	r2, [sp, #32]
 8006752:	004b      	lsls	r3, r1, #1
 8006754:	0d5b      	lsrs	r3, r3, #21
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b10      	cmp	r3, #16
 800675a:	dc21      	bgt.n	80067a0 <__ieee754_rem_pio2+0x1f8>
 800675c:	0002      	movs	r2, r0
 800675e:	000b      	movs	r3, r1
 8006760:	603a      	str	r2, [r7, #0]
 8006762:	607b      	str	r3, [r7, #4]
 8006764:	9804      	ldr	r0, [sp, #16]
 8006766:	9905      	ldr	r1, [sp, #20]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	9302      	str	r3, [sp, #8]
 800676e:	9b02      	ldr	r3, [sp, #8]
 8006770:	f7fb f832 	bl	80017d8 <__aeabi_dsub>
 8006774:	0022      	movs	r2, r4
 8006776:	002b      	movs	r3, r5
 8006778:	f7fb f82e 	bl	80017d8 <__aeabi_dsub>
 800677c:	000b      	movs	r3, r1
 800677e:	0002      	movs	r2, r0
 8006780:	60ba      	str	r2, [r7, #8]
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	db00      	blt.n	800678c <__ieee754_rem_pio2+0x1e4>
 800678a:	e74a      	b.n	8006622 <__ieee754_rem_pio2+0x7a>
 800678c:	2380      	movs	r3, #128	; 0x80
 800678e:	061b      	lsls	r3, r3, #24
 8006790:	469c      	mov	ip, r3
 8006792:	9c02      	ldr	r4, [sp, #8]
 8006794:	18c9      	adds	r1, r1, r3
 8006796:	4464      	add	r4, ip
 8006798:	607c      	str	r4, [r7, #4]
 800679a:	60b8      	str	r0, [r7, #8]
 800679c:	60f9      	str	r1, [r7, #12]
 800679e:	e776      	b.n	800668e <__ieee754_rem_pio2+0xe6>
 80067a0:	22d3      	movs	r2, #211	; 0xd3
 80067a2:	9806      	ldr	r0, [sp, #24]
 80067a4:	9907      	ldr	r1, [sp, #28]
 80067a6:	4b3f      	ldr	r3, [pc, #252]	; (80068a4 <__ieee754_rem_pio2+0x2fc>)
 80067a8:	0552      	lsls	r2, r2, #21
 80067aa:	f7fa fda9 	bl	8001300 <__aeabi_dmul>
 80067ae:	0004      	movs	r4, r0
 80067b0:	000d      	movs	r5, r1
 80067b2:	0002      	movs	r2, r0
 80067b4:	000b      	movs	r3, r1
 80067b6:	9804      	ldr	r0, [sp, #16]
 80067b8:	9905      	ldr	r1, [sp, #20]
 80067ba:	f7fb f80d 	bl	80017d8 <__aeabi_dsub>
 80067be:	0002      	movs	r2, r0
 80067c0:	000b      	movs	r3, r1
 80067c2:	9002      	str	r0, [sp, #8]
 80067c4:	9103      	str	r1, [sp, #12]
 80067c6:	9804      	ldr	r0, [sp, #16]
 80067c8:	9905      	ldr	r1, [sp, #20]
 80067ca:	f7fb f805 	bl	80017d8 <__aeabi_dsub>
 80067ce:	0022      	movs	r2, r4
 80067d0:	002b      	movs	r3, r5
 80067d2:	f7fb f801 	bl	80017d8 <__aeabi_dsub>
 80067d6:	0004      	movs	r4, r0
 80067d8:	000d      	movs	r5, r1
 80067da:	9806      	ldr	r0, [sp, #24]
 80067dc:	9907      	ldr	r1, [sp, #28]
 80067de:	4a32      	ldr	r2, [pc, #200]	; (80068a8 <__ieee754_rem_pio2+0x300>)
 80067e0:	4b32      	ldr	r3, [pc, #200]	; (80068ac <__ieee754_rem_pio2+0x304>)
 80067e2:	f7fa fd8d 	bl	8001300 <__aeabi_dmul>
 80067e6:	0022      	movs	r2, r4
 80067e8:	002b      	movs	r3, r5
 80067ea:	f7fa fff5 	bl	80017d8 <__aeabi_dsub>
 80067ee:	0002      	movs	r2, r0
 80067f0:	000b      	movs	r3, r1
 80067f2:	0004      	movs	r4, r0
 80067f4:	000d      	movs	r5, r1
 80067f6:	9802      	ldr	r0, [sp, #8]
 80067f8:	9903      	ldr	r1, [sp, #12]
 80067fa:	f7fa ffed 	bl	80017d8 <__aeabi_dsub>
 80067fe:	9a08      	ldr	r2, [sp, #32]
 8006800:	004b      	lsls	r3, r1, #1
 8006802:	0d5b      	lsrs	r3, r3, #21
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b31      	cmp	r3, #49	; 0x31
 8006808:	dc08      	bgt.n	800681c <__ieee754_rem_pio2+0x274>
 800680a:	0002      	movs	r2, r0
 800680c:	000b      	movs	r3, r1
 800680e:	603a      	str	r2, [r7, #0]
 8006810:	607b      	str	r3, [r7, #4]
 8006812:	9a02      	ldr	r2, [sp, #8]
 8006814:	9b03      	ldr	r3, [sp, #12]
 8006816:	9204      	str	r2, [sp, #16]
 8006818:	9305      	str	r3, [sp, #20]
 800681a:	e7a3      	b.n	8006764 <__ieee754_rem_pio2+0x1bc>
 800681c:	22b8      	movs	r2, #184	; 0xb8
 800681e:	9806      	ldr	r0, [sp, #24]
 8006820:	9907      	ldr	r1, [sp, #28]
 8006822:	4b22      	ldr	r3, [pc, #136]	; (80068ac <__ieee754_rem_pio2+0x304>)
 8006824:	0592      	lsls	r2, r2, #22
 8006826:	f7fa fd6b 	bl	8001300 <__aeabi_dmul>
 800682a:	0004      	movs	r4, r0
 800682c:	000d      	movs	r5, r1
 800682e:	0002      	movs	r2, r0
 8006830:	000b      	movs	r3, r1
 8006832:	9802      	ldr	r0, [sp, #8]
 8006834:	9903      	ldr	r1, [sp, #12]
 8006836:	f7fa ffcf 	bl	80017d8 <__aeabi_dsub>
 800683a:	0002      	movs	r2, r0
 800683c:	000b      	movs	r3, r1
 800683e:	9004      	str	r0, [sp, #16]
 8006840:	9105      	str	r1, [sp, #20]
 8006842:	9802      	ldr	r0, [sp, #8]
 8006844:	9903      	ldr	r1, [sp, #12]
 8006846:	f7fa ffc7 	bl	80017d8 <__aeabi_dsub>
 800684a:	0022      	movs	r2, r4
 800684c:	002b      	movs	r3, r5
 800684e:	f7fa ffc3 	bl	80017d8 <__aeabi_dsub>
 8006852:	0004      	movs	r4, r0
 8006854:	000d      	movs	r5, r1
 8006856:	9806      	ldr	r0, [sp, #24]
 8006858:	9907      	ldr	r1, [sp, #28]
 800685a:	4a1a      	ldr	r2, [pc, #104]	; (80068c4 <__ieee754_rem_pio2+0x31c>)
 800685c:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <__ieee754_rem_pio2+0x320>)
 800685e:	f7fa fd4f 	bl	8001300 <__aeabi_dmul>
 8006862:	0022      	movs	r2, r4
 8006864:	002b      	movs	r3, r5
 8006866:	f7fa ffb7 	bl	80017d8 <__aeabi_dsub>
 800686a:	0004      	movs	r4, r0
 800686c:	000d      	movs	r5, r1
 800686e:	e75d      	b.n	800672c <__ieee754_rem_pio2+0x184>
 8006870:	4b16      	ldr	r3, [pc, #88]	; (80068cc <__ieee754_rem_pio2+0x324>)
 8006872:	9a02      	ldr	r2, [sp, #8]
 8006874:	429a      	cmp	r2, r3
 8006876:	dd2b      	ble.n	80068d0 <__ieee754_rem_pio2+0x328>
 8006878:	0022      	movs	r2, r4
 800687a:	002b      	movs	r3, r5
 800687c:	0020      	movs	r0, r4
 800687e:	0029      	movs	r1, r5
 8006880:	f7fa ffaa 	bl	80017d8 <__aeabi_dsub>
 8006884:	60b8      	str	r0, [r7, #8]
 8006886:	60f9      	str	r1, [r7, #12]
 8006888:	6038      	str	r0, [r7, #0]
 800688a:	6079      	str	r1, [r7, #4]
 800688c:	e6a1      	b.n	80065d2 <__ieee754_rem_pio2+0x2a>
 800688e:	46c0      	nop			; (mov r8, r8)
 8006890:	3fe921fb 	.word	0x3fe921fb
 8006894:	4002d97b 	.word	0x4002d97b
 8006898:	3ff921fb 	.word	0x3ff921fb
 800689c:	54400000 	.word	0x54400000
 80068a0:	1a626331 	.word	0x1a626331
 80068a4:	3dd0b461 	.word	0x3dd0b461
 80068a8:	2e037073 	.word	0x2e037073
 80068ac:	3ba3198a 	.word	0x3ba3198a
 80068b0:	413921fb 	.word	0x413921fb
 80068b4:	6dc9c883 	.word	0x6dc9c883
 80068b8:	3fe45f30 	.word	0x3fe45f30
 80068bc:	3fe00000 	.word	0x3fe00000
 80068c0:	080077bc 	.word	0x080077bc
 80068c4:	252049c1 	.word	0x252049c1
 80068c8:	397b839a 	.word	0x397b839a
 80068cc:	7fefffff 	.word	0x7fefffff
 80068d0:	9a02      	ldr	r2, [sp, #8]
 80068d2:	0020      	movs	r0, r4
 80068d4:	1516      	asrs	r6, r2, #20
 80068d6:	4a29      	ldr	r2, [pc, #164]	; (800697c <__ieee754_rem_pio2+0x3d4>)
 80068d8:	18b6      	adds	r6, r6, r2
 80068da:	9a02      	ldr	r2, [sp, #8]
 80068dc:	0533      	lsls	r3, r6, #20
 80068de:	1ad5      	subs	r5, r2, r3
 80068e0:	0029      	movs	r1, r5
 80068e2:	f7fb fb29 	bl	8001f38 <__aeabi_d2iz>
 80068e6:	f7fb fb5d 	bl	8001fa4 <__aeabi_i2d>
 80068ea:	0002      	movs	r2, r0
 80068ec:	000b      	movs	r3, r1
 80068ee:	0020      	movs	r0, r4
 80068f0:	0029      	movs	r1, r5
 80068f2:	920a      	str	r2, [sp, #40]	; 0x28
 80068f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80068f6:	f7fa ff6f 	bl	80017d8 <__aeabi_dsub>
 80068fa:	2200      	movs	r2, #0
 80068fc:	4b20      	ldr	r3, [pc, #128]	; (8006980 <__ieee754_rem_pio2+0x3d8>)
 80068fe:	f7fa fcff 	bl	8001300 <__aeabi_dmul>
 8006902:	000d      	movs	r5, r1
 8006904:	0004      	movs	r4, r0
 8006906:	f7fb fb17 	bl	8001f38 <__aeabi_d2iz>
 800690a:	f7fb fb4b 	bl	8001fa4 <__aeabi_i2d>
 800690e:	0002      	movs	r2, r0
 8006910:	000b      	movs	r3, r1
 8006912:	0020      	movs	r0, r4
 8006914:	0029      	movs	r1, r5
 8006916:	920c      	str	r2, [sp, #48]	; 0x30
 8006918:	930d      	str	r3, [sp, #52]	; 0x34
 800691a:	f7fa ff5d 	bl	80017d8 <__aeabi_dsub>
 800691e:	2200      	movs	r2, #0
 8006920:	4b17      	ldr	r3, [pc, #92]	; (8006980 <__ieee754_rem_pio2+0x3d8>)
 8006922:	f7fa fced 	bl	8001300 <__aeabi_dmul>
 8006926:	2503      	movs	r5, #3
 8006928:	900e      	str	r0, [sp, #56]	; 0x38
 800692a:	910f      	str	r1, [sp, #60]	; 0x3c
 800692c:	ac0a      	add	r4, sp, #40	; 0x28
 800692e:	2200      	movs	r2, #0
 8006930:	6920      	ldr	r0, [r4, #16]
 8006932:	6961      	ldr	r1, [r4, #20]
 8006934:	2300      	movs	r3, #0
 8006936:	9502      	str	r5, [sp, #8]
 8006938:	3c08      	subs	r4, #8
 800693a:	3d01      	subs	r5, #1
 800693c:	f7f9 fd74 	bl	8000428 <__aeabi_dcmpeq>
 8006940:	2800      	cmp	r0, #0
 8006942:	d1f4      	bne.n	800692e <__ieee754_rem_pio2+0x386>
 8006944:	4b0f      	ldr	r3, [pc, #60]	; (8006984 <__ieee754_rem_pio2+0x3dc>)
 8006946:	0032      	movs	r2, r6
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	2302      	movs	r3, #2
 800694c:	0039      	movs	r1, r7
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	a80a      	add	r0, sp, #40	; 0x28
 8006952:	9b02      	ldr	r3, [sp, #8]
 8006954:	f000 f98e 	bl	8006c74 <__kernel_rem_pio2>
 8006958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695a:	0006      	movs	r6, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	db00      	blt.n	8006962 <__ieee754_rem_pio2+0x3ba>
 8006960:	e65f      	b.n	8006622 <__ieee754_rem_pio2+0x7a>
 8006962:	2180      	movs	r1, #128	; 0x80
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	0609      	lsls	r1, r1, #24
 800696a:	1843      	adds	r3, r0, r1
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	603a      	str	r2, [r7, #0]
 8006970:	607b      	str	r3, [r7, #4]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	1843      	adds	r3, r0, r1
 8006976:	60ba      	str	r2, [r7, #8]
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	e688      	b.n	800668e <__ieee754_rem_pio2+0xe6>
 800697c:	fffffbea 	.word	0xfffffbea
 8006980:	41700000 	.word	0x41700000
 8006984:	0800783c 	.word	0x0800783c

08006988 <__ieee754_sqrt>:
 8006988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800698a:	000b      	movs	r3, r1
 800698c:	000c      	movs	r4, r1
 800698e:	4956      	ldr	r1, [pc, #344]	; (8006ae8 <__ieee754_sqrt+0x160>)
 8006990:	0005      	movs	r5, r0
 8006992:	0002      	movs	r2, r0
 8006994:	0008      	movs	r0, r1
 8006996:	b085      	sub	sp, #20
 8006998:	4020      	ands	r0, r4
 800699a:	4288      	cmp	r0, r1
 800699c:	d10f      	bne.n	80069be <__ieee754_sqrt+0x36>
 800699e:	0028      	movs	r0, r5
 80069a0:	0021      	movs	r1, r4
 80069a2:	f7fa fcad 	bl	8001300 <__aeabi_dmul>
 80069a6:	0002      	movs	r2, r0
 80069a8:	000b      	movs	r3, r1
 80069aa:	0028      	movs	r0, r5
 80069ac:	0021      	movs	r1, r4
 80069ae:	f7f9 fd69 	bl	8000484 <__aeabi_dadd>
 80069b2:	0005      	movs	r5, r0
 80069b4:	000c      	movs	r4, r1
 80069b6:	0028      	movs	r0, r5
 80069b8:	0021      	movs	r1, r4
 80069ba:	b005      	add	sp, #20
 80069bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069be:	2c00      	cmp	r4, #0
 80069c0:	dc10      	bgt.n	80069e4 <__ieee754_sqrt+0x5c>
 80069c2:	0061      	lsls	r1, r4, #1
 80069c4:	0849      	lsrs	r1, r1, #1
 80069c6:	4329      	orrs	r1, r5
 80069c8:	d0f5      	beq.n	80069b6 <__ieee754_sqrt+0x2e>
 80069ca:	2100      	movs	r1, #0
 80069cc:	428c      	cmp	r4, r1
 80069ce:	d100      	bne.n	80069d2 <__ieee754_sqrt+0x4a>
 80069d0:	e080      	b.n	8006ad4 <__ieee754_sqrt+0x14c>
 80069d2:	0028      	movs	r0, r5
 80069d4:	0021      	movs	r1, r4
 80069d6:	f7fa feff 	bl	80017d8 <__aeabi_dsub>
 80069da:	0002      	movs	r2, r0
 80069dc:	000b      	movs	r3, r1
 80069de:	f7fa f88d 	bl	8000afc <__aeabi_ddiv>
 80069e2:	e7e6      	b.n	80069b2 <__ieee754_sqrt+0x2a>
 80069e4:	1521      	asrs	r1, r4, #20
 80069e6:	d075      	beq.n	8006ad4 <__ieee754_sqrt+0x14c>
 80069e8:	4840      	ldr	r0, [pc, #256]	; (8006aec <__ieee754_sqrt+0x164>)
 80069ea:	031b      	lsls	r3, r3, #12
 80069ec:	180c      	adds	r4, r1, r0
 80069ee:	2080      	movs	r0, #128	; 0x80
 80069f0:	0b1b      	lsrs	r3, r3, #12
 80069f2:	0340      	lsls	r0, r0, #13
 80069f4:	4303      	orrs	r3, r0
 80069f6:	07c9      	lsls	r1, r1, #31
 80069f8:	d403      	bmi.n	8006a02 <__ieee754_sqrt+0x7a>
 80069fa:	0fd1      	lsrs	r1, r2, #31
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	185b      	adds	r3, r3, r1
 8006a00:	0052      	lsls	r2, r2, #1
 8006a02:	1061      	asrs	r1, r4, #1
 8006a04:	2400      	movs	r4, #0
 8006a06:	9103      	str	r1, [sp, #12]
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	0fd1      	lsrs	r1, r2, #31
 8006a0c:	185b      	adds	r3, r3, r1
 8006a0e:	2180      	movs	r1, #128	; 0x80
 8006a10:	2516      	movs	r5, #22
 8006a12:	0020      	movs	r0, r4
 8006a14:	0052      	lsls	r2, r2, #1
 8006a16:	0389      	lsls	r1, r1, #14
 8006a18:	1846      	adds	r6, r0, r1
 8006a1a:	429e      	cmp	r6, r3
 8006a1c:	dc02      	bgt.n	8006a24 <__ieee754_sqrt+0x9c>
 8006a1e:	1870      	adds	r0, r6, r1
 8006a20:	1b9b      	subs	r3, r3, r6
 8006a22:	1864      	adds	r4, r4, r1
 8006a24:	0fd6      	lsrs	r6, r2, #31
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	3d01      	subs	r5, #1
 8006a2a:	18f3      	adds	r3, r6, r3
 8006a2c:	0052      	lsls	r2, r2, #1
 8006a2e:	0849      	lsrs	r1, r1, #1
 8006a30:	2d00      	cmp	r5, #0
 8006a32:	d1f1      	bne.n	8006a18 <__ieee754_sqrt+0x90>
 8006a34:	2620      	movs	r6, #32
 8006a36:	2780      	movs	r7, #128	; 0x80
 8006a38:	0029      	movs	r1, r5
 8006a3a:	9601      	str	r6, [sp, #4]
 8006a3c:	063f      	lsls	r7, r7, #24
 8006a3e:	197e      	adds	r6, r7, r5
 8006a40:	46b4      	mov	ip, r6
 8006a42:	4283      	cmp	r3, r0
 8006a44:	dc02      	bgt.n	8006a4c <__ieee754_sqrt+0xc4>
 8006a46:	d114      	bne.n	8006a72 <__ieee754_sqrt+0xea>
 8006a48:	4296      	cmp	r6, r2
 8006a4a:	d812      	bhi.n	8006a72 <__ieee754_sqrt+0xea>
 8006a4c:	4665      	mov	r5, ip
 8006a4e:	4666      	mov	r6, ip
 8006a50:	19ed      	adds	r5, r5, r7
 8006a52:	9002      	str	r0, [sp, #8]
 8006a54:	2e00      	cmp	r6, #0
 8006a56:	da03      	bge.n	8006a60 <__ieee754_sqrt+0xd8>
 8006a58:	43ee      	mvns	r6, r5
 8006a5a:	0ff6      	lsrs	r6, r6, #31
 8006a5c:	1986      	adds	r6, r0, r6
 8006a5e:	9602      	str	r6, [sp, #8]
 8006a60:	1a1b      	subs	r3, r3, r0
 8006a62:	4562      	cmp	r2, ip
 8006a64:	4180      	sbcs	r0, r0
 8006a66:	4240      	negs	r0, r0
 8006a68:	1a1b      	subs	r3, r3, r0
 8006a6a:	4660      	mov	r0, ip
 8006a6c:	1a12      	subs	r2, r2, r0
 8006a6e:	9802      	ldr	r0, [sp, #8]
 8006a70:	19c9      	adds	r1, r1, r7
 8006a72:	0fd6      	lsrs	r6, r2, #31
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	199b      	adds	r3, r3, r6
 8006a78:	9e01      	ldr	r6, [sp, #4]
 8006a7a:	0052      	lsls	r2, r2, #1
 8006a7c:	3e01      	subs	r6, #1
 8006a7e:	087f      	lsrs	r7, r7, #1
 8006a80:	9601      	str	r6, [sp, #4]
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	d1db      	bne.n	8006a3e <__ieee754_sqrt+0xb6>
 8006a86:	4313      	orrs	r3, r2
 8006a88:	d003      	beq.n	8006a92 <__ieee754_sqrt+0x10a>
 8006a8a:	1c4b      	adds	r3, r1, #1
 8006a8c:	d127      	bne.n	8006ade <__ieee754_sqrt+0x156>
 8006a8e:	0031      	movs	r1, r6
 8006a90:	3401      	adds	r4, #1
 8006a92:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <__ieee754_sqrt+0x168>)
 8006a94:	1060      	asrs	r0, r4, #1
 8006a96:	18c0      	adds	r0, r0, r3
 8006a98:	0849      	lsrs	r1, r1, #1
 8006a9a:	07e3      	lsls	r3, r4, #31
 8006a9c:	d502      	bpl.n	8006aa4 <__ieee754_sqrt+0x11c>
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	061b      	lsls	r3, r3, #24
 8006aa2:	4319      	orrs	r1, r3
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	000d      	movs	r5, r1
 8006aa8:	051c      	lsls	r4, r3, #20
 8006aaa:	1823      	adds	r3, r4, r0
 8006aac:	001c      	movs	r4, r3
 8006aae:	e782      	b.n	80069b6 <__ieee754_sqrt+0x2e>
 8006ab0:	0ad3      	lsrs	r3, r2, #11
 8006ab2:	3815      	subs	r0, #21
 8006ab4:	0552      	lsls	r2, r2, #21
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0fa      	beq.n	8006ab0 <__ieee754_sqrt+0x128>
 8006aba:	2480      	movs	r4, #128	; 0x80
 8006abc:	0364      	lsls	r4, r4, #13
 8006abe:	4223      	tst	r3, r4
 8006ac0:	d00a      	beq.n	8006ad8 <__ieee754_sqrt+0x150>
 8006ac2:	2420      	movs	r4, #32
 8006ac4:	0016      	movs	r6, r2
 8006ac6:	1a64      	subs	r4, r4, r1
 8006ac8:	40e6      	lsrs	r6, r4
 8006aca:	1e4d      	subs	r5, r1, #1
 8006acc:	408a      	lsls	r2, r1
 8006ace:	4333      	orrs	r3, r6
 8006ad0:	1b41      	subs	r1, r0, r5
 8006ad2:	e789      	b.n	80069e8 <__ieee754_sqrt+0x60>
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	e7ee      	b.n	8006ab6 <__ieee754_sqrt+0x12e>
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	3101      	adds	r1, #1
 8006adc:	e7ef      	b.n	8006abe <__ieee754_sqrt+0x136>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	3101      	adds	r1, #1
 8006ae2:	4399      	bics	r1, r3
 8006ae4:	e7d5      	b.n	8006a92 <__ieee754_sqrt+0x10a>
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	7ff00000 	.word	0x7ff00000
 8006aec:	fffffc01 	.word	0xfffffc01
 8006af0:	3fe00000 	.word	0x3fe00000

08006af4 <__kernel_cos>:
 8006af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006af6:	b087      	sub	sp, #28
 8006af8:	9204      	str	r2, [sp, #16]
 8006afa:	9305      	str	r3, [sp, #20]
 8006afc:	004b      	lsls	r3, r1, #1
 8006afe:	085b      	lsrs	r3, r3, #1
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	23f9      	movs	r3, #249	; 0xf9
 8006b04:	9a00      	ldr	r2, [sp, #0]
 8006b06:	0007      	movs	r7, r0
 8006b08:	000e      	movs	r6, r1
 8006b0a:	059b      	lsls	r3, r3, #22
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	da04      	bge.n	8006b1a <__kernel_cos+0x26>
 8006b10:	f7fb fa12 	bl	8001f38 <__aeabi_d2iz>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	d100      	bne.n	8006b1a <__kernel_cos+0x26>
 8006b18:	e084      	b.n	8006c24 <__kernel_cos+0x130>
 8006b1a:	003a      	movs	r2, r7
 8006b1c:	0033      	movs	r3, r6
 8006b1e:	0038      	movs	r0, r7
 8006b20:	0031      	movs	r1, r6
 8006b22:	f7fa fbed 	bl	8001300 <__aeabi_dmul>
 8006b26:	2200      	movs	r2, #0
 8006b28:	4b40      	ldr	r3, [pc, #256]	; (8006c2c <__kernel_cos+0x138>)
 8006b2a:	0004      	movs	r4, r0
 8006b2c:	000d      	movs	r5, r1
 8006b2e:	f7fa fbe7 	bl	8001300 <__aeabi_dmul>
 8006b32:	4a3f      	ldr	r2, [pc, #252]	; (8006c30 <__kernel_cos+0x13c>)
 8006b34:	9002      	str	r0, [sp, #8]
 8006b36:	9103      	str	r1, [sp, #12]
 8006b38:	4b3e      	ldr	r3, [pc, #248]	; (8006c34 <__kernel_cos+0x140>)
 8006b3a:	0020      	movs	r0, r4
 8006b3c:	0029      	movs	r1, r5
 8006b3e:	f7fa fbdf 	bl	8001300 <__aeabi_dmul>
 8006b42:	4a3d      	ldr	r2, [pc, #244]	; (8006c38 <__kernel_cos+0x144>)
 8006b44:	4b3d      	ldr	r3, [pc, #244]	; (8006c3c <__kernel_cos+0x148>)
 8006b46:	f7f9 fc9d 	bl	8000484 <__aeabi_dadd>
 8006b4a:	0022      	movs	r2, r4
 8006b4c:	002b      	movs	r3, r5
 8006b4e:	f7fa fbd7 	bl	8001300 <__aeabi_dmul>
 8006b52:	4a3b      	ldr	r2, [pc, #236]	; (8006c40 <__kernel_cos+0x14c>)
 8006b54:	4b3b      	ldr	r3, [pc, #236]	; (8006c44 <__kernel_cos+0x150>)
 8006b56:	f7fa fe3f 	bl	80017d8 <__aeabi_dsub>
 8006b5a:	0022      	movs	r2, r4
 8006b5c:	002b      	movs	r3, r5
 8006b5e:	f7fa fbcf 	bl	8001300 <__aeabi_dmul>
 8006b62:	4a39      	ldr	r2, [pc, #228]	; (8006c48 <__kernel_cos+0x154>)
 8006b64:	4b39      	ldr	r3, [pc, #228]	; (8006c4c <__kernel_cos+0x158>)
 8006b66:	f7f9 fc8d 	bl	8000484 <__aeabi_dadd>
 8006b6a:	0022      	movs	r2, r4
 8006b6c:	002b      	movs	r3, r5
 8006b6e:	f7fa fbc7 	bl	8001300 <__aeabi_dmul>
 8006b72:	4a37      	ldr	r2, [pc, #220]	; (8006c50 <__kernel_cos+0x15c>)
 8006b74:	4b37      	ldr	r3, [pc, #220]	; (8006c54 <__kernel_cos+0x160>)
 8006b76:	f7fa fe2f 	bl	80017d8 <__aeabi_dsub>
 8006b7a:	0022      	movs	r2, r4
 8006b7c:	002b      	movs	r3, r5
 8006b7e:	f7fa fbbf 	bl	8001300 <__aeabi_dmul>
 8006b82:	4a35      	ldr	r2, [pc, #212]	; (8006c58 <__kernel_cos+0x164>)
 8006b84:	4b35      	ldr	r3, [pc, #212]	; (8006c5c <__kernel_cos+0x168>)
 8006b86:	f7f9 fc7d 	bl	8000484 <__aeabi_dadd>
 8006b8a:	0022      	movs	r2, r4
 8006b8c:	002b      	movs	r3, r5
 8006b8e:	f7fa fbb7 	bl	8001300 <__aeabi_dmul>
 8006b92:	0022      	movs	r2, r4
 8006b94:	002b      	movs	r3, r5
 8006b96:	f7fa fbb3 	bl	8001300 <__aeabi_dmul>
 8006b9a:	9a04      	ldr	r2, [sp, #16]
 8006b9c:	9b05      	ldr	r3, [sp, #20]
 8006b9e:	0004      	movs	r4, r0
 8006ba0:	000d      	movs	r5, r1
 8006ba2:	0038      	movs	r0, r7
 8006ba4:	0031      	movs	r1, r6
 8006ba6:	f7fa fbab 	bl	8001300 <__aeabi_dmul>
 8006baa:	0002      	movs	r2, r0
 8006bac:	000b      	movs	r3, r1
 8006bae:	0020      	movs	r0, r4
 8006bb0:	0029      	movs	r1, r5
 8006bb2:	f7fa fe11 	bl	80017d8 <__aeabi_dsub>
 8006bb6:	4b2a      	ldr	r3, [pc, #168]	; (8006c60 <__kernel_cos+0x16c>)
 8006bb8:	9a00      	ldr	r2, [sp, #0]
 8006bba:	0004      	movs	r4, r0
 8006bbc:	000d      	movs	r5, r1
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	dc0d      	bgt.n	8006bde <__kernel_cos+0xea>
 8006bc2:	0002      	movs	r2, r0
 8006bc4:	000b      	movs	r3, r1
 8006bc6:	9802      	ldr	r0, [sp, #8]
 8006bc8:	9903      	ldr	r1, [sp, #12]
 8006bca:	f7fa fe05 	bl	80017d8 <__aeabi_dsub>
 8006bce:	0002      	movs	r2, r0
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	000b      	movs	r3, r1
 8006bd4:	4923      	ldr	r1, [pc, #140]	; (8006c64 <__kernel_cos+0x170>)
 8006bd6:	f7fa fdff 	bl	80017d8 <__aeabi_dsub>
 8006bda:	b007      	add	sp, #28
 8006bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bde:	4b22      	ldr	r3, [pc, #136]	; (8006c68 <__kernel_cos+0x174>)
 8006be0:	9a00      	ldr	r2, [sp, #0]
 8006be2:	2600      	movs	r6, #0
 8006be4:	429a      	cmp	r2, r3
 8006be6:	dc1b      	bgt.n	8006c20 <__kernel_cos+0x12c>
 8006be8:	0013      	movs	r3, r2
 8006bea:	4a20      	ldr	r2, [pc, #128]	; (8006c6c <__kernel_cos+0x178>)
 8006bec:	4694      	mov	ip, r2
 8006bee:	4463      	add	r3, ip
 8006bf0:	001f      	movs	r7, r3
 8006bf2:	0032      	movs	r2, r6
 8006bf4:	003b      	movs	r3, r7
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	491a      	ldr	r1, [pc, #104]	; (8006c64 <__kernel_cos+0x170>)
 8006bfa:	f7fa fded 	bl	80017d8 <__aeabi_dsub>
 8006bfe:	0032      	movs	r2, r6
 8006c00:	003b      	movs	r3, r7
 8006c02:	9000      	str	r0, [sp, #0]
 8006c04:	9101      	str	r1, [sp, #4]
 8006c06:	9802      	ldr	r0, [sp, #8]
 8006c08:	9903      	ldr	r1, [sp, #12]
 8006c0a:	f7fa fde5 	bl	80017d8 <__aeabi_dsub>
 8006c0e:	0022      	movs	r2, r4
 8006c10:	002b      	movs	r3, r5
 8006c12:	f7fa fde1 	bl	80017d8 <__aeabi_dsub>
 8006c16:	0002      	movs	r2, r0
 8006c18:	000b      	movs	r3, r1
 8006c1a:	9800      	ldr	r0, [sp, #0]
 8006c1c:	9901      	ldr	r1, [sp, #4]
 8006c1e:	e7da      	b.n	8006bd6 <__kernel_cos+0xe2>
 8006c20:	4f13      	ldr	r7, [pc, #76]	; (8006c70 <__kernel_cos+0x17c>)
 8006c22:	e7e6      	b.n	8006bf2 <__kernel_cos+0xfe>
 8006c24:	2000      	movs	r0, #0
 8006c26:	490f      	ldr	r1, [pc, #60]	; (8006c64 <__kernel_cos+0x170>)
 8006c28:	e7d7      	b.n	8006bda <__kernel_cos+0xe6>
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	3fe00000 	.word	0x3fe00000
 8006c30:	be8838d4 	.word	0xbe8838d4
 8006c34:	bda8fae9 	.word	0xbda8fae9
 8006c38:	bdb4b1c4 	.word	0xbdb4b1c4
 8006c3c:	3e21ee9e 	.word	0x3e21ee9e
 8006c40:	809c52ad 	.word	0x809c52ad
 8006c44:	3e927e4f 	.word	0x3e927e4f
 8006c48:	19cb1590 	.word	0x19cb1590
 8006c4c:	3efa01a0 	.word	0x3efa01a0
 8006c50:	16c15177 	.word	0x16c15177
 8006c54:	3f56c16c 	.word	0x3f56c16c
 8006c58:	5555554c 	.word	0x5555554c
 8006c5c:	3fa55555 	.word	0x3fa55555
 8006c60:	3fd33332 	.word	0x3fd33332
 8006c64:	3ff00000 	.word	0x3ff00000
 8006c68:	3fe90000 	.word	0x3fe90000
 8006c6c:	ffe00000 	.word	0xffe00000
 8006c70:	3fd20000 	.word	0x3fd20000

08006c74 <__kernel_rem_pio2>:
 8006c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c76:	4ccb      	ldr	r4, [pc, #812]	; (8006fa4 <__kernel_rem_pio2+0x330>)
 8006c78:	44a5      	add	sp, r4
 8006c7a:	930d      	str	r3, [sp, #52]	; 0x34
 8006c7c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006c7e:	0014      	movs	r4, r2
 8006c80:	009a      	lsls	r2, r3, #2
 8006c82:	4bc9      	ldr	r3, [pc, #804]	; (8006fa8 <__kernel_rem_pio2+0x334>)
 8006c84:	900e      	str	r0, [sp, #56]	; 0x38
 8006c86:	58d3      	ldr	r3, [r2, r3]
 8006c88:	9107      	str	r1, [sp, #28]
 8006c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	930c      	str	r3, [sp, #48]	; 0x30
 8006c92:	2300      	movs	r3, #0
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	0023      	movs	r3, r4
 8006c98:	3314      	adds	r3, #20
 8006c9a:	db04      	blt.n	8006ca6 <__kernel_rem_pio2+0x32>
 8006c9c:	2118      	movs	r1, #24
 8006c9e:	1ee0      	subs	r0, r4, #3
 8006ca0:	f7f9 fac6 	bl	8000230 <__divsi3>
 8006ca4:	9000      	str	r0, [sp, #0]
 8006ca6:	2218      	movs	r2, #24
 8006ca8:	9b00      	ldr	r3, [sp, #0]
 8006caa:	4252      	negs	r2, r2
 8006cac:	3301      	adds	r3, #1
 8006cae:	435a      	muls	r2, r3
 8006cb0:	1913      	adds	r3, r2, r4
 8006cb2:	9302      	str	r3, [sp, #8]
 8006cb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	ae26      	add	r6, sp, #152	; 0x98
 8006cba:	1a9d      	subs	r5, r3, r2
 8006cbc:	002c      	movs	r4, r5
 8006cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc0:	189f      	adds	r7, r3, r2
 8006cc2:	1b63      	subs	r3, r4, r5
 8006cc4:	429f      	cmp	r7, r3
 8006cc6:	da0f      	bge.n	8006ce8 <__kernel_rem_pio2+0x74>
 8006cc8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006cca:	af76      	add	r7, sp, #472	; 0x1d8
 8006ccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cd0:	1af3      	subs	r3, r6, r3
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	db30      	blt.n	8006d38 <__kernel_rem_pio2+0xc4>
 8006cd6:	ab26      	add	r3, sp, #152	; 0x98
 8006cd8:	00f4      	lsls	r4, r6, #3
 8006cda:	2200      	movs	r2, #0
 8006cdc:	18e4      	adds	r4, r4, r3
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2500      	movs	r5, #0
 8006ce2:	9204      	str	r2, [sp, #16]
 8006ce4:	9305      	str	r3, [sp, #20]
 8006ce6:	e01e      	b.n	8006d26 <__kernel_rem_pio2+0xb2>
 8006ce8:	2c00      	cmp	r4, #0
 8006cea:	db07      	blt.n	8006cfc <__kernel_rem_pio2+0x88>
 8006cec:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8006cee:	00a3      	lsls	r3, r4, #2
 8006cf0:	58d0      	ldr	r0, [r2, r3]
 8006cf2:	f7fb f957 	bl	8001fa4 <__aeabi_i2d>
 8006cf6:	c603      	stmia	r6!, {r0, r1}
 8006cf8:	3401      	adds	r4, #1
 8006cfa:	e7e2      	b.n	8006cc2 <__kernel_rem_pio2+0x4e>
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	e7f9      	b.n	8006cf6 <__kernel_rem_pio2+0x82>
 8006d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d04:	00e9      	lsls	r1, r5, #3
 8006d06:	1859      	adds	r1, r3, r1
 8006d08:	6808      	ldr	r0, [r1, #0]
 8006d0a:	6849      	ldr	r1, [r1, #4]
 8006d0c:	6822      	ldr	r2, [r4, #0]
 8006d0e:	6863      	ldr	r3, [r4, #4]
 8006d10:	f7fa faf6 	bl	8001300 <__aeabi_dmul>
 8006d14:	0002      	movs	r2, r0
 8006d16:	000b      	movs	r3, r1
 8006d18:	9804      	ldr	r0, [sp, #16]
 8006d1a:	9905      	ldr	r1, [sp, #20]
 8006d1c:	f7f9 fbb2 	bl	8000484 <__aeabi_dadd>
 8006d20:	9004      	str	r0, [sp, #16]
 8006d22:	9105      	str	r1, [sp, #20]
 8006d24:	3501      	adds	r5, #1
 8006d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d28:	3c08      	subs	r4, #8
 8006d2a:	429d      	cmp	r5, r3
 8006d2c:	dde9      	ble.n	8006d02 <__kernel_rem_pio2+0x8e>
 8006d2e:	9b04      	ldr	r3, [sp, #16]
 8006d30:	9c05      	ldr	r4, [sp, #20]
 8006d32:	3601      	adds	r6, #1
 8006d34:	c718      	stmia	r7!, {r3, r4}
 8006d36:	e7c9      	b.n	8006ccc <__kernel_rem_pio2+0x58>
 8006d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d3a:	aa12      	add	r2, sp, #72	; 0x48
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	189b      	adds	r3, r3, r2
 8006d40:	9310      	str	r3, [sp, #64]	; 0x40
 8006d42:	9b00      	ldr	r3, [sp, #0]
 8006d44:	0098      	lsls	r0, r3, #2
 8006d46:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006d48:	181b      	adds	r3, r3, r0
 8006d4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	9b04      	ldr	r3, [sp, #16]
 8006d52:	aa76      	add	r2, sp, #472	; 0x1d8
 8006d54:	00db      	lsls	r3, r3, #3
 8006d56:	18d3      	adds	r3, r2, r3
 8006d58:	681c      	ldr	r4, [r3, #0]
 8006d5a:	685d      	ldr	r5, [r3, #4]
 8006d5c:	ab12      	add	r3, sp, #72	; 0x48
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	9309      	str	r3, [sp, #36]	; 0x24
 8006d62:	9b04      	ldr	r3, [sp, #16]
 8006d64:	9211      	str	r2, [sp, #68]	; 0x44
 8006d66:	9308      	str	r3, [sp, #32]
 8006d68:	9b08      	ldr	r3, [sp, #32]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	dc74      	bgt.n	8006e58 <__kernel_rem_pio2+0x1e4>
 8006d6e:	0020      	movs	r0, r4
 8006d70:	0029      	movs	r1, r5
 8006d72:	9a02      	ldr	r2, [sp, #8]
 8006d74:	f000 fc28 	bl	80075c8 <scalbn>
 8006d78:	23ff      	movs	r3, #255	; 0xff
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	059b      	lsls	r3, r3, #22
 8006d7e:	0004      	movs	r4, r0
 8006d80:	000d      	movs	r5, r1
 8006d82:	f7fa fabd 	bl	8001300 <__aeabi_dmul>
 8006d86:	f000 fb8f 	bl	80074a8 <floor>
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4b87      	ldr	r3, [pc, #540]	; (8006fac <__kernel_rem_pio2+0x338>)
 8006d8e:	f7fa fab7 	bl	8001300 <__aeabi_dmul>
 8006d92:	0002      	movs	r2, r0
 8006d94:	000b      	movs	r3, r1
 8006d96:	0020      	movs	r0, r4
 8006d98:	0029      	movs	r1, r5
 8006d9a:	f7fa fd1d 	bl	80017d8 <__aeabi_dsub>
 8006d9e:	000d      	movs	r5, r1
 8006da0:	0004      	movs	r4, r0
 8006da2:	f7fb f8c9 	bl	8001f38 <__aeabi_d2iz>
 8006da6:	9009      	str	r0, [sp, #36]	; 0x24
 8006da8:	f7fb f8fc 	bl	8001fa4 <__aeabi_i2d>
 8006dac:	000b      	movs	r3, r1
 8006dae:	0002      	movs	r2, r0
 8006db0:	0029      	movs	r1, r5
 8006db2:	0020      	movs	r0, r4
 8006db4:	f7fa fd10 	bl	80017d8 <__aeabi_dsub>
 8006db8:	9b02      	ldr	r3, [sp, #8]
 8006dba:	0006      	movs	r6, r0
 8006dbc:	000f      	movs	r7, r1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	dd74      	ble.n	8006eac <__kernel_rem_pio2+0x238>
 8006dc2:	2118      	movs	r1, #24
 8006dc4:	9b04      	ldr	r3, [sp, #16]
 8006dc6:	aa12      	add	r2, sp, #72	; 0x48
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	589a      	ldr	r2, [r3, r2]
 8006dce:	9802      	ldr	r0, [sp, #8]
 8006dd0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006dd2:	1a09      	subs	r1, r1, r0
 8006dd4:	0010      	movs	r0, r2
 8006dd6:	4108      	asrs	r0, r1
 8006dd8:	1824      	adds	r4, r4, r0
 8006dda:	4088      	lsls	r0, r1
 8006ddc:	a912      	add	r1, sp, #72	; 0x48
 8006dde:	1a12      	subs	r2, r2, r0
 8006de0:	505a      	str	r2, [r3, r1]
 8006de2:	2317      	movs	r3, #23
 8006de4:	9902      	ldr	r1, [sp, #8]
 8006de6:	9409      	str	r4, [sp, #36]	; 0x24
 8006de8:	1a5b      	subs	r3, r3, r1
 8006dea:	411a      	asrs	r2, r3
 8006dec:	9208      	str	r2, [sp, #32]
 8006dee:	9b08      	ldr	r3, [sp, #32]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dd6d      	ble.n	8006ed0 <__kernel_rem_pio2+0x25c>
 8006df4:	2200      	movs	r2, #0
 8006df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df8:	2080      	movs	r0, #128	; 0x80
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dfe:	4b6c      	ldr	r3, [pc, #432]	; (8006fb0 <__kernel_rem_pio2+0x33c>)
 8006e00:	0014      	movs	r4, r2
 8006e02:	469c      	mov	ip, r3
 8006e04:	2501      	movs	r5, #1
 8006e06:	0440      	lsls	r0, r0, #17
 8006e08:	9b04      	ldr	r3, [sp, #16]
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	dd00      	ble.n	8006e10 <__kernel_rem_pio2+0x19c>
 8006e0e:	e099      	b.n	8006f44 <__kernel_rem_pio2+0x2d0>
 8006e10:	9b02      	ldr	r3, [sp, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dd05      	ble.n	8006e22 <__kernel_rem_pio2+0x1ae>
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d100      	bne.n	8006e1c <__kernel_rem_pio2+0x1a8>
 8006e1a:	e0a9      	b.n	8006f70 <__kernel_rem_pio2+0x2fc>
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d100      	bne.n	8006e22 <__kernel_rem_pio2+0x1ae>
 8006e20:	e0b1      	b.n	8006f86 <__kernel_rem_pio2+0x312>
 8006e22:	9b08      	ldr	r3, [sp, #32]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d153      	bne.n	8006ed0 <__kernel_rem_pio2+0x25c>
 8006e28:	0032      	movs	r2, r6
 8006e2a:	003b      	movs	r3, r7
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	4961      	ldr	r1, [pc, #388]	; (8006fb4 <__kernel_rem_pio2+0x340>)
 8006e30:	f7fa fcd2 	bl	80017d8 <__aeabi_dsub>
 8006e34:	0006      	movs	r6, r0
 8006e36:	000f      	movs	r7, r1
 8006e38:	2c00      	cmp	r4, #0
 8006e3a:	d049      	beq.n	8006ed0 <__kernel_rem_pio2+0x25c>
 8006e3c:	9a02      	ldr	r2, [sp, #8]
 8006e3e:	2000      	movs	r0, #0
 8006e40:	495c      	ldr	r1, [pc, #368]	; (8006fb4 <__kernel_rem_pio2+0x340>)
 8006e42:	f000 fbc1 	bl	80075c8 <scalbn>
 8006e46:	0002      	movs	r2, r0
 8006e48:	000b      	movs	r3, r1
 8006e4a:	0030      	movs	r0, r6
 8006e4c:	0039      	movs	r1, r7
 8006e4e:	f7fa fcc3 	bl	80017d8 <__aeabi_dsub>
 8006e52:	0006      	movs	r6, r0
 8006e54:	000f      	movs	r7, r1
 8006e56:	e03b      	b.n	8006ed0 <__kernel_rem_pio2+0x25c>
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4b57      	ldr	r3, [pc, #348]	; (8006fb8 <__kernel_rem_pio2+0x344>)
 8006e5c:	0020      	movs	r0, r4
 8006e5e:	0029      	movs	r1, r5
 8006e60:	f7fa fa4e 	bl	8001300 <__aeabi_dmul>
 8006e64:	f7fb f868 	bl	8001f38 <__aeabi_d2iz>
 8006e68:	f7fb f89c 	bl	8001fa4 <__aeabi_i2d>
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4b53      	ldr	r3, [pc, #332]	; (8006fbc <__kernel_rem_pio2+0x348>)
 8006e70:	0006      	movs	r6, r0
 8006e72:	000f      	movs	r7, r1
 8006e74:	f7fa fa44 	bl	8001300 <__aeabi_dmul>
 8006e78:	0002      	movs	r2, r0
 8006e7a:	000b      	movs	r3, r1
 8006e7c:	0020      	movs	r0, r4
 8006e7e:	0029      	movs	r1, r5
 8006e80:	f7fa fcaa 	bl	80017d8 <__aeabi_dsub>
 8006e84:	f7fb f858 	bl	8001f38 <__aeabi_d2iz>
 8006e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006e8c:	c301      	stmia	r3!, {r0}
 8006e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e90:	9b08      	ldr	r3, [sp, #32]
 8006e92:	0030      	movs	r0, r6
 8006e94:	3b01      	subs	r3, #1
 8006e96:	9308      	str	r3, [sp, #32]
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	18d3      	adds	r3, r2, r3
 8006e9c:	0039      	movs	r1, r7
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f7f9 faef 	bl	8000484 <__aeabi_dadd>
 8006ea6:	0004      	movs	r4, r0
 8006ea8:	000d      	movs	r5, r1
 8006eaa:	e75d      	b.n	8006d68 <__kernel_rem_pio2+0xf4>
 8006eac:	9b02      	ldr	r3, [sp, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d107      	bne.n	8006ec2 <__kernel_rem_pio2+0x24e>
 8006eb2:	9b04      	ldr	r3, [sp, #16]
 8006eb4:	aa12      	add	r2, sp, #72	; 0x48
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	5898      	ldr	r0, [r3, r2]
 8006ebc:	15c3      	asrs	r3, r0, #23
 8006ebe:	9308      	str	r3, [sp, #32]
 8006ec0:	e795      	b.n	8006dee <__kernel_rem_pio2+0x17a>
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	4b3e      	ldr	r3, [pc, #248]	; (8006fc0 <__kernel_rem_pio2+0x34c>)
 8006ec6:	f7f9 fad3 	bl	8000470 <__aeabi_dcmpge>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d137      	bne.n	8006f3e <__kernel_rem_pio2+0x2ca>
 8006ece:	9008      	str	r0, [sp, #32]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	0030      	movs	r0, r6
 8006ed6:	0039      	movs	r1, r7
 8006ed8:	f7f9 faa6 	bl	8000428 <__aeabi_dcmpeq>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d100      	bne.n	8006ee2 <__kernel_rem_pio2+0x26e>
 8006ee0:	e0b9      	b.n	8007056 <__kernel_rem_pio2+0x3e2>
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	9b04      	ldr	r3, [sp, #16]
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006eec:	428b      	cmp	r3, r1
 8006eee:	da53      	bge.n	8006f98 <__kernel_rem_pio2+0x324>
 8006ef0:	2a00      	cmp	r2, #0
 8006ef2:	d100      	bne.n	8006ef6 <__kernel_rem_pio2+0x282>
 8006ef4:	e095      	b.n	8007022 <__kernel_rem_pio2+0x3ae>
 8006ef6:	9b02      	ldr	r3, [sp, #8]
 8006ef8:	aa12      	add	r2, sp, #72	; 0x48
 8006efa:	3b18      	subs	r3, #24
 8006efc:	9302      	str	r3, [sp, #8]
 8006efe:	9b00      	ldr	r3, [sp, #0]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	589b      	ldr	r3, [r3, r2]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d100      	bne.n	8006f0a <__kernel_rem_pio2+0x296>
 8006f08:	e0a1      	b.n	800704e <__kernel_rem_pio2+0x3da>
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	9a02      	ldr	r2, [sp, #8]
 8006f0e:	4929      	ldr	r1, [pc, #164]	; (8006fb4 <__kernel_rem_pio2+0x340>)
 8006f10:	f000 fb5a 	bl	80075c8 <scalbn>
 8006f14:	0006      	movs	r6, r0
 8006f16:	000f      	movs	r7, r1
 8006f18:	9c00      	ldr	r4, [sp, #0]
 8006f1a:	2c00      	cmp	r4, #0
 8006f1c:	db00      	blt.n	8006f20 <__kernel_rem_pio2+0x2ac>
 8006f1e:	e0d9      	b.n	80070d4 <__kernel_rem_pio2+0x460>
 8006f20:	9c00      	ldr	r4, [sp, #0]
 8006f22:	2c00      	cmp	r4, #0
 8006f24:	da00      	bge.n	8006f28 <__kernel_rem_pio2+0x2b4>
 8006f26:	e10c      	b.n	8007142 <__kernel_rem_pio2+0x4ce>
 8006f28:	ab76      	add	r3, sp, #472	; 0x1d8
 8006f2a:	00e6      	lsls	r6, r4, #3
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	18f6      	adds	r6, r6, r3
 8006f30:	2300      	movs	r3, #0
 8006f32:	9202      	str	r2, [sp, #8]
 8006f34:	9303      	str	r3, [sp, #12]
 8006f36:	9b00      	ldr	r3, [sp, #0]
 8006f38:	2500      	movs	r5, #0
 8006f3a:	1b1f      	subs	r7, r3, r4
 8006f3c:	e0f3      	b.n	8007126 <__kernel_rem_pio2+0x4b2>
 8006f3e:	2302      	movs	r3, #2
 8006f40:	9308      	str	r3, [sp, #32]
 8006f42:	e757      	b.n	8006df4 <__kernel_rem_pio2+0x180>
 8006f44:	9b00      	ldr	r3, [sp, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2c00      	cmp	r4, #0
 8006f4a:	d10b      	bne.n	8006f64 <__kernel_rem_pio2+0x2f0>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d003      	beq.n	8006f58 <__kernel_rem_pio2+0x2e4>
 8006f50:	9c00      	ldr	r4, [sp, #0]
 8006f52:	1ac3      	subs	r3, r0, r3
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	002b      	movs	r3, r5
 8006f58:	9c00      	ldr	r4, [sp, #0]
 8006f5a:	3201      	adds	r2, #1
 8006f5c:	3404      	adds	r4, #4
 8006f5e:	9400      	str	r4, [sp, #0]
 8006f60:	001c      	movs	r4, r3
 8006f62:	e751      	b.n	8006e08 <__kernel_rem_pio2+0x194>
 8006f64:	4661      	mov	r1, ip
 8006f66:	1acb      	subs	r3, r1, r3
 8006f68:	9900      	ldr	r1, [sp, #0]
 8006f6a:	600b      	str	r3, [r1, #0]
 8006f6c:	0023      	movs	r3, r4
 8006f6e:	e7f3      	b.n	8006f58 <__kernel_rem_pio2+0x2e4>
 8006f70:	9b04      	ldr	r3, [sp, #16]
 8006f72:	aa12      	add	r2, sp, #72	; 0x48
 8006f74:	3b01      	subs	r3, #1
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	589a      	ldr	r2, [r3, r2]
 8006f7a:	9200      	str	r2, [sp, #0]
 8006f7c:	0252      	lsls	r2, r2, #9
 8006f7e:	0a52      	lsrs	r2, r2, #9
 8006f80:	a912      	add	r1, sp, #72	; 0x48
 8006f82:	505a      	str	r2, [r3, r1]
 8006f84:	e74d      	b.n	8006e22 <__kernel_rem_pio2+0x1ae>
 8006f86:	9b04      	ldr	r3, [sp, #16]
 8006f88:	aa12      	add	r2, sp, #72	; 0x48
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	589a      	ldr	r2, [r3, r2]
 8006f90:	9200      	str	r2, [sp, #0]
 8006f92:	0292      	lsls	r2, r2, #10
 8006f94:	0a92      	lsrs	r2, r2, #10
 8006f96:	e7f3      	b.n	8006f80 <__kernel_rem_pio2+0x30c>
 8006f98:	0099      	lsls	r1, r3, #2
 8006f9a:	a812      	add	r0, sp, #72	; 0x48
 8006f9c:	5809      	ldr	r1, [r1, r0]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	e7a2      	b.n	8006eea <__kernel_rem_pio2+0x276>
 8006fa4:	fffffd84 	.word	0xfffffd84
 8006fa8:	08007988 	.word	0x08007988
 8006fac:	40200000 	.word	0x40200000
 8006fb0:	00ffffff 	.word	0x00ffffff
 8006fb4:	3ff00000 	.word	0x3ff00000
 8006fb8:	3e700000 	.word	0x3e700000
 8006fbc:	41700000 	.word	0x41700000
 8006fc0:	3fe00000 	.word	0x3fe00000
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006fc8:	009a      	lsls	r2, r3, #2
 8006fca:	4252      	negs	r2, r2
 8006fcc:	588a      	ldr	r2, [r1, r2]
 8006fce:	2a00      	cmp	r2, #0
 8006fd0:	d0f8      	beq.n	8006fc4 <__kernel_rem_pio2+0x350>
 8006fd2:	9a04      	ldr	r2, [sp, #16]
 8006fd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fd6:	1c57      	adds	r7, r2, #1
 8006fd8:	1854      	adds	r4, r2, r1
 8006fda:	00e4      	lsls	r4, r4, #3
 8006fdc:	aa26      	add	r2, sp, #152	; 0x98
 8006fde:	1914      	adds	r4, r2, r4
 8006fe0:	9a04      	ldr	r2, [sp, #16]
 8006fe2:	18d3      	adds	r3, r2, r3
 8006fe4:	9304      	str	r3, [sp, #16]
 8006fe6:	9b04      	ldr	r3, [sp, #16]
 8006fe8:	42bb      	cmp	r3, r7
 8006fea:	da00      	bge.n	8006fee <__kernel_rem_pio2+0x37a>
 8006fec:	e6b0      	b.n	8006d50 <__kernel_rem_pio2+0xdc>
 8006fee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ff0:	00bb      	lsls	r3, r7, #2
 8006ff2:	58d0      	ldr	r0, [r2, r3]
 8006ff4:	f7fa ffd6 	bl	8001fa4 <__aeabi_i2d>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	0026      	movs	r6, r4
 8006ffe:	2500      	movs	r5, #0
 8007000:	6020      	str	r0, [r4, #0]
 8007002:	6061      	str	r1, [r4, #4]
 8007004:	9200      	str	r2, [sp, #0]
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800700a:	429d      	cmp	r5, r3
 800700c:	dd0b      	ble.n	8007026 <__kernel_rem_pio2+0x3b2>
 800700e:	00fb      	lsls	r3, r7, #3
 8007010:	aa76      	add	r2, sp, #472	; 0x1d8
 8007012:	18d3      	adds	r3, r2, r3
 8007014:	3701      	adds	r7, #1
 8007016:	9900      	ldr	r1, [sp, #0]
 8007018:	9a01      	ldr	r2, [sp, #4]
 800701a:	3408      	adds	r4, #8
 800701c:	6019      	str	r1, [r3, #0]
 800701e:	605a      	str	r2, [r3, #4]
 8007020:	e7e1      	b.n	8006fe6 <__kernel_rem_pio2+0x372>
 8007022:	2301      	movs	r3, #1
 8007024:	e7cf      	b.n	8006fc6 <__kernel_rem_pio2+0x352>
 8007026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007028:	00e9      	lsls	r1, r5, #3
 800702a:	1859      	adds	r1, r3, r1
 800702c:	6808      	ldr	r0, [r1, #0]
 800702e:	6849      	ldr	r1, [r1, #4]
 8007030:	6832      	ldr	r2, [r6, #0]
 8007032:	6873      	ldr	r3, [r6, #4]
 8007034:	f7fa f964 	bl	8001300 <__aeabi_dmul>
 8007038:	0002      	movs	r2, r0
 800703a:	000b      	movs	r3, r1
 800703c:	9800      	ldr	r0, [sp, #0]
 800703e:	9901      	ldr	r1, [sp, #4]
 8007040:	f7f9 fa20 	bl	8000484 <__aeabi_dadd>
 8007044:	3501      	adds	r5, #1
 8007046:	9000      	str	r0, [sp, #0]
 8007048:	9101      	str	r1, [sp, #4]
 800704a:	3e08      	subs	r6, #8
 800704c:	e7dc      	b.n	8007008 <__kernel_rem_pio2+0x394>
 800704e:	9b00      	ldr	r3, [sp, #0]
 8007050:	3b01      	subs	r3, #1
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	e74f      	b.n	8006ef6 <__kernel_rem_pio2+0x282>
 8007056:	9b02      	ldr	r3, [sp, #8]
 8007058:	0030      	movs	r0, r6
 800705a:	425a      	negs	r2, r3
 800705c:	0039      	movs	r1, r7
 800705e:	f000 fab3 	bl	80075c8 <scalbn>
 8007062:	2200      	movs	r2, #0
 8007064:	4bb5      	ldr	r3, [pc, #724]	; (800733c <__kernel_rem_pio2+0x6c8>)
 8007066:	0004      	movs	r4, r0
 8007068:	000d      	movs	r5, r1
 800706a:	f7f9 fa01 	bl	8000470 <__aeabi_dcmpge>
 800706e:	2800      	cmp	r0, #0
 8007070:	d025      	beq.n	80070be <__kernel_rem_pio2+0x44a>
 8007072:	2200      	movs	r2, #0
 8007074:	4bb2      	ldr	r3, [pc, #712]	; (8007340 <__kernel_rem_pio2+0x6cc>)
 8007076:	0020      	movs	r0, r4
 8007078:	0029      	movs	r1, r5
 800707a:	f7fa f941 	bl	8001300 <__aeabi_dmul>
 800707e:	f7fa ff5b 	bl	8001f38 <__aeabi_d2iz>
 8007082:	9b04      	ldr	r3, [sp, #16]
 8007084:	0006      	movs	r6, r0
 8007086:	009f      	lsls	r7, r3, #2
 8007088:	f7fa ff8c 	bl	8001fa4 <__aeabi_i2d>
 800708c:	2200      	movs	r2, #0
 800708e:	4bab      	ldr	r3, [pc, #684]	; (800733c <__kernel_rem_pio2+0x6c8>)
 8007090:	f7fa f936 	bl	8001300 <__aeabi_dmul>
 8007094:	0002      	movs	r2, r0
 8007096:	000b      	movs	r3, r1
 8007098:	0020      	movs	r0, r4
 800709a:	0029      	movs	r1, r5
 800709c:	f7fa fb9c 	bl	80017d8 <__aeabi_dsub>
 80070a0:	f7fa ff4a 	bl	8001f38 <__aeabi_d2iz>
 80070a4:	ab12      	add	r3, sp, #72	; 0x48
 80070a6:	51d8      	str	r0, [r3, r7]
 80070a8:	9b04      	ldr	r3, [sp, #16]
 80070aa:	aa12      	add	r2, sp, #72	; 0x48
 80070ac:	3301      	adds	r3, #1
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	9b02      	ldr	r3, [sp, #8]
 80070b2:	3318      	adds	r3, #24
 80070b4:	9302      	str	r3, [sp, #8]
 80070b6:	9b00      	ldr	r3, [sp, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	509e      	str	r6, [r3, r2]
 80070bc:	e725      	b.n	8006f0a <__kernel_rem_pio2+0x296>
 80070be:	9b04      	ldr	r3, [sp, #16]
 80070c0:	0020      	movs	r0, r4
 80070c2:	0029      	movs	r1, r5
 80070c4:	009e      	lsls	r6, r3, #2
 80070c6:	f7fa ff37 	bl	8001f38 <__aeabi_d2iz>
 80070ca:	ab12      	add	r3, sp, #72	; 0x48
 80070cc:	5198      	str	r0, [r3, r6]
 80070ce:	9b04      	ldr	r3, [sp, #16]
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	e71a      	b.n	8006f0a <__kernel_rem_pio2+0x296>
 80070d4:	00e5      	lsls	r5, r4, #3
 80070d6:	ab76      	add	r3, sp, #472	; 0x1d8
 80070d8:	aa12      	add	r2, sp, #72	; 0x48
 80070da:	195d      	adds	r5, r3, r5
 80070dc:	00a3      	lsls	r3, r4, #2
 80070de:	5898      	ldr	r0, [r3, r2]
 80070e0:	f7fa ff60 	bl	8001fa4 <__aeabi_i2d>
 80070e4:	0032      	movs	r2, r6
 80070e6:	003b      	movs	r3, r7
 80070e8:	f7fa f90a 	bl	8001300 <__aeabi_dmul>
 80070ec:	2200      	movs	r2, #0
 80070ee:	6028      	str	r0, [r5, #0]
 80070f0:	6069      	str	r1, [r5, #4]
 80070f2:	4b93      	ldr	r3, [pc, #588]	; (8007340 <__kernel_rem_pio2+0x6cc>)
 80070f4:	0030      	movs	r0, r6
 80070f6:	0039      	movs	r1, r7
 80070f8:	f7fa f902 	bl	8001300 <__aeabi_dmul>
 80070fc:	3c01      	subs	r4, #1
 80070fe:	0006      	movs	r6, r0
 8007100:	000f      	movs	r7, r1
 8007102:	e70a      	b.n	8006f1a <__kernel_rem_pio2+0x2a6>
 8007104:	4b8f      	ldr	r3, [pc, #572]	; (8007344 <__kernel_rem_pio2+0x6d0>)
 8007106:	00e9      	lsls	r1, r5, #3
 8007108:	1859      	adds	r1, r3, r1
 800710a:	6808      	ldr	r0, [r1, #0]
 800710c:	6849      	ldr	r1, [r1, #4]
 800710e:	ce0c      	ldmia	r6!, {r2, r3}
 8007110:	f7fa f8f6 	bl	8001300 <__aeabi_dmul>
 8007114:	0002      	movs	r2, r0
 8007116:	000b      	movs	r3, r1
 8007118:	9802      	ldr	r0, [sp, #8]
 800711a:	9903      	ldr	r1, [sp, #12]
 800711c:	f7f9 f9b2 	bl	8000484 <__aeabi_dadd>
 8007120:	9002      	str	r0, [sp, #8]
 8007122:	9103      	str	r1, [sp, #12]
 8007124:	3501      	adds	r5, #1
 8007126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007128:	429d      	cmp	r5, r3
 800712a:	dc01      	bgt.n	8007130 <__kernel_rem_pio2+0x4bc>
 800712c:	42bd      	cmp	r5, r7
 800712e:	dde9      	ble.n	8007104 <__kernel_rem_pio2+0x490>
 8007130:	ab4e      	add	r3, sp, #312	; 0x138
 8007132:	00ff      	lsls	r7, r7, #3
 8007134:	19df      	adds	r7, r3, r7
 8007136:	3c01      	subs	r4, #1
 8007138:	9a02      	ldr	r2, [sp, #8]
 800713a:	9b03      	ldr	r3, [sp, #12]
 800713c:	603a      	str	r2, [r7, #0]
 800713e:	607b      	str	r3, [r7, #4]
 8007140:	e6ef      	b.n	8006f22 <__kernel_rem_pio2+0x2ae>
 8007142:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007144:	2b02      	cmp	r3, #2
 8007146:	dc0e      	bgt.n	8007166 <__kernel_rem_pio2+0x4f2>
 8007148:	2b00      	cmp	r3, #0
 800714a:	dd00      	ble.n	800714e <__kernel_rem_pio2+0x4da>
 800714c:	e08c      	b.n	8007268 <__kernel_rem_pio2+0x5f4>
 800714e:	2500      	movs	r5, #0
 8007150:	002c      	movs	r4, r5
 8007152:	42ab      	cmp	r3, r5
 8007154:	d046      	beq.n	80071e4 <__kernel_rem_pio2+0x570>
 8007156:	2007      	movs	r0, #7
 8007158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715a:	4003      	ands	r3, r0
 800715c:	0018      	movs	r0, r3
 800715e:	239f      	movs	r3, #159	; 0x9f
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	449d      	add	sp, r3
 8007164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007166:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007168:	2b03      	cmp	r3, #3
 800716a:	d1f4      	bne.n	8007156 <__kernel_rem_pio2+0x4e2>
 800716c:	9b00      	ldr	r3, [sp, #0]
 800716e:	00dc      	lsls	r4, r3, #3
 8007170:	ab4e      	add	r3, sp, #312	; 0x138
 8007172:	191c      	adds	r4, r3, r4
 8007174:	0025      	movs	r5, r4
 8007176:	9b00      	ldr	r3, [sp, #0]
 8007178:	9302      	str	r3, [sp, #8]
 800717a:	9b02      	ldr	r3, [sp, #8]
 800717c:	3d08      	subs	r5, #8
 800717e:	2b00      	cmp	r3, #0
 8007180:	dd00      	ble.n	8007184 <__kernel_rem_pio2+0x510>
 8007182:	e07f      	b.n	8007284 <__kernel_rem_pio2+0x610>
 8007184:	9d00      	ldr	r5, [sp, #0]
 8007186:	3c08      	subs	r4, #8
 8007188:	2d01      	cmp	r5, #1
 800718a:	dd00      	ble.n	800718e <__kernel_rem_pio2+0x51a>
 800718c:	e09c      	b.n	80072c8 <__kernel_rem_pio2+0x654>
 800718e:	2400      	movs	r4, #0
 8007190:	0021      	movs	r1, r4
 8007192:	9b00      	ldr	r3, [sp, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	dd00      	ble.n	800719a <__kernel_rem_pio2+0x526>
 8007198:	e0b4      	b.n	8007304 <__kernel_rem_pio2+0x690>
 800719a:	9b08      	ldr	r3, [sp, #32]
 800719c:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800719e:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 80071a0:	9d50      	ldr	r5, [sp, #320]	; 0x140
 80071a2:	9851      	ldr	r0, [sp, #324]	; 0x144
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d000      	beq.n	80071aa <__kernel_rem_pio2+0x536>
 80071a8:	e0ba      	b.n	8007320 <__kernel_rem_pio2+0x6ac>
 80071aa:	0033      	movs	r3, r6
 80071ac:	003a      	movs	r2, r7
 80071ae:	9e07      	ldr	r6, [sp, #28]
 80071b0:	6032      	str	r2, [r6, #0]
 80071b2:	6073      	str	r3, [r6, #4]
 80071b4:	002a      	movs	r2, r5
 80071b6:	0003      	movs	r3, r0
 80071b8:	60b2      	str	r2, [r6, #8]
 80071ba:	60f3      	str	r3, [r6, #12]
 80071bc:	0022      	movs	r2, r4
 80071be:	000b      	movs	r3, r1
 80071c0:	6132      	str	r2, [r6, #16]
 80071c2:	6173      	str	r3, [r6, #20]
 80071c4:	e7c7      	b.n	8007156 <__kernel_rem_pio2+0x4e2>
 80071c6:	9b00      	ldr	r3, [sp, #0]
 80071c8:	aa4e      	add	r2, sp, #312	; 0x138
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	18d3      	adds	r3, r2, r3
 80071ce:	0028      	movs	r0, r5
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	0021      	movs	r1, r4
 80071d6:	f7f9 f955 	bl	8000484 <__aeabi_dadd>
 80071da:	0005      	movs	r5, r0
 80071dc:	000c      	movs	r4, r1
 80071de:	9b00      	ldr	r3, [sp, #0]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	9b00      	ldr	r3, [sp, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	daed      	bge.n	80071c6 <__kernel_rem_pio2+0x552>
 80071ea:	9b08      	ldr	r3, [sp, #32]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <__kernel_rem_pio2+0x582>
 80071f0:	2380      	movs	r3, #128	; 0x80
 80071f2:	061b      	lsls	r3, r3, #24
 80071f4:	18e4      	adds	r4, r4, r3
 80071f6:	002a      	movs	r2, r5
 80071f8:	0023      	movs	r3, r4
 80071fa:	9907      	ldr	r1, [sp, #28]
 80071fc:	600a      	str	r2, [r1, #0]
 80071fe:	604b      	str	r3, [r1, #4]
 8007200:	e7a9      	b.n	8007156 <__kernel_rem_pio2+0x4e2>
 8007202:	00e3      	lsls	r3, r4, #3
 8007204:	aa4e      	add	r2, sp, #312	; 0x138
 8007206:	18d3      	adds	r3, r2, r3
 8007208:	0030      	movs	r0, r6
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	0029      	movs	r1, r5
 8007210:	f7f9 f938 	bl	8000484 <__aeabi_dadd>
 8007214:	0006      	movs	r6, r0
 8007216:	000d      	movs	r5, r1
 8007218:	3c01      	subs	r4, #1
 800721a:	2c00      	cmp	r4, #0
 800721c:	daf1      	bge.n	8007202 <__kernel_rem_pio2+0x58e>
 800721e:	9b08      	ldr	r3, [sp, #32]
 8007220:	0029      	movs	r1, r5
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <__kernel_rem_pio2+0x5b8>
 8007226:	2380      	movs	r3, #128	; 0x80
 8007228:	061b      	lsls	r3, r3, #24
 800722a:	18e9      	adds	r1, r5, r3
 800722c:	0032      	movs	r2, r6
 800722e:	000b      	movs	r3, r1
 8007230:	9907      	ldr	r1, [sp, #28]
 8007232:	2401      	movs	r4, #1
 8007234:	600a      	str	r2, [r1, #0]
 8007236:	604b      	str	r3, [r1, #4]
 8007238:	984e      	ldr	r0, [sp, #312]	; 0x138
 800723a:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800723c:	002b      	movs	r3, r5
 800723e:	f7fa facb 	bl	80017d8 <__aeabi_dsub>
 8007242:	0007      	movs	r7, r0
 8007244:	000e      	movs	r6, r1
 8007246:	ad4e      	add	r5, sp, #312	; 0x138
 8007248:	9b00      	ldr	r3, [sp, #0]
 800724a:	3508      	adds	r5, #8
 800724c:	42a3      	cmp	r3, r4
 800724e:	da0f      	bge.n	8007270 <__kernel_rem_pio2+0x5fc>
 8007250:	9b08      	ldr	r3, [sp, #32]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <__kernel_rem_pio2+0x5e8>
 8007256:	2380      	movs	r3, #128	; 0x80
 8007258:	061b      	lsls	r3, r3, #24
 800725a:	18f6      	adds	r6, r6, r3
 800725c:	003a      	movs	r2, r7
 800725e:	0033      	movs	r3, r6
 8007260:	9907      	ldr	r1, [sp, #28]
 8007262:	608a      	str	r2, [r1, #8]
 8007264:	60cb      	str	r3, [r1, #12]
 8007266:	e776      	b.n	8007156 <__kernel_rem_pio2+0x4e2>
 8007268:	2600      	movs	r6, #0
 800726a:	9c00      	ldr	r4, [sp, #0]
 800726c:	0035      	movs	r5, r6
 800726e:	e7d4      	b.n	800721a <__kernel_rem_pio2+0x5a6>
 8007270:	0038      	movs	r0, r7
 8007272:	682a      	ldr	r2, [r5, #0]
 8007274:	686b      	ldr	r3, [r5, #4]
 8007276:	0031      	movs	r1, r6
 8007278:	f7f9 f904 	bl	8000484 <__aeabi_dadd>
 800727c:	3401      	adds	r4, #1
 800727e:	0007      	movs	r7, r0
 8007280:	000e      	movs	r6, r1
 8007282:	e7e1      	b.n	8007248 <__kernel_rem_pio2+0x5d4>
 8007284:	9b02      	ldr	r3, [sp, #8]
 8007286:	68ae      	ldr	r6, [r5, #8]
 8007288:	68ef      	ldr	r7, [r5, #12]
 800728a:	3b01      	subs	r3, #1
 800728c:	9302      	str	r3, [sp, #8]
 800728e:	682a      	ldr	r2, [r5, #0]
 8007290:	686b      	ldr	r3, [r5, #4]
 8007292:	9204      	str	r2, [sp, #16]
 8007294:	9305      	str	r3, [sp, #20]
 8007296:	9804      	ldr	r0, [sp, #16]
 8007298:	9905      	ldr	r1, [sp, #20]
 800729a:	0032      	movs	r2, r6
 800729c:	003b      	movs	r3, r7
 800729e:	f7f9 f8f1 	bl	8000484 <__aeabi_dadd>
 80072a2:	0002      	movs	r2, r0
 80072a4:	000b      	movs	r3, r1
 80072a6:	900a      	str	r0, [sp, #40]	; 0x28
 80072a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80072aa:	9804      	ldr	r0, [sp, #16]
 80072ac:	9905      	ldr	r1, [sp, #20]
 80072ae:	f7fa fa93 	bl	80017d8 <__aeabi_dsub>
 80072b2:	0032      	movs	r2, r6
 80072b4:	003b      	movs	r3, r7
 80072b6:	f7f9 f8e5 	bl	8000484 <__aeabi_dadd>
 80072ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072be:	60a8      	str	r0, [r5, #8]
 80072c0:	60e9      	str	r1, [r5, #12]
 80072c2:	602a      	str	r2, [r5, #0]
 80072c4:	606b      	str	r3, [r5, #4]
 80072c6:	e758      	b.n	800717a <__kernel_rem_pio2+0x506>
 80072c8:	6826      	ldr	r6, [r4, #0]
 80072ca:	6867      	ldr	r7, [r4, #4]
 80072cc:	68a2      	ldr	r2, [r4, #8]
 80072ce:	68e3      	ldr	r3, [r4, #12]
 80072d0:	0030      	movs	r0, r6
 80072d2:	0039      	movs	r1, r7
 80072d4:	9202      	str	r2, [sp, #8]
 80072d6:	9303      	str	r3, [sp, #12]
 80072d8:	f7f9 f8d4 	bl	8000484 <__aeabi_dadd>
 80072dc:	0002      	movs	r2, r0
 80072de:	000b      	movs	r3, r1
 80072e0:	9004      	str	r0, [sp, #16]
 80072e2:	9105      	str	r1, [sp, #20]
 80072e4:	0030      	movs	r0, r6
 80072e6:	0039      	movs	r1, r7
 80072e8:	f7fa fa76 	bl	80017d8 <__aeabi_dsub>
 80072ec:	9a02      	ldr	r2, [sp, #8]
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	f7f9 f8c8 	bl	8000484 <__aeabi_dadd>
 80072f4:	9a04      	ldr	r2, [sp, #16]
 80072f6:	9b05      	ldr	r3, [sp, #20]
 80072f8:	60a0      	str	r0, [r4, #8]
 80072fa:	60e1      	str	r1, [r4, #12]
 80072fc:	6022      	str	r2, [r4, #0]
 80072fe:	6063      	str	r3, [r4, #4]
 8007300:	3d01      	subs	r5, #1
 8007302:	e740      	b.n	8007186 <__kernel_rem_pio2+0x512>
 8007304:	9b00      	ldr	r3, [sp, #0]
 8007306:	aa4e      	add	r2, sp, #312	; 0x138
 8007308:	00db      	lsls	r3, r3, #3
 800730a:	18d3      	adds	r3, r2, r3
 800730c:	0020      	movs	r0, r4
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f7f9 f8b7 	bl	8000484 <__aeabi_dadd>
 8007316:	9b00      	ldr	r3, [sp, #0]
 8007318:	0004      	movs	r4, r0
 800731a:	3b01      	subs	r3, #1
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	e738      	b.n	8007192 <__kernel_rem_pio2+0x51e>
 8007320:	9b07      	ldr	r3, [sp, #28]
 8007322:	9a07      	ldr	r2, [sp, #28]
 8007324:	601f      	str	r7, [r3, #0]
 8007326:	2380      	movs	r3, #128	; 0x80
 8007328:	061b      	lsls	r3, r3, #24
 800732a:	18f6      	adds	r6, r6, r3
 800732c:	18c0      	adds	r0, r0, r3
 800732e:	18c9      	adds	r1, r1, r3
 8007330:	6056      	str	r6, [r2, #4]
 8007332:	6095      	str	r5, [r2, #8]
 8007334:	60d0      	str	r0, [r2, #12]
 8007336:	6114      	str	r4, [r2, #16]
 8007338:	6151      	str	r1, [r2, #20]
 800733a:	e70c      	b.n	8007156 <__kernel_rem_pio2+0x4e2>
 800733c:	41700000 	.word	0x41700000
 8007340:	3e700000 	.word	0x3e700000
 8007344:	08007948 	.word	0x08007948

08007348 <__kernel_sin>:
 8007348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734a:	b089      	sub	sp, #36	; 0x24
 800734c:	9202      	str	r2, [sp, #8]
 800734e:	9303      	str	r3, [sp, #12]
 8007350:	22f9      	movs	r2, #249	; 0xf9
 8007352:	004b      	lsls	r3, r1, #1
 8007354:	0007      	movs	r7, r0
 8007356:	000e      	movs	r6, r1
 8007358:	085b      	lsrs	r3, r3, #1
 800735a:	0592      	lsls	r2, r2, #22
 800735c:	4293      	cmp	r3, r2
 800735e:	da03      	bge.n	8007368 <__kernel_sin+0x20>
 8007360:	f7fa fdea 	bl	8001f38 <__aeabi_d2iz>
 8007364:	2800      	cmp	r0, #0
 8007366:	d04c      	beq.n	8007402 <__kernel_sin+0xba>
 8007368:	003a      	movs	r2, r7
 800736a:	0033      	movs	r3, r6
 800736c:	0038      	movs	r0, r7
 800736e:	0031      	movs	r1, r6
 8007370:	f7f9 ffc6 	bl	8001300 <__aeabi_dmul>
 8007374:	0004      	movs	r4, r0
 8007376:	000d      	movs	r5, r1
 8007378:	0002      	movs	r2, r0
 800737a:	000b      	movs	r3, r1
 800737c:	0038      	movs	r0, r7
 800737e:	0031      	movs	r1, r6
 8007380:	f7f9 ffbe 	bl	8001300 <__aeabi_dmul>
 8007384:	4a39      	ldr	r2, [pc, #228]	; (800746c <__kernel_sin+0x124>)
 8007386:	9000      	str	r0, [sp, #0]
 8007388:	9101      	str	r1, [sp, #4]
 800738a:	4b39      	ldr	r3, [pc, #228]	; (8007470 <__kernel_sin+0x128>)
 800738c:	0020      	movs	r0, r4
 800738e:	0029      	movs	r1, r5
 8007390:	f7f9 ffb6 	bl	8001300 <__aeabi_dmul>
 8007394:	4a37      	ldr	r2, [pc, #220]	; (8007474 <__kernel_sin+0x12c>)
 8007396:	4b38      	ldr	r3, [pc, #224]	; (8007478 <__kernel_sin+0x130>)
 8007398:	f7fa fa1e 	bl	80017d8 <__aeabi_dsub>
 800739c:	0022      	movs	r2, r4
 800739e:	002b      	movs	r3, r5
 80073a0:	f7f9 ffae 	bl	8001300 <__aeabi_dmul>
 80073a4:	4a35      	ldr	r2, [pc, #212]	; (800747c <__kernel_sin+0x134>)
 80073a6:	4b36      	ldr	r3, [pc, #216]	; (8007480 <__kernel_sin+0x138>)
 80073a8:	f7f9 f86c 	bl	8000484 <__aeabi_dadd>
 80073ac:	0022      	movs	r2, r4
 80073ae:	002b      	movs	r3, r5
 80073b0:	f7f9 ffa6 	bl	8001300 <__aeabi_dmul>
 80073b4:	4a33      	ldr	r2, [pc, #204]	; (8007484 <__kernel_sin+0x13c>)
 80073b6:	4b34      	ldr	r3, [pc, #208]	; (8007488 <__kernel_sin+0x140>)
 80073b8:	f7fa fa0e 	bl	80017d8 <__aeabi_dsub>
 80073bc:	0022      	movs	r2, r4
 80073be:	002b      	movs	r3, r5
 80073c0:	f7f9 ff9e 	bl	8001300 <__aeabi_dmul>
 80073c4:	4b31      	ldr	r3, [pc, #196]	; (800748c <__kernel_sin+0x144>)
 80073c6:	4a32      	ldr	r2, [pc, #200]	; (8007490 <__kernel_sin+0x148>)
 80073c8:	f7f9 f85c 	bl	8000484 <__aeabi_dadd>
 80073cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073ce:	9004      	str	r0, [sp, #16]
 80073d0:	9105      	str	r1, [sp, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d119      	bne.n	800740a <__kernel_sin+0xc2>
 80073d6:	0002      	movs	r2, r0
 80073d8:	000b      	movs	r3, r1
 80073da:	0020      	movs	r0, r4
 80073dc:	0029      	movs	r1, r5
 80073de:	f7f9 ff8f 	bl	8001300 <__aeabi_dmul>
 80073e2:	4a2c      	ldr	r2, [pc, #176]	; (8007494 <__kernel_sin+0x14c>)
 80073e4:	4b2c      	ldr	r3, [pc, #176]	; (8007498 <__kernel_sin+0x150>)
 80073e6:	f7fa f9f7 	bl	80017d8 <__aeabi_dsub>
 80073ea:	9a00      	ldr	r2, [sp, #0]
 80073ec:	9b01      	ldr	r3, [sp, #4]
 80073ee:	f7f9 ff87 	bl	8001300 <__aeabi_dmul>
 80073f2:	0002      	movs	r2, r0
 80073f4:	000b      	movs	r3, r1
 80073f6:	0038      	movs	r0, r7
 80073f8:	0031      	movs	r1, r6
 80073fa:	f7f9 f843 	bl	8000484 <__aeabi_dadd>
 80073fe:	0007      	movs	r7, r0
 8007400:	000e      	movs	r6, r1
 8007402:	0038      	movs	r0, r7
 8007404:	0031      	movs	r1, r6
 8007406:	b009      	add	sp, #36	; 0x24
 8007408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800740a:	2200      	movs	r2, #0
 800740c:	9802      	ldr	r0, [sp, #8]
 800740e:	9903      	ldr	r1, [sp, #12]
 8007410:	4b22      	ldr	r3, [pc, #136]	; (800749c <__kernel_sin+0x154>)
 8007412:	f7f9 ff75 	bl	8001300 <__aeabi_dmul>
 8007416:	9a04      	ldr	r2, [sp, #16]
 8007418:	9b05      	ldr	r3, [sp, #20]
 800741a:	9006      	str	r0, [sp, #24]
 800741c:	9107      	str	r1, [sp, #28]
 800741e:	9800      	ldr	r0, [sp, #0]
 8007420:	9901      	ldr	r1, [sp, #4]
 8007422:	f7f9 ff6d 	bl	8001300 <__aeabi_dmul>
 8007426:	0002      	movs	r2, r0
 8007428:	000b      	movs	r3, r1
 800742a:	9806      	ldr	r0, [sp, #24]
 800742c:	9907      	ldr	r1, [sp, #28]
 800742e:	f7fa f9d3 	bl	80017d8 <__aeabi_dsub>
 8007432:	0022      	movs	r2, r4
 8007434:	002b      	movs	r3, r5
 8007436:	f7f9 ff63 	bl	8001300 <__aeabi_dmul>
 800743a:	9a02      	ldr	r2, [sp, #8]
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	f7fa f9cb 	bl	80017d8 <__aeabi_dsub>
 8007442:	4a14      	ldr	r2, [pc, #80]	; (8007494 <__kernel_sin+0x14c>)
 8007444:	0004      	movs	r4, r0
 8007446:	000d      	movs	r5, r1
 8007448:	9800      	ldr	r0, [sp, #0]
 800744a:	9901      	ldr	r1, [sp, #4]
 800744c:	4b12      	ldr	r3, [pc, #72]	; (8007498 <__kernel_sin+0x150>)
 800744e:	f7f9 ff57 	bl	8001300 <__aeabi_dmul>
 8007452:	0002      	movs	r2, r0
 8007454:	000b      	movs	r3, r1
 8007456:	0020      	movs	r0, r4
 8007458:	0029      	movs	r1, r5
 800745a:	f7f9 f813 	bl	8000484 <__aeabi_dadd>
 800745e:	0002      	movs	r2, r0
 8007460:	000b      	movs	r3, r1
 8007462:	0038      	movs	r0, r7
 8007464:	0031      	movs	r1, r6
 8007466:	f7fa f9b7 	bl	80017d8 <__aeabi_dsub>
 800746a:	e7c8      	b.n	80073fe <__kernel_sin+0xb6>
 800746c:	5acfd57c 	.word	0x5acfd57c
 8007470:	3de5d93a 	.word	0x3de5d93a
 8007474:	8a2b9ceb 	.word	0x8a2b9ceb
 8007478:	3e5ae5e6 	.word	0x3e5ae5e6
 800747c:	57b1fe7d 	.word	0x57b1fe7d
 8007480:	3ec71de3 	.word	0x3ec71de3
 8007484:	19c161d5 	.word	0x19c161d5
 8007488:	3f2a01a0 	.word	0x3f2a01a0
 800748c:	3f811111 	.word	0x3f811111
 8007490:	1110f8a6 	.word	0x1110f8a6
 8007494:	55555549 	.word	0x55555549
 8007498:	3fc55555 	.word	0x3fc55555
 800749c:	3fe00000 	.word	0x3fe00000

080074a0 <fabs>:
 80074a0:	004b      	lsls	r3, r1, #1
 80074a2:	0859      	lsrs	r1, r3, #1
 80074a4:	4770      	bx	lr
	...

080074a8 <floor>:
 80074a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074aa:	004b      	lsls	r3, r1, #1
 80074ac:	4a3d      	ldr	r2, [pc, #244]	; (80075a4 <floor+0xfc>)
 80074ae:	0d5b      	lsrs	r3, r3, #21
 80074b0:	189f      	adds	r7, r3, r2
 80074b2:	4684      	mov	ip, r0
 80074b4:	000e      	movs	r6, r1
 80074b6:	000d      	movs	r5, r1
 80074b8:	0004      	movs	r4, r0
 80074ba:	9001      	str	r0, [sp, #4]
 80074bc:	2f13      	cmp	r7, #19
 80074be:	dc34      	bgt.n	800752a <floor+0x82>
 80074c0:	2f00      	cmp	r7, #0
 80074c2:	da16      	bge.n	80074f2 <floor+0x4a>
 80074c4:	4a38      	ldr	r2, [pc, #224]	; (80075a8 <floor+0x100>)
 80074c6:	4b39      	ldr	r3, [pc, #228]	; (80075ac <floor+0x104>)
 80074c8:	4660      	mov	r0, ip
 80074ca:	0031      	movs	r1, r6
 80074cc:	f7f8 ffda 	bl	8000484 <__aeabi_dadd>
 80074d0:	2200      	movs	r2, #0
 80074d2:	2300      	movs	r3, #0
 80074d4:	f7f8 ffc2 	bl	800045c <__aeabi_dcmpgt>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d007      	beq.n	80074ec <floor+0x44>
 80074dc:	2e00      	cmp	r6, #0
 80074de:	da5d      	bge.n	800759c <floor+0xf4>
 80074e0:	0073      	lsls	r3, r6, #1
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	431c      	orrs	r4, r3
 80074e6:	d001      	beq.n	80074ec <floor+0x44>
 80074e8:	2400      	movs	r4, #0
 80074ea:	4d31      	ldr	r5, [pc, #196]	; (80075b0 <floor+0x108>)
 80074ec:	46a4      	mov	ip, r4
 80074ee:	002e      	movs	r6, r5
 80074f0:	e029      	b.n	8007546 <floor+0x9e>
 80074f2:	4b30      	ldr	r3, [pc, #192]	; (80075b4 <floor+0x10c>)
 80074f4:	413b      	asrs	r3, r7
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	400b      	ands	r3, r1
 80074fa:	4303      	orrs	r3, r0
 80074fc:	d023      	beq.n	8007546 <floor+0x9e>
 80074fe:	4a2a      	ldr	r2, [pc, #168]	; (80075a8 <floor+0x100>)
 8007500:	4b2a      	ldr	r3, [pc, #168]	; (80075ac <floor+0x104>)
 8007502:	4660      	mov	r0, ip
 8007504:	0031      	movs	r1, r6
 8007506:	f7f8 ffbd 	bl	8000484 <__aeabi_dadd>
 800750a:	2200      	movs	r2, #0
 800750c:	2300      	movs	r3, #0
 800750e:	f7f8 ffa5 	bl	800045c <__aeabi_dcmpgt>
 8007512:	2800      	cmp	r0, #0
 8007514:	d0ea      	beq.n	80074ec <floor+0x44>
 8007516:	2e00      	cmp	r6, #0
 8007518:	da03      	bge.n	8007522 <floor+0x7a>
 800751a:	2380      	movs	r3, #128	; 0x80
 800751c:	035b      	lsls	r3, r3, #13
 800751e:	413b      	asrs	r3, r7
 8007520:	18f5      	adds	r5, r6, r3
 8007522:	9b00      	ldr	r3, [sp, #0]
 8007524:	2400      	movs	r4, #0
 8007526:	439d      	bics	r5, r3
 8007528:	e7e0      	b.n	80074ec <floor+0x44>
 800752a:	2f33      	cmp	r7, #51	; 0x33
 800752c:	dd0f      	ble.n	800754e <floor+0xa6>
 800752e:	2380      	movs	r3, #128	; 0x80
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	429f      	cmp	r7, r3
 8007534:	d107      	bne.n	8007546 <floor+0x9e>
 8007536:	0002      	movs	r2, r0
 8007538:	000b      	movs	r3, r1
 800753a:	4660      	mov	r0, ip
 800753c:	0031      	movs	r1, r6
 800753e:	f7f8 ffa1 	bl	8000484 <__aeabi_dadd>
 8007542:	4684      	mov	ip, r0
 8007544:	000e      	movs	r6, r1
 8007546:	4660      	mov	r0, ip
 8007548:	0031      	movs	r1, r6
 800754a:	b003      	add	sp, #12
 800754c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800754e:	4a1a      	ldr	r2, [pc, #104]	; (80075b8 <floor+0x110>)
 8007550:	189b      	adds	r3, r3, r2
 8007552:	2201      	movs	r2, #1
 8007554:	4252      	negs	r2, r2
 8007556:	40da      	lsrs	r2, r3
 8007558:	9200      	str	r2, [sp, #0]
 800755a:	4210      	tst	r0, r2
 800755c:	d0f3      	beq.n	8007546 <floor+0x9e>
 800755e:	4a12      	ldr	r2, [pc, #72]	; (80075a8 <floor+0x100>)
 8007560:	4b12      	ldr	r3, [pc, #72]	; (80075ac <floor+0x104>)
 8007562:	4660      	mov	r0, ip
 8007564:	0031      	movs	r1, r6
 8007566:	f7f8 ff8d 	bl	8000484 <__aeabi_dadd>
 800756a:	2200      	movs	r2, #0
 800756c:	2300      	movs	r3, #0
 800756e:	f7f8 ff75 	bl	800045c <__aeabi_dcmpgt>
 8007572:	2800      	cmp	r0, #0
 8007574:	d0ba      	beq.n	80074ec <floor+0x44>
 8007576:	2e00      	cmp	r6, #0
 8007578:	da02      	bge.n	8007580 <floor+0xd8>
 800757a:	2f14      	cmp	r7, #20
 800757c:	d103      	bne.n	8007586 <floor+0xde>
 800757e:	3501      	adds	r5, #1
 8007580:	9b00      	ldr	r3, [sp, #0]
 8007582:	439c      	bics	r4, r3
 8007584:	e7b2      	b.n	80074ec <floor+0x44>
 8007586:	2334      	movs	r3, #52	; 0x34
 8007588:	1bdf      	subs	r7, r3, r7
 800758a:	3b33      	subs	r3, #51	; 0x33
 800758c:	40bb      	lsls	r3, r7
 800758e:	18e4      	adds	r4, r4, r3
 8007590:	9b01      	ldr	r3, [sp, #4]
 8007592:	429c      	cmp	r4, r3
 8007594:	419b      	sbcs	r3, r3
 8007596:	425b      	negs	r3, r3
 8007598:	18f5      	adds	r5, r6, r3
 800759a:	e7f1      	b.n	8007580 <floor+0xd8>
 800759c:	2400      	movs	r4, #0
 800759e:	0025      	movs	r5, r4
 80075a0:	e7a4      	b.n	80074ec <floor+0x44>
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	fffffc01 	.word	0xfffffc01
 80075a8:	8800759c 	.word	0x8800759c
 80075ac:	7e37e43c 	.word	0x7e37e43c
 80075b0:	bff00000 	.word	0xbff00000
 80075b4:	000fffff 	.word	0x000fffff
 80075b8:	fffffbed 	.word	0xfffffbed

080075bc <nan>:
 80075bc:	2000      	movs	r0, #0
 80075be:	4901      	ldr	r1, [pc, #4]	; (80075c4 <nan+0x8>)
 80075c0:	4770      	bx	lr
 80075c2:	46c0      	nop			; (mov r8, r8)
 80075c4:	7ff80000 	.word	0x7ff80000

080075c8 <scalbn>:
 80075c8:	004b      	lsls	r3, r1, #1
 80075ca:	b570      	push	{r4, r5, r6, lr}
 80075cc:	0d5b      	lsrs	r3, r3, #21
 80075ce:	0014      	movs	r4, r2
 80075d0:	000a      	movs	r2, r1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10d      	bne.n	80075f2 <scalbn+0x2a>
 80075d6:	004b      	lsls	r3, r1, #1
 80075d8:	085b      	lsrs	r3, r3, #1
 80075da:	4303      	orrs	r3, r0
 80075dc:	d010      	beq.n	8007600 <scalbn+0x38>
 80075de:	4b27      	ldr	r3, [pc, #156]	; (800767c <scalbn+0xb4>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	f7f9 fe8d 	bl	8001300 <__aeabi_dmul>
 80075e6:	4b26      	ldr	r3, [pc, #152]	; (8007680 <scalbn+0xb8>)
 80075e8:	429c      	cmp	r4, r3
 80075ea:	da0a      	bge.n	8007602 <scalbn+0x3a>
 80075ec:	4a25      	ldr	r2, [pc, #148]	; (8007684 <scalbn+0xbc>)
 80075ee:	4b26      	ldr	r3, [pc, #152]	; (8007688 <scalbn+0xc0>)
 80075f0:	e019      	b.n	8007626 <scalbn+0x5e>
 80075f2:	4d26      	ldr	r5, [pc, #152]	; (800768c <scalbn+0xc4>)
 80075f4:	42ab      	cmp	r3, r5
 80075f6:	d108      	bne.n	800760a <scalbn+0x42>
 80075f8:	0002      	movs	r2, r0
 80075fa:	000b      	movs	r3, r1
 80075fc:	f7f8 ff42 	bl	8000484 <__aeabi_dadd>
 8007600:	bd70      	pop	{r4, r5, r6, pc}
 8007602:	000a      	movs	r2, r1
 8007604:	004b      	lsls	r3, r1, #1
 8007606:	0d5b      	lsrs	r3, r3, #21
 8007608:	3b36      	subs	r3, #54	; 0x36
 800760a:	4d21      	ldr	r5, [pc, #132]	; (8007690 <scalbn+0xc8>)
 800760c:	18e3      	adds	r3, r4, r3
 800760e:	42ab      	cmp	r3, r5
 8007610:	dd0c      	ble.n	800762c <scalbn+0x64>
 8007612:	4c20      	ldr	r4, [pc, #128]	; (8007694 <scalbn+0xcc>)
 8007614:	4d20      	ldr	r5, [pc, #128]	; (8007698 <scalbn+0xd0>)
 8007616:	2900      	cmp	r1, #0
 8007618:	da01      	bge.n	800761e <scalbn+0x56>
 800761a:	4c1e      	ldr	r4, [pc, #120]	; (8007694 <scalbn+0xcc>)
 800761c:	4d1f      	ldr	r5, [pc, #124]	; (800769c <scalbn+0xd4>)
 800761e:	0020      	movs	r0, r4
 8007620:	0029      	movs	r1, r5
 8007622:	4a1c      	ldr	r2, [pc, #112]	; (8007694 <scalbn+0xcc>)
 8007624:	4b1c      	ldr	r3, [pc, #112]	; (8007698 <scalbn+0xd0>)
 8007626:	f7f9 fe6b 	bl	8001300 <__aeabi_dmul>
 800762a:	e7e9      	b.n	8007600 <scalbn+0x38>
 800762c:	2b00      	cmp	r3, #0
 800762e:	dd05      	ble.n	800763c <scalbn+0x74>
 8007630:	4c1b      	ldr	r4, [pc, #108]	; (80076a0 <scalbn+0xd8>)
 8007632:	051b      	lsls	r3, r3, #20
 8007634:	4022      	ands	r2, r4
 8007636:	431a      	orrs	r2, r3
 8007638:	0011      	movs	r1, r2
 800763a:	e7e1      	b.n	8007600 <scalbn+0x38>
 800763c:	001d      	movs	r5, r3
 800763e:	3535      	adds	r5, #53	; 0x35
 8007640:	da13      	bge.n	800766a <scalbn+0xa2>
 8007642:	4a18      	ldr	r2, [pc, #96]	; (80076a4 <scalbn+0xdc>)
 8007644:	0fcb      	lsrs	r3, r1, #31
 8007646:	4294      	cmp	r4, r2
 8007648:	dd08      	ble.n	800765c <scalbn+0x94>
 800764a:	4812      	ldr	r0, [pc, #72]	; (8007694 <scalbn+0xcc>)
 800764c:	4912      	ldr	r1, [pc, #72]	; (8007698 <scalbn+0xd0>)
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <scalbn+0x8e>
 8007652:	4810      	ldr	r0, [pc, #64]	; (8007694 <scalbn+0xcc>)
 8007654:	4911      	ldr	r1, [pc, #68]	; (800769c <scalbn+0xd4>)
 8007656:	4a0f      	ldr	r2, [pc, #60]	; (8007694 <scalbn+0xcc>)
 8007658:	4b0f      	ldr	r3, [pc, #60]	; (8007698 <scalbn+0xd0>)
 800765a:	e7e4      	b.n	8007626 <scalbn+0x5e>
 800765c:	4809      	ldr	r0, [pc, #36]	; (8007684 <scalbn+0xbc>)
 800765e:	490a      	ldr	r1, [pc, #40]	; (8007688 <scalbn+0xc0>)
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0c3      	beq.n	80075ec <scalbn+0x24>
 8007664:	4807      	ldr	r0, [pc, #28]	; (8007684 <scalbn+0xbc>)
 8007666:	4910      	ldr	r1, [pc, #64]	; (80076a8 <scalbn+0xe0>)
 8007668:	e7c0      	b.n	80075ec <scalbn+0x24>
 800766a:	4c0d      	ldr	r4, [pc, #52]	; (80076a0 <scalbn+0xd8>)
 800766c:	3336      	adds	r3, #54	; 0x36
 800766e:	4022      	ands	r2, r4
 8007670:	051b      	lsls	r3, r3, #20
 8007672:	4313      	orrs	r3, r2
 8007674:	0019      	movs	r1, r3
 8007676:	2200      	movs	r2, #0
 8007678:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <scalbn+0xe4>)
 800767a:	e7d4      	b.n	8007626 <scalbn+0x5e>
 800767c:	43500000 	.word	0x43500000
 8007680:	ffff3cb0 	.word	0xffff3cb0
 8007684:	c2f8f359 	.word	0xc2f8f359
 8007688:	01a56e1f 	.word	0x01a56e1f
 800768c:	000007ff 	.word	0x000007ff
 8007690:	000007fe 	.word	0x000007fe
 8007694:	8800759c 	.word	0x8800759c
 8007698:	7e37e43c 	.word	0x7e37e43c
 800769c:	fe37e43c 	.word	0xfe37e43c
 80076a0:	800fffff 	.word	0x800fffff
 80076a4:	0000c350 	.word	0x0000c350
 80076a8:	81a56e1f 	.word	0x81a56e1f
 80076ac:	3c900000 	.word	0x3c900000

080076b0 <_init>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b6:	bc08      	pop	{r3}
 80076b8:	469e      	mov	lr, r3
 80076ba:	4770      	bx	lr

080076bc <_fini>:
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c2:	bc08      	pop	{r3}
 80076c4:	469e      	mov	lr, r3
 80076c6:	4770      	bx	lr
